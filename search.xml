<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【置顶】游戏更新日志</title>
      <link href="/2040/03/10/%E6%B8%B8%E6%88%8F%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2040/03/10/%E6%B8%B8%E6%88%8F%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h4 id="游戏更新日志"><a href="#游戏更新日志" class="headerlink" title="游戏更新日志"></a>游戏更新日志</h4><p>20180126 </p><p>开始构思</p><p>201802 </p><p>一直构思，挑选bgm，很多时候重复听一首歌，重复许多遍，脑子里想这首歌应该配什么场景</p><p>20180324 </p><p>之前因为眼睛的激光手术，Vue学习和校园卡充值项目，拖到现在正式开始做</p><p>20180328</p><p>完成最初始的小demo，一个小火箭，一堆圆球</p><p>20180330</p><p>将火箭的运行方式改为帅的一塌糊涂的折线，难度极大，因为要绘制折线，必须逐像素确定位置，做了很久</p><p>20180401</p><p>四个模式都完成了，方形/圆/曲线/折线，并且可以切换，切换时可以有bug，但过程还算流程，不太打算改了，最大的问题是折线进行时的渲染，性能不好的话会画的曲流拐弯难看的不行，也许和我的动画帧数与计算的计时器调用频率有关，也许两者达到某个关系即可非常流畅，这两天试试</p><p>20180406</p><p>更新了折线，通过计时器的改进，现在点击松开切换不会卡顿了，也不会再有难看的不规则线条，但是出现了新的问题，折线在边界处会让整个线条完全扯淡的瞎转(好像问题更大了)，在网页上实现比在程序中要难不少，解决方案是，让折线碰到边界时，死掉，这就完美了，明天再实现</p><p>改进前</p><p><img src="/img/content/game3.png" alt="caonima"></p><p>改进后</p><p><img src="/img/content/game2.png" alt="zhexian"></p><p>20180407</p><p>彻底解决箭头状态在边缘时的动画效果问题，原来是之前封装到计时器函数的调用出了问题，搞了半天也没解决，经过测试，那个函数只被调用一次就停了，最后的方案是取消封装，反正只用那么一两次，搁在外面凑活下也没问题，下一步是封装各种障碍物，刺/方块/Gaster Blaster/斜坡，其中方块可以组成多种形状，以及辅助用的版块，大中小弹簧/二次跳跃点/翻转重力/翻转左右/加速减速/复制玩家，以及死亡，现在的折现线条可以闪烁了</p><p>20180408</p><p>圆不是匀速运动了，现在有加速度，同时减少了初速度</p><p>20180409</p><p>小方块添加了跳跃旋转的动画，用昨天的那种麻烦的旋转方法，算好速度加速度跳跃时间，每帧转9°，落下后如果在30°到60°间，则继续转，否则直接跳到90°的倍数，这么做是为了画面流畅，如果方块在平面上转，太违和了，如果不转直接到90°，又不流畅，中和下来，这是最好的办法添加了可以踩的方块，这是这游戏的精髓，游戏最主要的模式是方形，那必须像马里奥一样造出立体的地图，用方块即可，以后还会有刺/斜面，地图初始化方式是，一个超长的数组，储存地图信息，0是空，1是方块，然后每帧前进vx</p><p><img src="/img/content/game4.png" alt="fangkuai"></p><p>20180410</p><p>现在玩家可以被迎面而来的方块撞死了，也可以跳到方块上，在方块上起跳，或者不跳，等方块走过自由落体，从没想过做一个小物理引擎这么困难，要考虑的情况太多了，各种碰撞检测，每个方块的上下左右，还要重写之前的跳跃逻辑，如果检测到边缘，跳跃硬设为false，如果玩家自己跳跃，自然是true，但是如果方块走开而玩家没有跳，需要重新检测，还要检测玩家有没有碰到上面的方块，以及怎样才算碰到，碰撞体积，落在方块上和被撞死的检测有什么不同，最后的方案是，方块进入玩家体内15后才算被撞死，这样区别撞死和落在上面的不同，实际情况还要复杂的多，因为有圆形，每次跳跃后aX反向，那circleJump和circleIsJump又是个很复杂的逻辑，这个比方形难得多。地图用数组储存，这是刚开始，以后数组会越来越大，暂定2代表尖刺，3代表弹簧</p><p><img src="/img/content/game5.png" alt="ditu"></p><p>20180412</p><p>刺和弹簧，刺有正反，弹簧也有，很简单，弹簧给它个瞬间速度就好，添加了上方方块的下面碰撞检测，现在玩家飞不到方块里面了，以后会添加重力转变剩下的模式可以贴着上方的方块走</p><p><img src="/img/content/game6.png" alt="game6"></p><p>除了箭头和方块，以及分身</p><p>20180415</p><p>减少了线条数组容量，减少了曲线的点和线条的宽度，增加了曲线的曲率和加速度，增加了方块的加速度，现在方块和圆处于同一个重力模型下，可以更好的适配，减少了方块的初速度，scale真是个傻逼的函数，canvas没有很好的还原功能，save和restore只能触发最近的保存点，那么放大缩小就极其难受，每帧放大/缩小1.05倍，再加上水平位移14.5和垂直位移22，达到比较好的视觉效果</p><p>做游戏的过程感觉逻辑思维获得明显锻炼，实际的实现触碰到许多问题，被实时想出方案就觉，但是编程基础没有多少提升，Canvas终究只是一个小版块，Vue学习的第一个阶段已经完成，算是入门了，越来越感受到基础JS的重要性，</p><p>20180418</p><p>现在代码的可读性更高了，维护和更改的成本也变低了，封装了常用的一些函数，将常用的判断Flag声明成变量，同时添加了二段跳机制，是个黄圈，以后会将画面改善。下一个目标是做出来重力翻转系统</p><p>20180419</p><p>微派的CEO大哥给我提了些意见，现在这个游戏的定位是一款移动端的休闲游戏，所以做出许多调整，具体如下：</p><ol><li>降低难度，现在玩家如果持续按住屏幕，会一直跳，而不是按住只跳一次。其实并不提倡玩家按住屏幕，也很少有需要不间断的跳的地方，这个改动是为了增加判定点，即在一些极端的地方，比如只有一个格的反应时间，玩家可能会提前按下屏幕一小会，这个改动让玩家即使提前按，也可以跳起来，难度降低很多，不再针对硬核玩家极限操作</li><li>只保留一个模式，当时说的是折线，但我认为方块模式才是这游戏的精髓，剩下的都是锦上添花，我只是比较喜欢折线，但如果做游戏，还是类似马里奥的方块模式好，这样和弹簧/多段跳的配合更好</li><li>地图上的调整，更长，难度渐进，接下来会具体说明</li></ol><p>20180420</p><ol><li><p>√ 数组重置，因为这和测试不一样了，超长的地图，如果仍然逐帧渲染每一个方块，判断类型内存肯定吃不消的，所以每当地图中的元素进入屏幕时，开始渲染，移出时，停止渲染，更重要的是，即使数组中元素没有进入屏幕，也会有个判断过程，所以我把数组分成了多组，每组时间大概十秒，用一个负数标记，当这个数进入屏幕时，删除数组元素直到剩下22个，因为一个屏幕刚好容纳22个横格，全删完会让屏幕出现真空期，之后把下一组元素加到这组后面，以此类推，可以加无限多个</p></li><li><p>方块背后的影子，只是一个方块有些无聊，视觉体验考虑，方块移动时背后可以有残影，这个虽然还没实现，但不算难，思路都有，因为之前我做折线和曲线时定义了路径的记录方法，我可以获取到方块的路径，那就很简单了</p></li><li><p>重力转换，说实话，这游戏做到现在，我发现只是加了弹簧，地图就已经花里胡哨了，我之前已经在考虑要不要加重力转换和多段跳的机制了，想了很久，最后决定加上，但直到游戏后期才会出现，这些机制是属于高玩的，而且机制也很简单，不难理解，至于什么是后期，我会解释的</p></li><li><p>双人模式，这个是重点，那天面试，面试官问我对双人多人游戏有什么想法，又看到这个公司在做会玩平台，平台全是多人游戏，所以我这个加个双人模式不会有错，我想的是，双人模式的地图上下对称，玩家看自己是在下面，看对面是在顶上，两者重力想法，一起闯关一个地图，同时，你的对手的视角上，你在上面，他在下面，（因为在下面更符合人们的正常需求心理），就像王者容易一样，对称的地图，两边都看自己在左下角。自然，到重力翻转的地方，就变成了你在上面，对手在下面。两人颜色会有区别，比如一个蓝一个黄，加以区分。这样也不用担心地图只有一半可以利用，是可以交叉的，比如，方块是既可以从上面踩，又可以从下面踩，可以有的地方我到了比较高的地方，那对面也就到了很低的地方，总之，整个地图上下都能利用，想象一下。这个我可以做出来，但只能做成电脑上的，一个按上，一个按W，这个可以把电脑抱过去给公司的人演示</p></li><li><p>大金币，这是从马里奥兄弟延续下的传统，一个图总要有几个大金币，它们在隐藏点或看得到但极难到达的点，这个可以给玩家惊喜，也可以给高玩挑战自我的机会，吃不到大金币也不会死，对手残党很友好</p></li><li><p>最重要的模块系统：作为一个休闲游戏，要照顾大多数手残党，难度分三个档，低中高，每个档各有五十个左右模块，游戏开始时，从所有模块池随机摇，低中各摇十个模块，随机组成地图，高难度档是无线循环的，先进行低难度，十个模块走完还没死，中难度，还没死，高难度，之后无限。不用担心玩家对高难度感到无聊，因为高难度的操作已经有些极限了，再加上这游戏的容错率为0，所以玩家能撑过十个高难度模块就不错了，我自己估计也玩不过多少。当然这个是在意淫，这两天我肯定做不出来，但我认为这是个不错的想法，下次见到CEO可以跟他讲一讲</p></li></ol><p>发了个说说，让大家测试了下，得到了不少有用的反馈</p><p>总结下：</p><p>刺的判定点太小，其实判定点本来就应该这么大，只是它的外观太大，改了刺的外观</p><p>弹簧的判定点，同理</p><p>太难，难度梯度不合理，已改，前期难度明显减少，后面难度略微增大</p><p>和几何冲刺的比较，几何冲刺是个技术型游戏，不亲民，容错率极低，而我这个作为休闲游戏，应该降低游戏难度，所以减小了伤害的判定点，增加了方块的滞空时间，地图构造上也极大的减小了难度</p><p>但这些还不够，我认为应该进一步减小方块的重力加速度，让方块有更多的时间停留在空中，这样更符合重力翻转的主题，空中也可以加更多的跳跃点，当重力不断翻转，玩家在空中来回晃荡并踩准点跳跃，是个很不错的视觉和操作体验，难度就在于在空中踩点要求很高的精准度，所以物理引擎必须相当精准，同时增加容错率，即使玩家提前点击一小会，仍然可以在空中的多段跳点跳起来</p><p>现在的设定是，按住可以一直跳，因为我的物理引擎有些问题，重力加速度正常，但没有最高速度限制点，所以很难控制玩家在空中的时间，玩家很快的落下，又必须尽快跳起，难度极大，所以增加了按住屏幕可以连跳的机制，减少游戏难度，但这样也有人反馈，对习惯连点的玩家不友好，会造成误操，如果真的做这个项目，就要去掉按住连跳，重写物理模型，增加滞空时间，减少跳跃间隔</p><p>毕竟这个游戏的精髓就是在于点击，而不是按住</p><p>关于重力翻转：</p><ol><li>翻转后背景改变，提醒玩家重力翻转</li><li>分为地图自动控制的翻转和玩家在特殊点碰到的，比如类似多段跳点，当玩家在那个特定的点跳时，会翻转重力落到另一边，以及特殊的弹簧，可以让玩家翻转重力，这些翻转重力点多半是玩家必须要使用的，否则过不去</li><li>想过自动控制会不会使玩家感到不适，但翻转作为游戏的特性，让玩家集中注意力观察地图是否翻转并不过分，这作为一种地图机制没有问题，而且会给玩家留出一定反应时间，玩家观察地图也能猜出是否会翻转</li></ol><p>游戏特点：</p><p>玩法独特</p><p>不断的重力翻转，这在其它游戏很少见到，即使其它游戏里有，翻转的频率远没有这个游戏多</p><p>快速跑酷的乐趣</p><p>不断突破记录的体验</p><p>和(微信)好友比拼</p><p>意外获得的彩蛋</p><p>和竞品比较：</p><p>其实类似的游戏主要集中在国外，这种极简的横版跑酷游戏在国内真不常见</p><p>游戏的设计：</p><p>几何风格或Q版风格几何有些抽象</p><p>bgm不必和游戏地图契合，但一定是可循环的，有活力的</p><p>目标用户：</p><p>喜欢挑战的，或者休闲型的，对用户操作要求不高，重点在玩数据变化的游戏</p><p>休闲游戏玩家；喜欢玩能快速入门、玩法独特有趣、用户体验好的游戏，对重点在玩数据变化的游戏无感</p><p>即使游戏难度低，由于一碰即死的设定，仍非常容易死，玩几局能活到10秒，活到30秒算入门，60秒中等，90秒高玩</p><p>确认重力翻转为游戏的核心</p><p>0</p><!-- <div id="fuck"></div><div id="gaster"></div><audio id="music" autoplay>   <source src="/music/GasterBattle.mp3" type="audio/mpeg">  您的浏览器不支持 audio 元素。</audio><script>alert("打开声音");    var gaster = document.createElement("div");    var body = document.getElementsByTagName("body")[0];    body.appendChild(gaster);    // var gaster = document.getElementById("gaster");    gaster.innerHTML="<img src='/img/content/gaster2.png' style='width:100%;position:fixed;'/>";    gaster.setAttribute('style', 'z-index:99; position: absolute; left: 0; top: 0;width:100%;height:100%;display: none;');var count = 0;var time;    setTimeout(function() {  time = setInterval(function() {    count ++;    if(gaster.style.display === "none"){    gaster.style.display = "block";  }    else {      gaster.style.display = "none";    }    if(count === 15) {      gaster.style.display = "none";      clearInterval(time);    }  },99);},11580 );  document.addEventListener('touchstart', function() {  document.getElementById("music").play();  });music.onpause=function () {      music.play()}; </script> -->]]></content>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天想出一个不错的游戏 很开心</title>
      <link href="/2018/04/25/%E4%BB%8A%E5%A4%A9%E9%87%8D%E6%96%B0%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8%E7%94%9F%E6%B4%BB-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/25/%E4%BB%8A%E5%A4%A9%E9%87%8D%E6%96%B0%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8%E7%94%9F%E6%B4%BB-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨早操差点没起来，之后是体育课，我和打篮球的大兄弟最多颠了31个排球，看来体育不会挂科了</p><p>之后是听力，听力测验，六级的题有点难，听完发现群里居然有人传了答案，这样不就让所有人分数一样了吗</p><p>那他从网上查答案的意义何在</p><p>还是说放弃了自己分数更高的机会，而选择让全班欠他个人情，如果是这样，这人还挺聪明的</p><p>早知道班群里有答案，我就不费劲自己上网搜了</p><p>中午和一个在抖音上有一万多粉丝的男神鸡了一顿，感到非常荣幸，甚至还有些自豪</p><p>之后拿了电脑直接去北宗，遥感在讲些概念的，继续完成游戏，看了看分治算法，带着他欣赏了他的算法博客</p><p>之后和他去健身房，碰上了他在练肩，感觉他每次都在练肩</p><p>这两天忙，痩了两斤，得多吃点</p><p>晚上吃了饭去图书馆</p><p>看了会测量学概念，从头看的，开天辟地，很有成就感</p><p>之后做游戏，我都佩服自己，从头做了套简单的算法，画地图一点都不卡，而且我把数组加到了几千个数，仍然不卡，贼牛逼</p><p>不是按方块堆叠了，而是按点画线最后填充</p><p>十点回寝室</p><p>另外，今天有个很好的游戏想法</p><p>5</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>想到可以做个手游，量级很小，可以做在小程序上</p><p>双人游戏</p><p>屏幕上有许多圆球无规则晃动，大概30个，玩家1是其中一个，可以控制他的圆球，但他控制的球和其他球看起来<strong>完全一样</strong></p><p>玩家2不需要控制，他需要的是，找到玩家1</p><p>找到后，点击认为是玩家1的球，如果是，游戏结束，如果不是，去掉这个球，游戏继续，3次机会，30秒限制</p><p>AI控制的球会随意移动，而玩家1需要把自己伪装成AI</p><p>这是个题材很新颖的游戏，我敢说现在市面上几乎没有同类型的游戏</p><p>不再是AI模仿玩家，而是玩家模仿AI，听着就很有意思</p><p>游戏可拓展性很强，比如在某个特定时间点，所有AI突然在1秒内陆陆续续向一个方向移动，那么玩家1需要立刻反应过来跟着AI走，否则很容易被认出来</p><p>或者所有AI突然停下</p><p>地图要素可以有传送门和草丛，在草丛中移动，看不见球但草丛会晃动，玩家2仍然可以通过点击草丛来找人</p><p>AI也会从传送门走来走去</p><p>跟同学说了说，同学说相当不错，而且还很好做</p><p>等着问问点石这帮人谁有时间能帮我实现</p><p>不行就我自己来</p><p>草他妈的，我同学刚告诉我最近出了一款和我想的一样的游戏，而且就是最近出的，操，叫什么什么spy</p><p>我还是想做</p><p>毕竟这个游戏在中国不火</p><p>其实所有在steam/gamejolt上的小众休闲游戏，都可以抄</p><p>再看中国的休闲游戏市场，说实话，大部分游戏深究，总能发现一个和它极其相似的国外产的游戏</p><p>能说什么呢，赚钱就行了</p><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>画出地图的算法，比原来优化了许多，彻底不卡了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 游戏UI</span><br><span class="line">var upupLines = new Array();</span><br><span class="line">var downLines = new Array();</span><br><span class="line">upupLines.push(7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  // 20</span><br><span class="line">  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, </span><br><span class="line">  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, </span><br><span class="line">  5, 5, 5, 5, 6, 7, 6, 5, 5, 4, 5, 5, 6, 7, 6, 5, 4, 5, 6, 7,</span><br><span class="line">  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,</span><br><span class="line"></span><br><span class="line">  6, 5, 5, 4, 5, 6, 7, 7, 6, 5, 4, 4, 4, 5, 6, 7, 6, 5, 4, 4, </span><br><span class="line">  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, </span><br><span class="line">  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, </span><br><span class="line">  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, </span><br><span class="line">  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, </span><br><span class="line"></span><br><span class="line">  5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 7, 5, 5, 7</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">downLines.push(0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, </span><br><span class="line">  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, </span><br><span class="line">  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, </span><br><span class="line">  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, </span><br><span class="line">  1, 1, 1, 1, 2, 3, 2, 1, 0, 0, 1, 2, 2, 3, 2, 2, 1, 2, 3, 3,</span><br><span class="line"></span><br><span class="line">  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</span><br><span class="line">  1, 1, 1, 1, 2, 3, 2, 1, 0, 0, 1, 2, 3, 3, 3, 2, 1, 2, 3, 2, </span><br><span class="line">  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, </span><br><span class="line">  1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 3, 2, 1, 1, 1, 1, 1, 2, 3, 2,</span><br><span class="line">  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,</span><br><span class="line"></span><br><span class="line">  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,</span><br><span class="line">   0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  for (var i = 0; i &lt; upupLines.length; i++) &#123;</span><br><span class="line">    var cX = i * 63 + blockX1;</span><br><span class="line">    cUpY = blockY1 - upupLines[i] * 63;</span><br><span class="line">    if (i === 0)</span><br><span class="line">      context.moveTo(cX, cUpY);</span><br><span class="line">    else</span><br><span class="line">      context.lineTo(cX, cUpY);</span><br><span class="line"></span><br><span class="line">    if (cX &lt; 350 &amp;&amp; cX + 63 &gt; 350) &#123;</span><br><span class="line">      currentUpY = cUpY + (blockY1 - upupLines[i + 1] * 63 - cUpY) / 63 * (350 - cX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  for (var i = 0; i &lt; downLines.length; i++) &#123;</span><br><span class="line">    var cX = i * 63 + blockX1;</span><br><span class="line">    cDownY = blockY1 - downLines[i] * 63;</span><br><span class="line">    if (i === 0)</span><br><span class="line">      context.moveTo(cX, cDownY);</span><br><span class="line">    else</span><br><span class="line">      context.lineTo(cX, cDownY);</span><br><span class="line"></span><br><span class="line">    if (cX &lt;= 350 &amp;&amp; cX + 63 &gt;= 350) &#123;</span><br><span class="line">      currentDownY = cDownY + (blockY1 - downLines[i + 1] * 63 - cDownY) / 63 * (350 - cX);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.fill();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天还在做游戏 很开心</title>
      <link href="/2018/04/24/%E4%BB%8A%E5%A4%A9%E8%BF%98%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/24/%E4%BB%8A%E5%A4%A9%E8%BF%98%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>11</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>今天也在做游戏 很开心</title>
      <link href="/2018/04/22/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/22/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>做游戏 </p><p>发了个说说，让大家测试了下，得到了不少有用的反馈</p><p>总结下：</p><p>刺的判定点太小，其实判定点本来就应该这么大，只是它的外观太大，改了刺的外观</p><p>弹簧的判定点，同理</p><p>太难，难度梯度不合理，已改，前期难度明显减少，后面难度略微增大</p><p>和几何冲刺的比较，几何冲刺是个技术型游戏，不亲民，容错率极低，而我这个作为休闲游戏，应该降低游戏难度，所以减小了伤害的判定点，增加了方块的滞空时间，地图构造上也极大的减小了难度</p><p>但这些还不够，我认为应该进一步减小方块的重力加速度，让方块有更多的时间停留在空中，这样更符合重力翻转的主题，空中也可以加更多的跳跃点，当重力不断翻转，玩家在空中来回晃荡并踩准点跳跃，是个很不错的视觉和操作体验，难度就在于在空中踩点要求很高的精准度，所以物理引擎必须相当精准，同时增加容错率，即使玩家提前点击一小会，仍然可以在空中的多段跳点跳起来</p><p>现在的设定是，按住可以一直跳，因为我的物理引擎有些问题，重力加速度正常，但没有最高速度限制点，所以很难控制玩家在空中的时间，玩家很快的落下，又必须尽快跳起，难度极大，所以增加了按住屏幕可以连跳的机制，减少游戏难度，但这样也有人反馈，对习惯连点的玩家不友好，会造成误操，如果真的做这个项目，就要去掉按住连跳，重写物理模型，增加滞空时间，减少跳跃间隔</p><p>毕竟这个游戏的精髓就是在于点击，而不是按住</p><p>关于重力翻转：</p><ol><li>翻转后背景改变，提醒玩家重力翻转</li><li>分为地图自动控制的翻转和玩家在特殊点碰到的，比如类似多段跳点，当玩家在那个特定的点跳时，会翻转重力落到另一边，以及特殊的弹簧，可以让玩家翻转重力，这些翻转重力点多半是玩家必须要使用的，否则过不去</li><li>想过自动控制会不会使玩家感到不适，但翻转作为游戏的特性，让玩家集中注意力观察地图是否翻转并不过分，这作为一种地图机制没有问题，而且会给玩家留出一定反应时间，玩家观察地图也能猜出是否会翻转</li></ol><p>游戏特点：</p><p>玩法独特</p><p>不断的重力翻转，这在其它游戏很少见到，即使其它游戏里有，翻转的频率远没有这个游戏多</p><p>快速跑酷的乐趣</p><p>不断突破记录的体验</p><p>和(微信)好友比拼</p><p>意外获得的彩蛋</p><p>和竞品比较：</p><p>其实类似的游戏主要集中在国外，这种极简的横版跑酷游戏在国内真不常见</p><p>游戏的设计：</p><p>几何风格或Q版风格几何有些抽象</p><p>bgm不必和游戏地图契合，但一定是可循环的，有活力的</p><p>目标用户：</p><p>喜欢挑战的，或者休闲型的，对用户操作要求不高，重点在玩数据变化的游戏</p><p>休闲游戏玩家；喜欢玩能快速入门、玩法独特有趣、用户体验好的游戏，对重点在玩数据变化的游戏无感</p><p>即使游戏难度低，由于一碰即死的设定，仍非常容易死，玩几局能活到10秒，活到30秒算入门，60秒中等，90秒高玩</p><p>确认重力翻转为游戏的核心</p><p>0</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天做游戏 很开心</title>
      <link href="/2018/04/21/%E4%BB%8A%E5%A4%A9%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/21/%E4%BB%8A%E5%A4%A9%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>做游戏</p><p>4</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天在做游戏 很开心</title>
      <link href="/2018/04/20/%E4%BB%8A%E5%A4%A9%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/20/%E4%BB%8A%E5%A4%A9%E5%9C%A8%E5%81%9A%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早操英语看古老的西部牛仔电影，之后算法，中午睡觉，下午数字信号学，取快递，三磅蛋白粉，和他去健身，他可劲奶我，叫我即将拥有工作的王天智，晚上图书馆做游戏</p><p>下午有个来武汉玩的傻吊叫我去光谷玩，我说做游戏没时间</p><p>今天课很满，没多少时间，要不然可以多做些的</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>今天上课写了不少游戏的策划，以及游戏的地图，有一些关于游戏特性的点</p><p>在图书馆做游戏，主要是性能优化和地图构造，现在有一定可玩性了</p><ul><li><p>To Do List:</p><ol><li><p>√ 数组重置，因为这和测试不一样了，超长的地图，如果仍然逐帧渲染每一个方块，判断类型内存肯定吃不消的，所以每当地图中的元素进入屏幕时，开始渲染，移出时，停止渲染，更重要的是，即使数组中元素没有进入屏幕，也会有个判断过程，所以我把数组分成了多组，每组时间大概十秒，用一个负数标记，当这个数进入屏幕时，删除数组元素直到剩下22个，因为一个屏幕刚好容纳22个横格，全删完会让屏幕出现真空期，之后把下一组元素加到这组后面，以此类推，可以加无限多个</p></li><li><p>方块背后的影子，只是一个方块有些无聊，视觉体验考虑，方块移动时背后可以有残影，这个虽然还没实现，但不算难，思路都有，因为之前我做折线和曲线时定义了路径的记录方法，我可以获取到方块的路径，那就很简单了</p></li><li><p>重力转换，说实话，这游戏做到现在，我发现只是加了弹簧，地图就已经花里胡哨了，我之前已经在考虑要不要加重力转换和多段跳的机制了，想了很久，最后决定加上，但直到游戏后期才会出现，这些机制是属于高玩的，而且机制也很简单，不难理解，至于什么是后期，我会解释的</p></li><li><p>双人模式，这个是重点，那天面试，面试官问我对双人多人游戏有什么想法，又看到这个公司在做会玩平台，平台全是多人游戏，所以我这个加个双人模式不会有错，我想的是，双人模式的地图上下对称，玩家看自己是在下面，看对面是在顶上，两者重力想法，一起闯关一个地图，同时，你的对手的视角上，你在上面，他在下面，（因为在下面更符合人们的正常需求心理），就像王者容易一样，对称的地图，两边都看自己在左下角。自然，到重力翻转的地方，就变成了你在上面，对手在下面。两人颜色会有区别，比如一个蓝一个黄，加以区分。这样也不用担心地图只有一半可以利用，是可以交叉的，比如，方块是既可以从上面踩，又可以从下面踩，可以有的地方我到了比较高的地方，那对面也就到了很低的地方，总之，整个地图上下都能利用，想象一下。这个我可以做出来，但只能做成电脑上的，一个按上，一个按W，这个可以把电脑抱过去给公司的人演示</p></li><li><p>大金币，这是从马里奥兄弟延续下的传统，一个图总要有几个大金币，它们在隐藏点或看得到但极难到达的点，这个可以给玩家惊喜，也可以给高玩挑战自我的机会，吃不到大金币也不会死，对手残党很友好</p></li><li><p>最重要的模块系统：作为一个休闲游戏，要照顾大多数手残党，难度分三个档，低中高，每个档各有五十个左右模块，游戏开始时，从所有模块池随机摇，低中各摇十个模块，随机组成地图，高难度档是无线循环的，先进行低难度，十个模块走完还没死，中难度，还没死，高难度，之后无限。不用担心玩家对高难度感到无聊，因为高难度的操作已经有些极限了，再加上这游戏的容错率为0，所以玩家能撑过十个高难度模块就不错了，我自己估计也玩不过多少。当然这个是在意淫，这两天我肯定做不出来，但我认为这是个不错的想法，下次见到CEO可以跟他讲一讲</p></li></ol></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> canvas </tag>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天去了微派 很开心</title>
      <link href="/2018/04/19/%E4%BB%8A%E5%A4%A9%E5%8E%BB%E4%BA%86%E5%BE%AE%E6%B4%BE-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/19/%E4%BB%8A%E5%A4%A9%E5%8E%BB%E4%BA%86%E5%BE%AE%E6%B4%BE-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>上午毛概网课，之后是是嵌入式，在看JS的继承，总共六种继承看的头晕眼花的</p><p>下午过得非常帅</p><p>一点多点石集合去微派交流</p><p>听了大牛们的产品、技术和运维的经验，也提了些问题，主要关于贪吃蛇大作战</p><p>在我看来PVP转到PVE是亮点</p><p>介绍完后是面试，我跟HR讲了讲我是有点产品经验的，人家直接安排我面试，看来是非常缺产品</p><p>聊了很多游戏，涉及到蜡笔物理学，深海水族馆，Move or die，几何冲刺，Mugen，以撒的结合，以及和产品大哥聊得最多的炉石传说等</p><p>到CEO面，没有发挥好，玩的最多的以撒和炉石忘了说，在聊一些自己不太在行的游戏</p><p>让我做完这个游戏，至少可以玩，下个星期给他们</p><p>之前做的Canvas小游戏成了关键，这两天做完它，给公司个交代</p><p>我今天真他妈帅</p><hr><h3 id="JS继承"><a href="#JS继承" class="headerlink" title="JS继承"></a>JS继承</h3><p>今天的经历很传奇，现在写不下去，以后再写</p>]]></content>
      
      
        <tags>
            
            <tag> 微派 </tag>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天学了js原型和继承 很开心</title>
      <link href="/2018/04/18/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E4%BA%86js%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/18/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E4%BA%86js%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>毛概网课自拍签到，这宝贝是真他妈可爱</p><p><img src="/img/content/liuzeyang.png" alt="liuzeyang"></p><p>早晨早操吃饭体育课，搭档没来，点完名假装去捡球溜了，之后口语，配音秀了一把，看来去年那半年英语口语没还没忘光</p><p>中午吃完饭直接和他去图书馆，现在是四点半，呆了四个小时了，准备七点左右走</p><p>晚上和他去健身</p><p>有个傻逼晚上就要带着女朋友来武汉了，他让我看了看这几天的武汉天气</p><p><img src="/img/content/tianqi.png" alt="天气"></p><p>这傻逼是来求雨的吗</p><p>大概周六能和他转转，还有他女朋友和我的同桌，一圈算下来就我一个单身的，也无所谓了</p><hr><h3 id="JS中的面向对象的程序设计"><a href="#JS中的面向对象的程序设计" class="headerlink" title="JS中的面向对象的程序设计"></a>JS中的面向对象的程序设计</h3><p>创建自定义对象最简单的方法就是创建一个object实例</p><hr><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><p>ECMAScript中有两种属性 数据属性和访问其属性</p><p>他们是只有内部才用的特性，JS不能直接访问他们，为了表现是内部值，放在两对方括号里</p><hr><ul><li>数据属性<ol><li>[[Configurable]] 表示能否delete属性而重新定义属性，能否修改属性的特性，能否把属性修改为访问其属性，默认true</li><li>[[Enumerable]] 能否用for-in循环返回属性，默认true</li><li>[[Writable]] 能否修改属性的值，默认true</li><li>[[Value]] 包括属性的数据值，读写都是在这个地方，默认true</li></ol></li></ul><p>Object.defineProperty()修改默认特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;&#125;;</span><br><span class="line">Object.defineProperty(person, &quot;name&quot;, &#123;writable: false, value: &quot;Nicholas&quot;&#125;);</span><br></pre></td></tr></table></figure><p>上述没有name属性，所以定义了name属性</p><p>如果强行修改不可写的，不会有反应，严格模式下回报错</p><hr><ul><li>访问器属性<ol><li>[[Configurable]]</li><li>[[Enumberable]]</li><li>[[Get]] 读时的函数 undefined，有点像监听器的意思</li><li>[[Set]] 写时的函数 undefined</li></ol></li></ul><p>同样只能用Object.defineProperty()</p><hr><p>Object.defineProperties()定义多个属性</p><p>读取属性</p><pre><code>var descriptor = Object.getOwnPropertyDecriptor(book, &quot;year&quot;)alert(descriptor.configurable);</code></pre><hr><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function c(name) &#123;</span><br><span class="line">  var o = new Object();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.sayName=function() &#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">  &#125;;</span><br><span class="line">  return o ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var o = c(&quot;sjm&quot;);</span><br></pre></td></tr></table></figure><p>缺点是没有对象识别能力</p><hr><h5 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function C(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">var o = new C(&quot;dashabilijingyu&quot;);</span><br></pre></td></tr></table></figure><p>构造函数惯例首字母大写</p><p>这个o实例有一个构造函数属性，指向C</p><pre><code>o.constructor === C;o instanceof Object === o instanceof C; //true</code></pre><p>这意味着它的实例可以标识为一种特定类型</p><p>构造函数可以当做普通函数用</p><pre><code>C(&quot;scy&quot;); // 添加到window了window.sayName();//还可以在别的函数作用域调用var ob = new Object();C.call(ob, &quot;mingzi&quot;);ob.sayName();</code></pre><p>有个问题，如果对象里有函数，那么多次实例化对象，函数也会多次创建，JS里函数是对象，没必要创建多个完成同样任务的Function实例，所以可以这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function c(name) &#123;</span><br><span class="line">  var o = new Object();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.sayName=sayName;</span><br><span class="line">  return o ;</span><br><span class="line">&#125;</span><br><span class="line">function sayName() &#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>当成全局函数处理</p><p>当然这样还有不足，所以用原型模式</p><hr><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>每个函数都有个原型属性，它是个指针，指向一个对象，这个对象包含所有实例共享的属性和方法</p><p>这个对象还有个属性是constructor，它指向原构造函数</p><p>每个实例都有原型属性，它和它的构造函数中的原型指针指向同一位置</p><p>是不是描述的很清楚</p><p>所有实现都无法访问到[[Prototype]]</p><p>通过isPrototypeOf()确定对象之间是否有联系</p><pre><code>alert(Person.prototype.isPrototypeOf(person1)); //true</code></pre><p>ECMAScript5中新增的方法，Object.getPrototypeOf() 返回Prototype</p><pre><code>Object.getPrototypeOf(person1) === Person.prototype</code></pre><p>如果prototype和实例本身中有重名，会优先取实例本身中的值</p><p>换句话说，查找时，先找本身，再找原型，如果本身有，原型会屏蔽</p><hr><pre><code>alert(&quot;name&quot; in person1);   // 查找nameObject.hasOwnProperty(name)  // 查找property，返回boolean</code></pre><p>所以通过以上两个一起用，即可判断是原型中的属性，还是本身中的属性</p><p>使用for-in循环时，返回的是所有enumerated为true的属性，包括实例和原型中的</p><p>要获得所有可枚举的属性时，用ECMAScript5中的object.keys</p><pre><code>Object.keys(Person.prototype)   //也可以是实例本身(person1)，这样只返回本身的</code></pre><hr><h5 id="更简单的语法"><a href="#更简单的语法" class="headerlink" title="更简单的语法"></a>更简单的语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype= &#123;</span><br><span class="line">  name: &quot;jinrong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样有个例外，constructor属性不再指向Person了，这种语法本质上完全重写了prototype对象，所以constructor成了新对象的属性</p><p>尽管这样，instanceof仍然能返回正确的值</p><p>如果非要正确的constructor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype= &#123;</span><br><span class="line">  name: &quot;jinrong&quot;,</span><br><span class="line">  constructor: Person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="动态的原型"><a href="#动态的原型" class="headerlink" title="动态的原型"></a>动态的原型</h5><p>每次在原型中查找值都是一次搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var person1 = Person();</span><br><span class="line">Person.prototype.name = &quot;jinrong&quot;;</span><br><span class="line">alert(person1.name);    //没问题</span><br></pre></td></tr></table></figure></p><p>但如果是重写原型对象，就不一样了</p><pre><code>Person.prototype = {}</code></pre><hr><p>原生对象的原型也可以使用，比如可以给Array多加个函数</p><hr><h5 id="原型的问题"><a href="#原型的问题" class="headerlink" title="原型的问题"></a>原型的问题</h5><p>所有数据共享意味着如果不初始化，每个实例的数据都一样，包含基本值的还行，拿自己的覆盖上就好了，但引用类的共享有很大问题，比如一个数组，你修改后，所有用这个原型的实例的数组全部改变</p><p>所以可以采用构造函数和原型组合使用的模式</p><p>所有基本值和引用类对象放在构造函数里面，函数放在原型里就成了</p><hr><h5 id="动态原型"><a href="#动态原型" class="headerlink" title="动态原型"></a>动态原型</h5><p>有个问题，每次调用构造函数，都要执行一遍原型初始化，实际上只有第一次需要</p><p>一个typeof判断方法就可以解决，不管原型有多少，判断其中一个就够了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数里</span><br><span class="line">if(typeof this.sayName!=&quot;function&quot;) &#123;</span><br><span class="line">  Person.prototype.sayName = function() &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h5><p>和工厂差不多就是改一行</p><pre><code>var friend = new Person(&quot;nameee&quot;);</code></pre><p>加个new</p><p>可以在特殊情况下用来为对象创建构造函数，比如我们想创建一个有额外方法的数组</p><hr><h5 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h5><p>不用任何this和new</p><p>适合在安全的环境中或者放置数据被其他应用改动时使用</p><hr><h3 id="Canvas小游戏"><a href="#Canvas小游戏" class="headerlink" title="Canvas小游戏"></a>Canvas小游戏</h3><p>现在代码的可读性更高了，维护和更改的成本也变低了</p><p>封装了常用的一些函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function move() &#123;</span><br><span class="line">  if(!player.moveTurn)&#123;</span><br><span class="line">    player.vY += player.aY;</span><br><span class="line">    player.y += player.vY;&#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      player.vY -= player.aY;</span><br><span class="line">    player.y -= player.vY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var dead = function() &#123;</span><br><span class="line">    // Stop thrust sound</span><br><span class="line">    soundThrust.pause();</span><br><span class="line"></span><br><span class="line">    // Play death sound</span><br><span class="line">    soundDeath.currentTime = 0;</span><br><span class="line">    soundDeath.play();</span><br><span class="line"></span><br><span class="line">    // Game over</span><br><span class="line">    playGame = false;</span><br><span class="line">    clearTimeout(scoreTimeout);</span><br><span class="line">    uiStats.hide();</span><br><span class="line">    uiComplete.show();</span><br><span class="line">    document.getElementById(&quot;gameReset&quot;).ontouchstart = reset;</span><br><span class="line">    // Reset sounds</span><br><span class="line">    soundBackground.pause();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将常用的判断Flag声明成变量</p><p>同时添加了二段跳机制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">for (var k = 0; k &lt; blocks.length; k++) &#123;</span><br><span class="line">      for (var m = 0; m &lt; blocks[0].length; m++) &#123;</span><br><span class="line">        var hitX = player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth;</span><br><span class="line">        var hitXlong = player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 3) * blockWidth;</span><br><span class="line"></span><br><span class="line">        var hitXYdead = (player.x + player.halfWidth * 0.5 &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth * 0.5 &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;((player.y + player.halfHeight * 0.5 - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight * 0.5 - (blockY1 - k * blockHeight) &lt; -15);</span><br><span class="line">        var hitXYjumpVoid = (player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;((player.y + player.halfHeight - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight - (blockY1 - k * blockHeight) &lt; -15);</span><br><span class="line">        var hitXYjumpLand = (player.x + player.halfWidth * 0.5 &gt;= blockX1 + (m + 0.2) * blockWidth &amp;&amp; player.x - player.halfWidth * 0.5 &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;((player.y + player.halfHeight * 0.5 - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight * 0.5 - (blockY1 - k * blockHeight) &lt; -15);</span><br><span class="line">        switch (blocks[k][m]) &#123;</span><br><span class="line"></span><br><span class="line">        // 缩放</span><br><span class="line">          case 21:</span><br><span class="line">            if (!player.big &amp;&amp; hitXlong)</span><br><span class="line">                scaleContext(context, -14.5, -22, 1.05, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">          case 22:</span><br><span class="line">            if (player.big &amp;&amp; hitXlong) </span><br><span class="line">                scaleContext(context, 14.5, 22, 0.95238, -1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">            //方块</span><br><span class="line">          case 1:</span><br><span class="line">            context.fillRect(blockX1 + m * blockWidth, blockY1 - (k + 1) * blockHeight, blockWidth, blockHeight);</span><br><span class="line">            if (hitXYdead) &#123;</span><br><span class="line">              dead();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            break;</span><br><span class="line">            //地上的三角</span><br><span class="line">          case 2:</span><br><span class="line"></span><br><span class="line">            context.beginPath();</span><br><span class="line"></span><br><span class="line">            context.moveTo(blockX1 + (m + 0.5) * blockWidth, blockY1 - (k + 1) * blockHeight);</span><br><span class="line">            context.lineTo(blockX1 + m * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line">            context.lineTo(blockX1 + (m + 1) * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line"></span><br><span class="line">            context.closePath();</span><br><span class="line">            context.fillStyle = &quot;red&quot;;</span><br><span class="line">            context.fill();</span><br><span class="line">            context.fillStyle = &quot;white&quot;;</span><br><span class="line">            if (hitXYdead) &#123;</span><br><span class="line">              dead();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">            // 挂着的三角</span><br><span class="line">          case 3:</span><br><span class="line"></span><br><span class="line">            context.beginPath();</span><br><span class="line">            context.moveTo(blockX1 + (m + 0.5) * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line">            context.lineTo(blockX1 + m * blockWidth, blockY1 - (k + 1) * blockHeight);</span><br><span class="line">            context.lineTo(blockX1 + (m + 1) * blockWidth, blockY1 - (k + 1) * blockHeight);</span><br><span class="line">            context.closePath();</span><br><span class="line">            context.fillStyle = &quot;red&quot;;</span><br><span class="line">            context.fill();</span><br><span class="line">            context.fillStyle = &quot;white&quot;;</span><br><span class="line">            if (hitXYdead) &#123;</span><br><span class="line">              dead();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">            //地上弹簧</span><br><span class="line">          case 4:</span><br><span class="line">            context.fillStyle = &quot;yellow&quot;;</span><br><span class="line">            context.fillRect(blockX1 + (m + 0.2) * blockWidth, blockY1 - (k + 0.3) * blockHeight, 0.6 * blockWidth, 0.3 * blockHeight);</span><br><span class="line">            context.fillStyle = &quot;white&quot;;</span><br><span class="line">            if (hitXYjumpLand) &#123;</span><br><span class="line">              if (player.shapeFlag !== 4) &#123;</span><br><span class="line">                if (player.shapeFlag === 3)</span><br><span class="line">                  player.vY = -5;</span><br><span class="line">                else</span><br><span class="line">                  player.vY = -22;</span><br><span class="line">                player.squareJump = true;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">            //变形</span><br><span class="line">          case 11:</span><br><span class="line">            if (hitX) &#123;</span><br><span class="line">              player.shapeFlag = 1;</span><br><span class="line">              player.squareJump = true;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">          case 12:</span><br><span class="line">            if (hitX) &#123;</span><br><span class="line">              player.shapeFlag = 2;</span><br><span class="line">              player.circleIsJump = true;</span><br><span class="line">              player.circleJump = false;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">          case 13:</span><br><span class="line">            if (hitX) &#123;</span><br><span class="line">              player.shapeFlag = 3;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">          case 14:</span><br><span class="line">            if (hitX) &#123;</span><br><span class="line">              player.shapeFlag = 4;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">            // 二段跳</span><br><span class="line">          case 5:</span><br><span class="line">            if ((player.shapeFlag === 1 || player.shapeFlag === 2) &amp;&amp; ondownFlag&amp;&amp;hitXYjumpVoid) &#123;</span><br><span class="line">              player.vY = -12;</span><br><span class="line">            &#125;</span><br><span class="line">            context.beginPath();</span><br><span class="line">            context.arc(blockX1 + (m+0.5) * blockWidth, blockY1 - (k + 0.5) * blockHeight, blockWidth/2, 0, Math.PI * 2, true);</span><br><span class="line">            context.closePath();</span><br><span class="line">            context.fillStyle = &quot;yellow&quot;;</span><br><span class="line">            context.fill();</span><br><span class="line">            context.fillStyle = &quot;white&quot;;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 继承 </tag>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天学会改博客模板 很开心</title>
      <link href="/2018/04/17/%E4%BB%8A%E5%A4%A9%E5%8F%88%E5%90%AC%E4%BA%86%E5%A5%BD%E5%A4%9A%E9%81%8D%E9%82%A3%E9%A6%96%E6%AD%8C-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/17/%E4%BB%8A%E5%A4%A9%E5%8F%88%E5%90%AC%E4%BA%86%E5%A5%BD%E5%A4%9A%E9%81%8D%E9%82%A3%E9%A6%96%E6%AD%8C-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨早操后没课，去教室整博客，之后三四节是郭明强老师的嵌入式，他今天也发挥出了正常水平，讲课全靠对口型，舍不得让我们听见声音，所以我仍然在整博客</p><p>中午下课又留在教室和他学习一会，十二点二十和他吃饭，回寝室，睡觉，下午起来发现陈亮老师给我的消息，大概跟我说了下项目，又听两个跟着他学的朋友讲了讲，现在先学着，基础不是重点，学好框架是重中之重(<del>杨毅脸</del>)，六七八月开始做</p><p>框架主要用SSM或React，现在更流行React，我也希望是用React这种JS框架来做，毕竟我目标是前端，Vue算是入门了，Anguler和Vue差不多，React也跟着做个项目的话就算齐活了</p><p>下午去图书馆，继续补JS基础，我是瞎着翻的，昨天看的21章，今天看的第4章</p><p>现在我可以随意更改博客界面了，要不要做个玩具熊的Jump Scare？</p><p>也许我已经做了？</p><hr><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>鼓捣了一上午，主要是引入访问量功能，hexo是个静态框架，没法自带访问量功能，所以引入第三方库</p><p>第一个想到的是LeanCloud，用工具这个词来形容它比较好，这种神奇的工具甚至有时可以替代一个项目的后端，它提供REST API和SDK，如果只是用REST API的话，学习成本也不高，是个不错的东西，只是 没多少人用它做所有后端，我想更多是数据存储和分析功能，也就是个<strong>大数据库</strong>的功能</p><p>一句话形容：一站式后端云服务，包括云存储、数据分析、用户关系、消息推送、即时通信等现代应用基础模块，满足移动开发所有需求。</p><p>以下是一些理解优缺点，<del>大</del>部分内容来自逼乎老哥<strong>磊磊</strong></p><ul><li><p>稳定，基于Clojure开发，比自己瞎几把写的PHP啊Node啊Python不知道强多少倍，企业级另说</p></li><li><p>相信大部分个人开发者选择LeanCloud的第一原因，是追求：快速。表面也确实如此，lc提供了各种服务，正所谓专业的人做专业的事，开发者只需要集中精力在前端/客户端的开发，顺利的话，可能一两天就能利用LeanCloud搭建起了原型，对应用层面的开发者来说，似乎一个人就能完成一整个应用，确实很有吸引力。</p></li><li><p>后端服务，并不能代替后端知识。虽然Leancloud对各种后端服务进行简化和抽象，直接通过提供的SDK调用方法就行了，但开发者仍需要掌握后端中的一些通用知识，才能够玩转。比如说使用最多数据存储服务，实际上对应的就是数据库的概念，开发者首先需要掌握数据库的基本概念（且越深入越好），才能用好数据存储服务。</p></li><li><p>黑盒。Leancloud对开发者可见的，只有文档了，开发者并不知道调用时发生了什么，一切顺利的情况下还好，如果报错了，就只能到文档中寻找答案，如果恰好这时候文档没找到答案，就比较悲催了，只能发工单（vip）或者到论坛提问，效率是比较低的。这也是前面说的，开发起来感觉累。而如果是自己写后端服务，碰到问题可以到搜索引擎中寻找答案。</p></li><li><p>技能的局限性。深入使用了LeanCloud之后，也许能做到对 LeanCloud 中各种功能和使用方法很了解，但如果有一天迁移了平台，或者自己写服务器，那这部分LeanCloud的知识几乎就没用了。熟练掌握LeanCloud数据存储服务的价值远比不上熟练使用MySQL。</p></li></ul><hr><p>总之，我用lC建了个小应用，用来储存和处理我的访问量信息，代码量不多，主要是获取APPID和KEY后和我的网页绑定，之后再用提供的API获取数据库中的信息，写到页面上</p><p>缺点是不好统计整个页面的信息</p><p>而且也会有bug，比如同一页面访问量有时分开计算，重写两次，这需要我上数据库自己清掉</p><p>所以我又用了卜算子，这个极其简单，两行代码就可以搞定，所以现在的主页上，总访问量是卜算子统计的，分开的访问量是LeanCloud统计的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function addCount (Counter) &#123;</span><br><span class="line">        url=$(&apos;.article-date&apos;).attr(&apos;href&apos;).trim();</span><br><span class="line">        title = $(&apos;.article-title&apos;).text().trim();</span><br><span class="line">        var query=new AV.Query(Counter);</span><br><span class="line">        //use url as unique idnetfication</span><br><span class="line">        query.equalTo(&quot;url&quot;,url);</span><br><span class="line">        query.find(&#123;</span><br><span class="line">            success: function(results)&#123;</span><br><span class="line">                if(results.length&gt;0)</span><br><span class="line">                &#123;</span><br><span class="line">                    var counter=results[0];</span><br><span class="line">                    counter.fetchWhenSave(true); //get recent result</span><br><span class="line">                    counter.increment(&quot;time&quot;);</span><br><span class="line">                    counter.save();</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    var newcounter=new Counter();</span><br><span class="line">                    newcounter.set(&quot;title&quot;,title);</span><br><span class="line">                    newcounter.set(&quot;url&quot;,url);</span><br><span class="line">                    newcounter.set(&quot;time&quot;,1);</span><br><span class="line">                    newcounter.save(null,&#123;</span><br><span class="line">                        success: function(newcounter)&#123;</span><br><span class="line">                        //alert(&apos;New object created&apos;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        error: function(newcounter,error)&#123;</span><br><span class="line">                        alert(&apos;Failed to create&apos;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function(error)&#123;</span><br><span class="line">                //find null is not a error</span><br><span class="line">                alert(&apos;Error:&apos;+error.code+&quot; &quot;+error.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">$(function()&#123;</span><br><span class="line">        var Counter=AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        //only increse visit counting when intering a page</span><br><span class="line">        if ($(&apos;.article-title&apos;).length == 1)</span><br><span class="line">           addCount(Counter);</span><br><span class="line">        var query=new AV.Query(Counter);</span><br><span class="line">        query.descending(&quot;time&quot;);</span><br><span class="line">        // the sum of popular posts</span><br><span class="line">        query.limit(10); </span><br><span class="line">        query.find(&#123;</span><br><span class="line">            success: function(results)&#123;</span><br><span class="line">                    for(var i=0;i&lt;results.length;i++)    </span><br><span class="line">                    &#123;</span><br><span class="line">                        var counter=results[i];</span><br><span class="line">                        title=counter.get(&quot;title&quot;);</span><br><span class="line">                        url=counter.get(&quot;url&quot;);</span><br><span class="line">                        time=counter.get(&quot;time&quot;);</span><br><span class="line">                        // add to the popularlist widget</span><br><span class="line">                        showcontent=title+&quot;：浏览&quot;+time+&quot;次&quot;;</span><br><span class="line">                        //notice the &quot;&quot; in href</span><br><span class="line">                        $(&apos;.popularlist&apos;).append(&apos;&lt;li&gt;&lt;a style=&quot;display:block;font-weight:bold;color:#FFFFFF;background-color:#8E8E8E;width:100%;text-align:center;padding:4px;text-decoration:none;text-transform:uppercase;&quot; href=&quot;&apos;+url+&apos;&quot;&gt;&apos;+showcontent+&apos;&lt;/a&gt;&lt;/li&gt;&apos;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            error: function(error)&#123;</span><br><span class="line">                alert(&quot;Error:&quot;+error.code+&quot; &quot;+error.message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h4><p>学了前端之后理解这些不难，无非就是把不同的板块分开处理，找到链接每处ejs的代表含义就没问题</p><p>通过这个的学习，我给博客加了音乐，从网易云引入的到博客框架的，也把访问量<del>替代了我的自拍</del>放在info上，就是 不太好看，我需要个设计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;fuck&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;gaster&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">window.onload=function() &#123;</span><br><span class="line">    var gaster = document.createElement(&quot;div&quot;);</span><br><span class="line">    var body = document.getElementsByTagName(&quot;body&quot;)[0];</span><br><span class="line">    body.appendChild(gaster);</span><br><span class="line">    // var gaster = document.getElementById(&quot;gaster&quot;);</span><br><span class="line">    gaster.innerHTML=&quot;&lt;img src=&apos;/img/content/gaster2.png&apos; style=&apos;width:100%;position:fixed;&apos;/&gt;&quot;;</span><br><span class="line">    gaster.setAttribute(&apos;style&apos;, &apos;z-index:99; position: absolute; left: 0; top: 0;width:100%;height:100%;display: none;&apos;);</span><br><span class="line">    document.getElementById(&quot;fuck&quot;).innerHTML=&apos;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=0 height=0 src=&quot;//music.163.com/outchain/player?type=2&amp;id=481037898&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;&apos;;</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">var time;</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line"></span><br><span class="line">  time = setInterval(function() &#123;</span><br><span class="line">    count ++;</span><br><span class="line">    if(gaster.style.display === &quot;none&quot;)&#123;</span><br><span class="line"></span><br><span class="line">    gaster.style.display = &quot;block&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      gaster.style.display = &quot;none&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    if(count === 15) &#123;</span><br><span class="line">      gaster.style.display = &quot;none&quot;;</span><br><span class="line">      clearInterval(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,97);</span><br><span class="line"></span><br><span class="line">&#125;,11820 );</span><br><span class="line">&#125;</span><br><span class="line">    // setTimeout(document.getElementsByTagName(&quot;body&quot;)[0].innerHTML+=&apos;&apos; ,5000)</span><br><span class="line">    // setTimeout(function()&#123;document.getElementsByTagName(&quot;body&quot;)[0].style.display = &quot;none&quot;&#125;,16000);</span><br><span class="line">    // setTimeout(function()&#123;document.getElementsByTagName(&quot;body&quot;)[0].style.display = &quot;none&quot;&#125;,8000);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="JS中变量作用域和内存问题"><a href="#JS中变量作用域和内存问题" class="headerlink" title="JS中变量作用域和内存问题"></a>JS中变量作用域和内存问题</h3><p>时间不多了我简单写</p><p>用一个变量赋值另一个变量，如果是基本类型，是非引用的，两者无关</p><p>而如果是引用类型，比如对象，是公用同一储存空间的，可以理解为指针</p><p>我相信我的表达能力和你的理解能力和一段时间后的我的理解能力，所以不写例子了</p><hr><p>在函数中，对象是按值传递的，不是按参数传递的</p><p>所以参数的值不会影响，可以理解为局部变量</p><hr><h4 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h4><p>typeof === string/number/boolean/undefined/object</p><p>但如果我们想知道它是什么类型的对象，用instanceof</p><p>(person instanceof Object/Array/RegExp) === true/false</p><p>按规定，所有引用类型的值都是Object的实例</p><hr><h4 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h4><p>每个函数都有一个执行环境，每个执行环境都有一个变量对象，变量对象我们无法访问，全局执行环境是最外层的环境</p><p>执行流进入一个函数时，函数的环境会被推入一个环境栈，执行完函数后弹出</p><p>作用域链，最顶层是window，包含关系从上到下，搜索变量时从下往上</p><p>每个环境都有一个活动对象，如果这个环境是函数，那么活动对象最开始只包括一个：arguments对象</p><hr><h5 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h5><p>try-catch中的catch快</p><p>with语句</p><p>这俩都会在作用域链的前端加一个变量对象，对with来说，会将该对象加到作用域链中，对catch来说，会创建一个新的变量对象，其中包含它抛出的错误和说明</p><hr><h5 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h5><p>它不是按{}分域的，所以说</p><pre><code>if(true) {var color = &quot;blue&quot;;}alert(color);</code></pre><p>是会弹出blue的</p><p>它是按函数分域的</p><p>也就是环境</p><p>注意，如果在函数里用var声明，那么函数外面无法访问，但是如果函数里面不用var，直接声明，那么它会当做全局变量处理，外面可以访问，不要这样做，会出错，最好在最外面预先声明</p><hr><h4 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h4><p>JS会自己清内存</p><p>两种</p><p>标记清除，所有变量对象都先被标记，进入环境就取消标记，退出就添加标记，定期清理有标记的</p><p>引用计数，每次被引用时计数加一，但不好用，因为可能有循环引用，导致永远不会清除</p><p>只要在IE中涉及到COM，就会导致循环引用</p><h5 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h5><p>IE被骂的原因之一是它的垃圾收集器一旦超过256个变量或4096个对象或64KB字符串，就会调用，但很多网页的量一直比这个多，结果垃圾清理器反复调用还清不了多少东西，卡的要死</p><p>后来IE7改了，分配给垃圾清理器的内存少的话就提高上限，内存多就反过来，好多了</p><h5 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h5><p>为了确保性能，可以解引用</p><p>就是让一个对象=null</p><p>它不能直接回收内存，只能把它脱离环境，促使它被定期的垃圾收集器处理掉</p><hr><p>如果看到这里，那多半是已经看到那张图了，这是玩具熊的午夜后宫的小丑，4里的，玩了这么久，基本所有跳杀都很难吓到我，除了这个，它只是很简单的把一张图放在这，没有动画，没有音效，也没有像微笑狗那样夸张的色彩，仍然可以把我吓的亲妈不认，不知道有没有吓到你</p><hr><script>window.onload=function() {    var gaster = document.createElement("div");    var body = document.getElementsByTagName("body")[0];    body.appendChild(gaster);    // var gaster = document.getElementById("gaster");    gaster.innerHTML="<img src='/img/content/tiaosha2.png' style='width:100%;height:100%; position:fixed;'/>";    gaster.setAttribute('style', 'z-index:99; position: absolute; left: 0; top: 0;width:100%;height:100%;display: none;');var time;setTimeout(function() { gaster.style.display = "block";},3820 );setTimeout(function() { gaster.style.display = "none";},20820 );}</script>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天听了一首非常好听的歌 很开心 以及JSON,ajax和comet详解</title>
      <link href="/2018/04/16/ajax%E5%92%8Ccomet%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/04/16/ajax%E5%92%8Ccomet%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>这篇文章的类型和其他的文章不一样，因为其他虽然也有技术类内容，但是要么是自己写的实例源码，要么是从网上边理解边用自己的语言写的，学到哪写到哪</p><p>这一篇是有针对性的，完全是ajax和comet的内容，而且不会停留在入门阶段，所以把它归在技术类用于区分</p><p>但是开始之前，照例是一段无聊的流水账</p><p>早晨早操，印象里起的很早，六点不到就醒了，半天不响音乐以为不上早操</p><p>吃完饭，七点半多，一二节没课，抹点东西直接去了教室，一直在看从宿舍书库拿的JavaScript高级程序设计，这算是第一次抛弃网上教程抛弃网课，从一本书中认真学东西</p><p>之后算法，什么他妈狗屁玩意</p><p>中午吃饭去修了修鞋取了快递睡会觉下午数字信号处理学，蒙了</p><p>这本书内容和我想的不一样，我以为是些硬件概念内容，结果发现它更像离散和高数的结合体</p><p>老师还不错，只是那个女老师让我一开始以为是个披着长发的男老师</p><p>上完课照例和他去健身</p><p>健身房里不出意外的碰见了他在练肩</p><p>还有他在单车房骑车，没骑了一会不见踪影，怕不是把动感单车骑回寝室了</p><p>还碰到了他，他今天总算不能嘲讽我穿的不像来健身的了，毕竟我穿了小背♂心</p><p>他不洗澡所以先走了，他来的晚所以还在练，我和他洗完澡后和他吃饭，回寝室</p><p>洗了衣服赶紧去图书馆</p><p>最大的体验是，看书学效率极高</p><p>那首好听的歌叫Gypsy Bard，先听的<img src="http://music.163.com/song/412911346/?userid=335409905" alt="翻唱版本"></p><p>后听的!(原版)(<a href="http://music.163.com/song/410628699/?userid=335409905" target="_blank" rel="noopener">http://music.163.com/song/410628699/?userid=335409905</a>)</p><p>旋律调皮，歌词也很招人喜欢</p><p>网易云虽然5.0更新后傻逼了点把短视频优先级挑的比歌还高，但是算法仍然得人心</p><p>顺便一提，我可没允许它升级到5.0过，它怎么就自己升级了，这是在践踏用户权限，操它妈的</p><hr><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>JavaScript Object Notation，JS对象表示法，简称JSON，这是<strong>圈内人</strong>的说法，外行的傻逼们不懂</p><p>它可以表示以下三种类型的值</p><ol><li>简单值，<strong>不支持undefined</strong></li><li>对象</li><li>数组</li></ol><p>既然要写的深些，这些基础的自然不用多说</p><p>需要注意的点:</p><ol><li>JSON必须使用双引号</li><li>没有声明</li><li>没有分号</li></ol><p>JSON之所以流行，重要原因是jSON数据结构解析为JS对象的复杂度，比XML解析成DOM文档而从中提取数据简单多得多</p><pre><code>//JSONbooks[2].title//XMLdocument.getElementsByTagName(&quot;book&quot;)[2].getAttribute(&quot;title&quot;)</code></pre><p>JSON就成了Web服务开发中交换数据的事实标准</p><hr><h4 id="Stringify-parse"><a href="#Stringify-parse" class="headerlink" title="Stringify/parse"></a>Stringify/parse</h4><pre><code>var jsonText = JSON.stringify(book);</code></pre><p>JSON.stringify()把一个JS对象序列化生成一个JSON字符串，<strong>不包含任何空格和缩进</strong></p><ul><li><p>过滤结果</p><ol><li>将第二个参数设置为想要得到的属性(key)即可，可以是数组</li><li>如果第二个参数是函数，需要注意如果返回undefined，则会删除该属性和值</li><li>第三个参数用于缩进，如果有第三个参数，默认会断行，也可以设置为任意字符串来替代空格，长度最大不超过10</li><li>如果还不能满足，可以使用toJSON，toJSON设置为JSON对象的内的一个子对象</li><li><p>序列化的顺序是，toJSON=&gt;第二个参数=&gt;第三个参数</p><p>function(key, value) {<br> if(key === “auther”)<br>   return value.join(“,”);<br> else if (key === “money”)<br>   return undefined;<br> else<br>   return value;<br> }</p><p>JSON.stringify(book, null, 4)<br>JSON.stringify(book, null, “–”)</p><p>{toJSON: function() {return this.title;}}</p></li></ol></li></ul><p>FireFox 3.5/3.6第二个参数如果设置为函数有bug，4.0被修复</p><hr><p>将jSON字符串直接传递给JSON.parse()就可以得到相应的JS值</p><p>第二个参数的效果和stringify一样</p><pre><code>var bookCopy = JSON.parse(jsonText);</code></pre><hr><h3 id="Ajax与Comet"><a href="#Ajax与Comet" class="headerlink" title="Ajax与Comet"></a>Ajax与Comet</h3><hr><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>IE7之前是没有XHR的，只能用</p><pre><code>typeof ActiveXString != &quot;undefined&quot;</code></pre><p>来检测</p><p>IE7有自己的个性，ActiveXString的创建方式不是重点，<del>毕竟IE没人用</del></p><hr><p>要发送特定请求，一个是open，一个是send</p><pre><code>open(&quot;get&quot;, &quot;example.php&quot;, false);send(null);</code></pre><p>open的第三个参数是是否异步</p><p>如果没有要传入服务器的数据，send必须是null，因为这个参数对某些浏览器是必须的</p><p>收到响应后，数据会自动填充xhr对象的属性</p><ol><li>responseText 响应主体返回的文本</li><li>responseXML 保存相应数据的XML DOM文档，对非XML数据来说，是null</li><li>status HTTP状态，200代表成功，304表示请求的资源没有更改，可以直接用缓存，一般是如果&gt;=200且&lt;300或==304，则判断有效</li><li>statusText HTTP状态的说明</li></ol><p>建议使用status来判断，而不是statusText，因为后者在跨浏览器中不可靠</p><hr><ul><li><p>readyState</p><ol><li>0 未初始化 代表未调用open()</li><li>1 启动 调用open，但未调用send</li><li>2 发送 send了，但没响应</li><li>3 接收 接收到部分</li><li>4 完成 全部响应</li></ol></li><li><p>readystatechange事件，看名字就知道是干啥的，每当readyState改变就触发onreadystatechange</p></li></ul><p>用的是DOM0级，因为并非所有浏览器都是支持DOM2级</p><p>没用this，因为作用域问题，如果用this，会导致执行失败</p><hr><p>取消异步</p><pre><code>xhr.abort()</code></pre><h4 id="HTTP头部"><a href="#HTTP头部" class="headerlink" title="HTTP头部"></a>HTTP头部</h4><p>一堆常见的不再列举了</p><p>值得一提的是Referer属性，HTTP规范把它拼错了，正确的是referrer，我们只能将错就错了</p><p>必须在open后send前调用xhr.setRequestHeader(“myHeader”, “MyValue”)</p><p>服务器端响应的头部信息通过xhr.getResponseHeader(“myHeader”)/xhr.getAllResponseHeaders()接收</p><p>一般用all</p><hr><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>最常见，可以将查询的字符集追加到URL末尾，如果要追加，必须正确的编码</p><p>可以通过一个函数编写url</p><pre><code>function addURLParam(url, name, value) {  url+=(url.indexOf(&quot;?&quot;) === -1 ? &quot;?&quot; : &quot;&amp;&quot;);  url+=encodeURLComponent(name)+&quot;=&quot;+encodeURLComponent(value);  return url;}</code></pre><hr><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>将数据作为请求的主体提交，可以包含极多数据，格式不受限制，默认情况下服务器对POST和Web表单不会一视同仁，所以必须有程序来处理POST，不过我们也可以用XHR模仿表单提交，需要将Content-Type头部信息设置</p><p>如果需要序列化，用serialize()</p><pre><code>var form = document.getElementById(&quot;user-info&quot;);xhr.send(serialize(form));</code></pre><hr><h4 id="XHR-2级"><a href="#XHR-2级" class="headerlink" title="XHR 2级"></a>XHR 2级</h4><ul><li><p>FormData，也是使用键值对来表示表单信息，可以用form初始化，用FormData的好处是不用设置请求头部</p><p>  var form = document.getElementById(“user-info”);<br>  xhr.send(new FormData(form));</p></li><li><p>timeout，超时设定，open后send前</p><p>  xhr.timeout = 1000;<br>  xhr.ontimeout = function() {alert(“♂”);}</p></li><li><p>overrideMimeType，重写返回响应的MIME类型</p><p>  xhr.overrideMimeType(“text/xml”);</p></li></ul><h4 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h4><p>有6个进度事件</p><p>loadstart/progress/error/abort/load/loadend</p><p>progress接收响应间不间断触发，345总要触发一个，触发后触发6</p><ul><li><p>load 有了onload，就不用onreadystatechange了，具体用法一样</p></li><li><p>progress 接受一个event，target是XHR对象，三个属性，lengthComputable/position/totalSize，第一个是进度信息是否可用，第二个是当前加载字节，第三个是总字节，可以用来做进度条，<strong>这个必须在open之前</strong>，如果响应头部包含Content-Length，可以用来计算从响应中已经接受到的数据的百分比（即必须有这个头部，才能使用第三个属性）</p></li></ul><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><p>CORS，跨域源资源共享</p><p>Ajax的主要限制在于跨域安全策略，什么是CORS，谷歌上都有我就不搬了</p><p>IE对CORS的实现：XDR类型，与XHR相似，但能实现安全可靠的跨域通信</p><p>其他浏览器：</p><p>将open的第二个参数设置为绝对URL即可，贤之士不能用setRequestHeader()自定义头部，不能发送接收Cookie，getAllResponseHeaders()总会返回空字符串</p><h4 id="用Preflighted-Requests的透明服务器验证机制自定义头部，方法，以及不同类型主题内容"><a href="#用Preflighted-Requests的透明服务器验证机制自定义头部，方法，以及不同类型主题内容" class="headerlink" title="用Preflighted Requests的透明服务器验证机制自定义头部，方法，以及不同类型主题内容"></a>用Preflighted Requests的透明服务器验证机制自定义头部，方法，以及不同类型主题内容</h4><p>内容以后补充</p><h4 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h4><p>将withCredentials设置为true即可</p><h4 id="跨浏览器的CORS"><a href="#跨浏览器的CORS" class="headerlink" title="跨浏览器的CORS"></a>跨浏览器的CORS</h4><p>检测是否有withCredentials和XDomainRequest是否存在即可兼顾所有浏览器</p><hr><h3 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h3><p>图像Ping，藏在img里，最常用于点击页面或广告的曝光次数</p><p>JSONP，通过动态的script标签，标签的.src设置成url加一个回调函数来跨域</p><p>Comet，指更高级的Ajax，也叫服务器推送，近乎实时的推送</p><p>两种，长轮询和流（短轮询）</p><p>短的是定时请求，响应</p><p>长的是请求后，一直等到有数据可发送才响应，响应后立刻再次发送请求</p><p>可以检测readyStatus是否变成3，来实现</p><hr><h3 id="服务器发送事件"><a href="#服务器发送事件" class="headerlink" title="服务器发送事件"></a>服务器发送事件</h3><p>围绕Comet的SSE</p><p>Web Sockes</p><p>他们的安全性</p><p>因为图书馆马上关门了，所以最后写的很简单，点到为止，以后有时间再重新填上这个坑</p><p>这么看起来，今天学的东西还真不少，牛逼</p><p>Gypsy Bard 是 小马宝莉 里的音乐</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ajax </tag>
            
            <tag> json </tag>
            
            <tag> comet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天过得很开心 很开心</title>
      <link href="/2018/04/15/%E4%BB%8A%E5%A4%A9%E8%BF%87%E5%BE%97%E5%BE%88%E5%BC%80%E5%BF%83-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/15/%E4%BB%8A%E5%A4%A9%E8%BF%87%E5%BE%97%E5%BE%88%E5%BC%80%E5%BF%83-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨起床吃饭去图书馆，没学啥东西，就做了做游戏，时间过得可真快</p><p>关于缩放问题学习了很久</p><p>中午吃了饭，看了会上铺的JS高级程序设计，主要想看看面试常考的点，比如Cookie/localstorge</p><p>两点和他见面去汉街去了个挺雅致的书店和杜莎夫人蜡像馆回光谷吃火锅翘掉了团队的技术交流会去看电影回来就十点了从他身上学到不少</p><p>聊了很多感性的问题，触及了很多过去的事</p><p>因为比较累了所以不展开说了</p><p>本来以为还剩下不少钱，后来想起来全班的马原的书费还在我手里</p><p>我好像穷的不允许任何额外花销了，健身和护肤都好烧钱</p><p>抽了3根</p><hr><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>scale真是个傻逼的函数，canvas没有很好的还原功能，save和restore只能触发最近的保存点，那么放大缩小就极其难受</p><p>每帧放大/缩小1.05倍，再加上水平位移14.5和垂直位移22，达到比较好的视觉效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 缩放</span><br><span class="line">        if (blocks[k][m] === 21) &#123;</span><br><span class="line">          if (!player.big &amp;&amp; (player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 3) * blockWidth)) &#123;</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">              context.translate(-14.5, -22);</span><br><span class="line">              // context.translate(player.x,player.y);</span><br><span class="line">              player.scaleCount += 1;</span><br><span class="line">              context.scale(1.05, 1.05);</span><br><span class="line">              if (player.scaleCount === 15)&#123;</span><br><span class="line">                player.big = true;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (blocks[k][m] === 22) &#123;</span><br><span class="line">          if (player.big &amp;&amp; (player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 3) * blockWidth)) &#123;</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">              context.translate(14.5, 22);</span><br><span class="line">              player.scaleCount -= 1;</span><br><span class="line">              context.scale(0.952381, 0.952381);</span><br><span class="line">              if (player.scaleCount === 0)&#123;</span><br><span class="line">                player.big = false;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>而重置游戏如何使画布还原到原来的大小呢，我的最终方案是，为了减少计算量，直接删除canvas元素，之后重置它，获得一个全新的context</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">player.scaleCount=0;</span><br><span class="line">    $(&apos;#gameCanvas&apos;).remove();</span><br><span class="line">    $(&apos;#gameDiv&apos;).append(&apos;&lt;canvas id=&quot;gameCanvas&quot; width=&quot;980px&quot; height=&quot;490px&quot;&gt;&lt;/canvas&gt;&apos;);</span><br><span class="line"></span><br><span class="line">    player.scaleCount = 0;</span><br><span class="line">    player.big = false;</span><br><span class="line">    startGame();</span><br><span class="line">    resetFlag = true;</span><br></pre></td></tr></table></figure><p>增加了变换函数，在特定点可以变成指定模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if (blocks[k][m] === 11) &#123;</span><br><span class="line">  if ((player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth)) &#123;</span><br><span class="line">    player.shapeFlag = 1;</span><br><span class="line">    player.squareJump = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (blocks[k][m] === 12) &#123;</span><br><span class="line">  if ((player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth)) &#123;</span><br><span class="line">    player.shapeFlag = 2;</span><br><span class="line">    player.circleIsJump = true;</span><br><span class="line">    player.circleJump = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (blocks[k][m] === 13) &#123;</span><br><span class="line">  if ((player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth)) &#123;</span><br><span class="line">    player.shapeFlag = 3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (blocks[k][m] === 14) &#123;</span><br><span class="line">  if ((player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth)) &#123;</span><br><span class="line">    player.shapeFlag = 4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减少了线条数组容量，减少了曲线的点和线条的宽度，增加了曲线的曲率和加速度，增加了方块的加速度，现在方块和圆处于同一个重力模型下，可以更好的适配，减少了方块的初速度</p><p>这就是上午三个小时的成果了，感觉逻辑思维获得明显锻炼，实际的实现触碰到许多问题，被实时想出方案就觉，但是编程基础没有多少提升，Canvas终究只是一个小版块，Vue学习的第一个阶段已经完成，算是入门了，越来越感受到基础JS的重要性，最近应该把精力集中在算法和原生JS的<strong>进阶</strong>内容上</p>]]></content>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天引体向上做了9个 很开心</title>
      <link href="/2018/04/14/%E4%BB%8A%E5%A4%A9%E5%BC%95%E4%BD%93%E5%90%91%E4%B8%8A%E5%81%9A%E4%BA%869%E4%B8%AA-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/14/%E4%BB%8A%E5%A4%A9%E5%BC%95%E4%BD%93%E5%90%91%E4%B8%8A%E5%81%9A%E4%BA%869%E4%B8%AA-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>先说一下，这个小键盘是真他妈难用，用着它感觉我白敲了一年代码，白玩了十年游戏，键盘的布局颠覆我的想象，好像这双手已经不属于我了</p><p>鼠标还行，但是图书馆的桌子很难用</p><p>想过退了键盘再买个大点的正常点的，但是敲了几个小时发现也没那么难用，我只需要适应，<strong>习惯</strong>真是个可怕的东西</p><p>电脑支架很棒，再也不用从图书馆一楼抱一摞地质勘察学杂志垫着电脑了</p><p>早晨没早操但有运动会，靠室友起床，和室友一起起床，结果室友都走了我还在抹东西，他来了，问我怎么还不走，我说现在几点，他说七点二十五，我问要求几点集合，他说七点二十</p><p><img src="/img/content/yundonghui.jpg" alt="运动会的图"></p><p>结果赶下去发现还是在操场上干等着，等到八点</p><p>过程不记得了，只记得冷的我蹦蹦跳跳的</p><p>开幕式完了去图书馆，继续完成前天的Bootstrap+Vue的todolist，其实很简单了</p><p>中途去体侧，做了</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>个引体向上，上次是0个，没白健身</p><p>之后回图书馆，六点多的时候他叫我明天出去玩，被临幸有点受宠若惊，我说去杜莎夫人蜡像馆，他说行，回寝室，吃饭，睡觉，图书馆，吃饭，和另一个他去健身房</p><p>把<strong>我喜欢的梗</strong>移到了最后，因为内容过于低俗，不便展示</p><p>更新了游戏更新日志</p><p>看完了七月与安生，回头写下读后感</p><hr><h3 id="原生JS基础"><a href="#原生JS基础" class="headerlink" title="原生JS基础"></a>原生JS基础</h3><p>下午在图书馆先看了一个小时从点石办公室借的JS&amp;jQuery基础，起因是这几天刷了刷牛客的前端面经，发现计算机通用基础知识和前端基础考的很多，尤其是让你写个API啥的，所以重新巩固下基础，当时是边用边学所以不太熟，重新再看一遍</p><h4 id="对象-节点-元素"><a href="#对象-节点-元素" class="headerlink" title="对象/节点/元素"></a>对象/节点/元素</h4><p><strong>不保证完全是对的，因为是背着书默写的</strong></p><ul><li><p>DOM有4种节点，每个节点都是一个对象，元素是其中一种节点</p><ol><li>元素节点 是个人都知道</li></ol><ul><li>访问元素，一切getElementBy开头的速度比querySelector快，且querySelector(All)仅在09年以后的浏览器版本可以使用，照顾照顾IE，注意版本兼容，这也是jQuery盛行的原因之一。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 选单个节点</span><br><span class="line">getElementById(&apos;id&apos;)</span><br><span class="line">querySelector(&quot;css selector&quot;)</span><br><span class="line"></span><br><span class="line">// 选多个</span><br><span class="line">getElementByTag</span><br><span class="line">getElementByClass</span><br><span class="line">querySelectorAll</span><br><span class="line"></span><br><span class="line">// 插入节点，一种是直接通过HTML操作</span><br><span class="line">innerHTML()</span><br><span class="line">doucument.write() //极其傻逼的方法，没人用</span><br><span class="line"></span><br><span class="line">// 一种是通过DOM操作</span><br><span class="line">createElement(tag)</span><br><span class="line">appendChild</span><br><span class="line">removeChild</span><br><span class="line"></span><br><span class="line">// 移除元素的具体实现</span><br><span class="line">var removeEl = document.getElementById(&apos;caonima&apos;);</span><br><span class="line">var parent = removeEl.parentNode;</span><br><span class="line">parent.removeChild(removeEl);</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>文本节点 一定是一个叶子节点，textContent和innerText都可以获取当前元素节点的文本节点，但是innerText会忽略掉被CSS隐藏的文本，且由于要通过布局判断，所以速度比textContent慢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取和更新</span><br><span class="line">nodeValue //需要选中文本节点（通过.nextSubling）</span><br><span class="line">// 需要选中元素节点</span><br><span class="line">textContent</span><br><span class="line">innerText</span><br><span class="line"></span><br><span class="line">// 插入</span><br><span class="line">createTextCode</span><br></pre></td></tr></table></figure></li><li><p>属性节点 属性节点不是所在元素的子节点，而是所在元素的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasAttribute</span><br><span class="line">getAttribute</span><br><span class="line">setAttribute</span><br><span class="line">removeAttribute</span><br></pre></td></tr></table></figure></li><li><p>文档节点 指DOM树最顶端的节点，document</p></li></ol></li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>要注意，innerHTML虽然比DOM方法快而且代码量少，但是极其不安全</p><p>它很容易遭受XSS攻击</p><blockquote><p>跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p></blockquote><p>总结一下</p><ol><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。</li><li>诱使受害者打开受到攻击的服务器URL。</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ol><p>XSS的攻击方式</p><ol><li>发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS随响应内容一起返回给浏览器，最后浏览器解析执行XSS代码，这个过程就像一次发射，所以叫反射型XSS。</li><li>存储型: 存储型XSS和反射型的XSS差别就在于，存储型的XSS提交的代码会存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。</li></ol><h4 id="XSS的防御措施"><a href="#XSS的防御措施" class="headerlink" title="XSS的防御措施"></a>XSS的防御措施</h4><ol><li>编码：对用户输入的数据进行HTML Entity编码</li><li>提交表单时审查用户提交的表单，不允许带有尖括号，$等内容</li><li>到服务端还要二次审查，因为黑客可能通过关闭浏览器的JS而绕过第一次检查</li><li>在数据库中不需要过多防御，因为数据库只是存储，没有使用</li><li>将内容呈现在网页上时，要转义成纯文本格式，不允许标签被正常处理</li></ol><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>因为涉及到的双大括号太多，转义得麻烦死，所以我直接把下面所有内容设置成代码块了</p><p>这里就点到为止，毕竟官网上啥都有，要看直接从文档看，这篇博客只是提醒我有这么个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;msg&#125;&#125; 数据更新模板变化</span><br><span class="line"></span><br><span class="line">&#123;&#123;*msg&#125;&#125; 数据值绑定一次</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#123;msg&#125;&#125;&#125; HTML转义</span><br><span class="line"></span><br><span class="line">过滤器</span><br><span class="line"></span><br><span class="line">过滤模板数据，系统提供的过滤器</span><br><span class="line"></span><br><span class="line">&#123;&#123;msg|filterA&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;msg|filterB|filterB&#125;&#125;</span><br><span class="line"></span><br><span class="line">capitalize 首字母大写</span><br><span class="line"></span><br><span class="line">lowercase 全小写 uppercase 全大写</span><br><span class="line"></span><br><span class="line">currency 前面加$，currency:&apos;rmb&apos;，传参，改</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">交互:</span><br><span class="line"></span><br><span class="line">  $http(ajax)</span><br><span class="line"></span><br><span class="line">  vue本身不能交互</span><br><span class="line"></span><br><span class="line">  引入vue-resouce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  this.$http.get(&apos;a.txt&apos;).then(function(res) &#123;</span><br><span class="line">  alert(res.data);</span><br><span class="line">  &#125;, function(res) &#123;  // error</span><br><span class="line">  alert(res.data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><hr><h4 id="todolist"><a href="#todolist" class="headerlink" title="todolist"></a>todolist</h4><p>加了删除的实现，另外，网课的老师留了作业，要求在点击删除全部时，提示框也改为删除全部，我加了个v-show的span，加了个deleteAll的判断属性，后来发现没必要，我只需要在v-show设置成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delIndex === -2</span><br></pre></td></tr></table></figure></p><p>就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;todoList&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot; integrity=&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.onload=function() &#123;</span><br><span class="line">      new Vue(&#123;</span><br><span class="line">        el: &apos;#box&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        myData : [],</span><br><span class="line">          username: &quot;&quot;,</span><br><span class="line">          age: &quot;&quot;,</span><br><span class="line">          delIndex: -1,</span><br><span class="line">          delAll: false</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          add: function() &#123;</span><br><span class="line">            this.myData.push(&#123;name: this.username, age: this.age&#125;);</span><br><span class="line">            this.username=&quot;&quot;;</span><br><span class="line">            this.age=&quot;&quot;;</span><br><span class="line">          &#125;,</span><br><span class="line">          del: function() &#123;</span><br><span class="line">            if(this.delIndex===-1)&#123;</span><br><span class="line">             this.myData.splice(this.delIndex, 1);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">              this.myData.splice(0, this.myData.length);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot; id=&quot;box&quot;&gt;</span><br><span class="line">    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;username&quot; v-model=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;输入用户名&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div id=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;age&quot; class=&quot;form-control&quot; v-model=&quot;age&quot; placeholder=&quot;输入年龄&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/br&gt;</span><br><span class="line">      &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;添加&quot; v-on:click=&quot;add()&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;reset&quot; value=重置 class=&quot;btn btn-danger&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;table class=&quot;table table-bordered table-hover&quot;&gt;</span><br><span class="line">      &lt;caption class=&quot;h2 text-info text-center&quot;&gt;用户信息表&lt;/caption&gt;</span><br><span class="line">      &lt;tr class=&quot;text-info&quot;&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;名字&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;操作&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr class=&quot;text-center&quot; v-for=&quot;(item, index) in myData&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary btn-sm&quot; data-toggle=&quot;modal&quot; data-target=&quot;#layer&quot; v-on:click=&quot;delIndex=index&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">   &lt;!--    &lt;tr class=&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;strive&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;16&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary btn-sm&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt; --&gt;</span><br><span class="line">      &lt;tr v-show=&quot;myData.length != 0&quot;&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot; class=&quot;text-right&quot;&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-danger btn-sm&quot; data-toggle=&quot;modal&quot; data-target=&quot;#layer&quot; v-on:click=&quot;delIndex = -2&quot;&gt;删除全部&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-show=&quot;myData.lengyh == 0&quot;&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot; class=&quot;text-center text-muted&quot;&gt;</span><br><span class="line">          &lt;p&gt;暂无数据&lt;/p&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 模态框 弹出框 --&gt;</span><br><span class="line">    &lt;div role=&quot;dialog&quot; class=&quot;modal fade&quot; id=&quot;layer&quot; &gt;</span><br><span class="line">      &lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;bustton&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">            &lt;h4 class=&quot;modal-title&quot;&gt;确认删除&lt;span v-show=&apos;delIndex === -2&apos;&gt;全部&lt;/span&gt;吗&lt;/h4&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;modal-body text-right&quot;&gt;</span><br><span class="line">            &lt;button class= &quot;btn btn-primary btn-sm&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">            &lt;button class= &quot;btn btn-danger btn-sm&quot; v-on:click=&quot;del()&quot; data-dismiss=&quot;modal&quot;&gt;确认&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天在健身房认识了个学长 很开心</title>
      <link href="/2018/04/13/%E4%BB%8A%E5%A4%A9%E5%9C%A8%E5%81%A5%E8%BA%AB%E6%88%BF%E8%AE%A4%E8%AF%86%E4%BA%86%E4%B8%AA%E5%AD%A6%E9%95%BF-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/13/%E4%BB%8A%E5%A4%A9%E5%9C%A8%E5%81%A5%E8%BA%AB%E6%88%BF%E8%AE%A4%E8%AF%86%E4%BA%86%E4%B8%AA%E5%AD%A6%E9%95%BF-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨没早操但还是习惯性早起，背单词应付英语课听写，结果没听写，我就是想加次分怎么这么难</p><p>算法，讲的界限分支法，其实可以理解为广度优先遍历的回溯算法，听得前所未有的认真，发现算法其实也不是那么难，只要不手写代码</p><p>中午睡一觉，睡过了，用了点奇技淫巧，非常的刺激</p><p>取了新键盘，鼠标，和电脑支架，</p><p>本来是为了颈椎买了支架，有支架那就得有键盘，看上了个极简的超小键盘，可以对折，小的我一张手可以该上，买了键盘那就得买配套鼠标，不能再用那个狗屁九块八包邮的粉红色鼠标了，买了个配套白色极简鼠标</p><p>苹果电脑加这一套，逼格真的高，图书馆已经配不上我这一套风格了，起码得是星巴克，或者是什么开发者交流会</p><p>取完快递和他去健身，他在练胸，在健身房又碰到了他，他又吐槽我为什么健身穿的这么不专业，我健身穿什么凭缘分，有时穿背心大裤衩，有时穿的跟逛街一样</p><p>在单车房和一个陌生的学长聊了聊，他 很 高，也很精致，<del>不论是精致的水平还是身高，都差一点就赶上我了</del>一起去学三吃了饭，感觉吃的不够多，一会回去再吃点</p><p>苹果电脑加这一套，逼格真的高，图书馆已经配不上我这一套风格了，起码得是星巴克，或者是什么开发者交流会</p><p>晚上去Dcreator敲代码，人不多，除了我还有一对情侣玩游戏，这一对走了以后又来了下一对</p><hr><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>骚操作整的太多，昨天博客崩了，研究了报错信息，发现是主题文件的事，重装了主题后把配置文件复制过来，依然出错，将主题的配置文件换成默认模板，错误消失，于是重新填写了配置文件，没问题了</p><p>唯一问题是用hexo clean时只把canvas案例备份了，图片不小心全给删了，还好我机智，没有hexo d，从GitHub上把图片重新下回来</p><p>下的很慢，开shadowsocks，发现ss欠费了</p><p>时间过得可真快，这个学期已经过了三分之一了</p><p>今天白天的课上课不能用电脑，下课健身了，没什么时间写代码，晚上鼓捣博客废了不少时间，巩固下算法，一道上课讲的软考题，明天把这个算法背着写下来</p><p><img src="/img/content/suanfa1.png" alt="suanfa1"><br><br><br><img src="/img/content/suanfa2.png" alt="suanfa1"><br><br><br><img src="/img/content/suanfa3.png" alt="suanfa1"><br><br><br><img src="/img/content/suanfa4.png" alt="suanfa1"></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天用了BootStrap 很开心</title>
      <link href="/2018/04/12/%E4%BB%8A%E5%A4%A9%E7%94%A8%E4%BA%86BootStrap-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/12/%E4%BB%8A%E5%A4%A9%E7%94%A8%E4%BA%86BootStrap-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>下雨没早操，第一节课是毛概，在激烈的小组讨论中搞懂了Vue中父组件向子组件添加内容的slot的使用</p><p>一开始看官方文档，Vue的文档简直是言简意赅到极限了，一个字都不肯多说，没看太懂，从csdn找了些实例，就像他说的，很多也都是把官方文档复制过来的实例，没办法，从GitHub上找，找到不错的解释和理解</p><p>之后是嵌入式，不理郭明强，学Vue，可以自己写简单的组件嵌套了，写累了做Canvas游戏，添加了刺和弹簧，刺很好做，把碰撞检测位移取消，碰到直接死就行，就是判定范围不好整</p><p>和他吃了饭，中午和他去图书馆，下午去听入职今日头条学长讲就业所注意的事，顺便领了500班级学风建设基金，当然是班费</p><p>开完会回图书馆，学到五点半，和他吃饭，吃完饭去东湖骑，被雨淋，回来去健身房洗澡顺便做了几组</p><p>现在十点多点，得知他和她买到了来武汉的票，很高兴</p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>插槽，也就是slot，是组件的一块HTML模板，这块模板显示不显示、以及怎样显示由父组件来决定。 实际上，一个slot最核心的两个问题这里就点出来了，是显示不显示和怎样显示。</p><blockquote><p>由于插槽是一块模板，所以，对于任何一个组件，从模板种类的角度来分，其实都可以分为非插槽模板和插槽模板两大类。 非插槽模板指的是html模板，指的是div、span、ul、table这些，非插槽模板的显示与隐藏以及怎样显示由插件自身控制；插槽模板是slot，它是一个空壳子，因为它显示与隐藏以及最后用什么样的html模板显示由父组件控制。但是插槽显示的位置确由子组件自身决定，slot写在组件template的哪块，父组件传过来的模板将来就显示在哪块。</p></blockquote><p>首先是单个插槽，单个插槽是vue的官方叫法，但是其实也可以叫它默认插槽，或者与具名插槽相对，我们可以叫它匿名插槽。因为它不用设置name属性。</p><p>单个插槽可以放置在组件的任意位置，但是就像它的名字一样，一个组件中只能有一个该类插槽。相对应的，具名插槽就可以有很多个，只要名字（name属性）不同就可以了。</p><blockquote><p>作用域插槽和单个插槽和具名插槽的区别，因为单个插槽和具名插槽不绑定数据，所以父组件是提供的模板要既包括样式由包括内容的，上面的例子中，你看到的文字，“菜单1”，“菜单2”都是父组件自己提供的内容；而作用域插槽，父组件只需要提供一套样式（在确实用作用域插槽绑定的数据的前提下）。</p></blockquote><p>实现的实例，三种插槽<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">  template: &quot;&lt;div class=&apos;father&apos;&gt;\</span><br><span class="line">  &lt;child&gt;\</span><br><span class="line">  &lt;p slot=&apos;header&apos;&gt;header&lt;/p&gt;\</span><br><span class="line">  &lt;p&gt;插槽&lt;/p&gt;\</span><br><span class="line">  &lt;p slot=&apos;footer&apos;&gt;footer&lt;/p&gt;\</span><br><span class="line">  &lt;/child&gt;\</span><br><span class="line">  \</span><br><span class="line">  &lt;child&gt;\</span><br><span class="line">  &lt;template slot=&apos;zuoyongyu&apos; slot-scope=&apos;user&apos;&gt;\</span><br><span class="line">   &lt;span&gt;&#123;&#123; user.contentdata &#125;&#125;&lt;/span&gt;\</span><br><span class="line">  &lt;/template&gt;\</span><br><span class="line">  &lt;/child&gt;\</span><br><span class="line">  &lt;/div&gt;&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.component(&quot;child&quot;, &#123;</span><br><span class="line">  template: </span><br><span class="line">  &apos;&lt;div&gt;\</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;\</span><br><span class="line">    &lt;slot&gt;\</span><br><span class="line">      \</span><br><span class="line">    &lt;/slot&gt;\</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\</span><br><span class="line">    &lt;slot name=&quot;zuoyongyu&quot; text=&quot;作用域插槽&quot; v-bind:contentdata=&quot;content&quot;&gt;&lt;/slot&gt;\</span><br><span class="line">  &lt;/div&gt;&apos;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      content: &quot;作用域插槽data&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h4 id="BootStrap-Vue-实现的-todolist"><a href="#BootStrap-Vue-实现的-todolist" class="headerlink" title="BootStrap + Vue 实现的 todolist"></a>BootStrap + Vue 实现的 todolist</h4><p><img src="/img/content/todolist.png" alt="todolist"></p><p>刚刚把界面实现，还没涉及到Vue</p><p>不得不说Bootstrap简直把设计层的难度拉低了一个档次，只需要背class，随随便便都能做出好界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;todoList&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot; integrity=&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;输入用户名&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div id=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;age&quot; class=&quot;form-control&quot; placeholder=&quot;输入年龄&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/br&gt;</span><br><span class="line">      &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;添加&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=重置 class=&quot;btn btn-danger&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;table class=&quot;table table-bordered table-hover&quot;&gt;</span><br><span class="line">      &lt;caption class=&quot;h2 text-info text-center&quot;&gt;用户信息表&lt;/caption&gt;</span><br><span class="line">      &lt;tr class=&quot;text-info&quot;&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;名字&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th class=&quot;text-center&quot;&gt;操作&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr class=&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;blue&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;60&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary btn-sm&quot; data-toggle=&quot;modal&quot; data-target=&quot;#layer&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr class=&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;strive&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;16&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary btn-sm&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot; class=&quot;text-right&quot;&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-danger btn-sm&quot;&gt;删除全部&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot; class=&quot;text-center text-muted&quot;&gt;</span><br><span class="line">          &lt;p&gt;暂无数据&lt;/p&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 模态框 弹出框 --&gt;</span><br><span class="line">    &lt;div role=&quot;dialog&quot; class=&quot;modal fade&quot; id=&quot;layer&quot; &gt;</span><br><span class="line">      &lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;bustton&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">            &lt;h4 class=&quot;modal-title&quot;&gt;确认删除吗&lt;/h4&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;modal-body text-right&quot;&gt;</span><br><span class="line">            &lt;button class= &quot;btn btn-primary btn-sm&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">            &lt;button class= &quot;btn btn-danger btn-sm&quot;&gt;确认&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>刺和弹簧，刺有正反，弹簧也有，很简单，弹簧给它个瞬间速度就好</p><p>添加了上方方块的下面碰撞检测，现在玩家飞不到方块里面了</p><p>以后会添加重力转变剩下的模式可以贴着上方的方块走</p><p>除了箭头和方块，以及分身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">if (blocks[k][m] === 2) &#123;</span><br><span class="line"></span><br><span class="line">          context.beginPath();</span><br><span class="line"></span><br><span class="line">          context.moveTo(blockX1 + (m + 0.5) * blockWidth, blockY1 - (k + 1) * blockHeight);</span><br><span class="line">          context.lineTo(blockX1 + m * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line">          context.lineTo(blockX1 + (m + 1) * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line"></span><br><span class="line">          context.closePath();</span><br><span class="line">          context.fillStyle = &quot;red&quot;;</span><br><span class="line">          context.fill();</span><br><span class="line">          context.fillStyle = &quot;white&quot;;</span><br><span class="line">          if ((player.x + player.halfWidth * 0.5 &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth * 0.5 &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;</span><br><span class="line">            ((player.y + player.halfHeight * 0.5 - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight * 0.5 - (blockY1 - k * blockHeight) &lt; -15)) &#123;</span><br><span class="line">            dead();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (blocks[k][m] === 3) &#123;</span><br><span class="line"></span><br><span class="line">          context.beginPath();</span><br><span class="line"></span><br><span class="line">          context.moveTo(blockX1 + (m + 0.5) * blockWidth, blockY1 - k * blockHeight);</span><br><span class="line">          context.lineTo(blockX1 + m * blockWidth, blockY1 - (k+1) * blockHeight);</span><br><span class="line">          context.lineTo(blockX1 + (m + 1) * blockWidth, blockY1 - (k+1) * blockHeight);</span><br><span class="line"></span><br><span class="line">          context.closePath();</span><br><span class="line">          context.fillStyle = &quot;red&quot;;</span><br><span class="line">          context.fill();</span><br><span class="line">          context.fillStyle = &quot;white&quot;;</span><br><span class="line">          if ((player.x + player.halfWidth * 0.5 &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth * 0.5 &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;</span><br><span class="line">            ((player.y + player.halfHeight * 0.5 - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight * 0.5 - (blockY1 - k * blockHeight) &lt; -15)) &#123;</span><br><span class="line">            dead();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (blocks[k][m] === 4) &#123;</span><br><span class="line">          context.fillStyle = &quot;yellow&quot;;</span><br><span class="line">          context.fillRect(blockX1 + (m + 0.2) * blockWidth, blockY1 - (k + 0.3) * blockHeight, 0.6 * blockWidth, 0.3 * blockHeight);</span><br><span class="line">          context.fillStyle = &quot;white&quot;;</span><br><span class="line">          if ((player.x + player.halfWidth * 0.5 &gt;= blockX1 + (m + 0.2) * blockWidth &amp;&amp; player.x - player.halfWidth * 0.5 &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;</span><br><span class="line">            ((player.y + player.halfHeight * 0.5 - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight * 0.5 - (blockY1 - k * blockHeight) &lt; -15)) &#123;</span><br><span class="line">            if (player.shapeFlag !== 4) &#123;</span><br><span class="line">              if (player.shapeFlag === 3)</span><br><span class="line">                player.vY = -7;</span><br><span class="line">              else</span><br><span class="line">                player.vY = -20;</span><br><span class="line">              player.squareJump = true;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天被辅导员训话了 很开心</title>
      <link href="/2018/04/11/%E4%BB%8A%E5%A4%A9%E8%A2%AB%E8%BE%85%E5%AF%BC%E5%91%98%E8%AE%AD%E8%AF%9D%E4%BA%86-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/11/%E4%BB%8A%E5%A4%A9%E8%A2%AB%E8%BE%85%E5%AF%BC%E5%91%98%E8%AE%AD%E8%AF%9D%E4%BA%86-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早操，吃饭，排球课很尽力的打了，我和打篮球的老哥靠体力弥补了技术的不足</p><p>之后听力，我和他一人开了八个浏览器挂听力，服务器连接数过多炸了，不止我们，全炸了，怀疑是我和他开的太多搞的</p><p>中午和他吃了鸡公煲，两个星期前第一次去吃的，今天仍然很好吃，而且人不多</p><p>中午睡觉，下午上测量学，老师划了重点，或者说老师只说那那那不考，不说哪里考，说的云里雾里的</p><p>之后全班被辅导员叫去谈话，头一次见因为寝室卫生不合格而要求拆散寝室的，还说了说我们班成绩的问题，疯狂diss我，其实我们班成绩不差，辅导员觉得差是因为某些原因</p><p>结果当然是保持原状回去整改了，一顿收拾，扔了没用的，寝室宽敞不少，而且每人把自己的专业书贡献出来摆在一起，<del>看起来</del>学术氛围极其浓厚。</p><p>真是一群富有极客精神的好青年</p><p>说真的，这必须要吹一下，没哪个寝室的学术氛围比我们寝浓厚，我们简直是搞传销一样学编程</p><p>收拾半天就到了晚上，去听学长学姐做产学研的报告，<del>被告知产学研和保研的关系其实很微妙</del></p><p>回来八点，跑完步后不过瘾，昨天没去健身房今天再不去就废了，去健身之后洗澡，现在十点半在寝室</p><p>所以今天没有时间学编程，空闲时间全被辅导员和报告占了</p><hr><p>抽空把博客的评论和搜索功能做了</p><p>以及抽空重做了游戏的地图</p><p>评论是拉来比力链接的，试了试，速度不快但还算好用，qq不能直接登录很难受</p><p>搜索功能从谷歌搜索换成了本地搜索，现在可以搜索博客内的关键词了</p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天什么都没发生 很开心</title>
      <link href="/2018/04/10/%E4%BB%8A%E5%A4%A9%E4%BB%80%E4%B9%88%E9%83%BD%E6%B2%A1%E5%8F%91%E7%94%9F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/10/%E4%BB%8A%E5%A4%A9%E4%BB%80%E4%B9%88%E9%83%BD%E6%B2%A1%E5%8F%91%E7%94%9F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早操吃饭</p><p>毛概嵌入式在做游戏，下午睡觉，睡了一下午，我都不知道我自己这么困，把一个星期的班级签到表打完对勾，打对勾爽，晚上图书馆</p><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>现在玩家可以被迎面而来的方块撞死了，也可以跳到方块上，在方块上起跳，或者不跳，等方块走过自由落体</p><p>从没想过做一个小物理引擎这么困难</p><p>要考虑的情况太多了，各种碰撞检测，每个方块的上下左右</p><p>还要重写之前的跳跃逻辑，如果检测到边缘，跳跃硬设为false，如果玩家自己跳跃，自然是true，但是如果方块走开而玩家没有跳，需要重新检测</p><p>还要检测玩家有没有碰到上面的方块</p><p>以及怎样才算碰到，碰撞体积，落在方块上和被撞死的检测有什么不同</p><p>最后的方案是，方块进入玩家体内15后才算被撞死，这样区别撞死和落在上面的不同</p><p>实际情况还要复杂的多，因为有圆形，每次跳跃后aX反向，那circleJump和circleIsJump又是个很复杂的逻辑，这个比方形难得多</p><p>总之一上午基本搞定</p><p>感谢马原老师对我的支持，真他妈给我面子，看我用电脑用的认真就不管我了</p><p>检测上下界函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function Border(player, blocks) &#123;</span><br><span class="line">  borderFlag = false;</span><br><span class="line"></span><br><span class="line">  if (player.y - player.halfHeight &lt;= 20) &#123;</span><br><span class="line">    borderFlag = true;</span><br><span class="line">    // if(player.shapeFlag === 2) &#123;</span><br><span class="line">    //          player.circleJump = 2;</span><br><span class="line"></span><br><span class="line">    // &#125;</span><br><span class="line">    player.y = 20 + player.halfHeight;</span><br><span class="line">  &#125; else if (player.y + player.halfHeight &gt;=canvasHeight - 20) &#123;</span><br><span class="line">    player.y = canvasHeight - 20 - player.halfHeight;</span><br><span class="line">    // if(player.shapeFlag === 2) &#123;</span><br><span class="line">    //          player.circleJump = 1;</span><br><span class="line"></span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    borderFlag = true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if (playGame) &#123;</span><br><span class="line">    for (var k = 0; k &lt; blocks.length; k++) &#123;</span><br><span class="line">      for (var m = 0; m &lt; blocks[0].length; m++) &#123;</span><br><span class="line">        if (blocks[k][m] === 1) &#123;</span><br><span class="line">          if ( player.vY &gt;= 0 &amp;&amp; (Math.abs((blockY1 - (k + 1) * blockHeight) - (player.y + player.halfHeight) )&lt;= 15) &amp;&amp;  player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth) &#123;</span><br><span class="line">            player.y = blockY1 - (k + 1) * blockHeight - player.halfHeight;</span><br><span class="line">            // player.circleJump = true;</span><br><span class="line"></span><br><span class="line">            borderFlag = true;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    console.log(borderFlag);</span><br><span class="line"></span><br><span class="line">  if (borderFlag &amp;&amp; player.shapeFlag == 1)</span><br><span class="line">    &#123;player.squareJump = false;&#125;</span><br><span class="line">  if (borderFlag &amp;&amp; player.shapeFlag == 2) </span><br><span class="line">    &#123;         player.circleIsJump = false;&#125;</span><br><span class="line">  return borderFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![ditu][/img/content/game4.png]</p><p>地图，一个天才的方法，用数组储存，这是刚开始，以后数组会越来越大</p><p>暂定2代表尖刺</p><p>3代表弹簧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 游戏UI</span><br><span class="line">  blocks = new Array();</span><br><span class="line">  var blockWidth = 44;</span><br><span class="line">  var blockHeight = 44;</span><br><span class="line">  var blockX1 = canvasWidth;</span><br><span class="line">  var blockY1 = canvasHeight - 20;</span><br><span class="line">  var blockVx1 = -4;</span><br><span class="line">  var blockVy1 = 0;</span><br><span class="line">  blocks.push(</span><br><span class="line">    [1,1,1,1,1,1,1,1,1], </span><br><span class="line">    [0,1,1,1,1,1,1,1,1], </span><br><span class="line">    [0,0,1,1,1,1,1,1,1],</span><br><span class="line">    [0,0,0,0,0,0,0,0,0],</span><br><span class="line">    [0,0,0,0,0,0,0,1,0],</span><br><span class="line">    [0,0,0,1,1,1,1,1,0],</span><br><span class="line">    [0,0,0,1,0,0,1,1,0],</span><br><span class="line">    [0,0,0,1,0,0,1,1,0],</span><br><span class="line">    [1,1,1,1,1,1,1,1,1,],</span><br><span class="line">    [1,1,1,1,1,1,1,1,1,],</span><br><span class="line">    [1,1,1,1,1,1,1,1,1,],</span><br><span class="line">    [1,1,1,1,1,1,1,1,1,]</span><br><span class="line"></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>逐帧绘制地图，以及死亡检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// block</span><br><span class="line">context.fillStyle = &quot;rgb(255, 255, 255)&quot;;</span><br><span class="line">blockX1 += blockVx1;</span><br><span class="line">blockY1 += blockVy1;</span><br><span class="line">for (var k = 0; k &lt; blocks.length; k++) &#123;</span><br><span class="line">  for (var m = 0; m &lt; blocks[0].length; m++) &#123;</span><br><span class="line">    if (blocks[k][m] === 1) &#123;</span><br><span class="line">      context.fillRect(blockX1 + m * blockWidth, blockY1 - (k + 1) * blockHeight, blockWidth, blockHeight);</span><br><span class="line">      if ((player.x + player.halfWidth &gt;= blockX1 + m * blockWidth &amp;&amp; player.x - player.halfWidth &lt;= blockX1 + (m + 1) * blockWidth) &amp;&amp;</span><br><span class="line">        ((player.y + player.halfHeight - (blockY1 - (k + 1) * blockHeight)) &gt; 15 &amp;&amp; player.y - player.halfHeight - (blockY1 - k * blockHeight) &lt; -15)) &#123;</span><br><span class="line">        dead();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是一上午的成果了，不比算法简单</p><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><p>晚上上铺告诉我校园卡充值该重写了</p><p>看了新的拿openid的接口，比以前复杂点，要先跳转再拿，问题就是这，跳转会提示必须在微信打开页面</p><p>我仍然可以在手机打开然后拿到openid</p><p>但是想调试最好在电脑试试</p><p>有两种方法</p><hr><p>一种是在Chrome添加用户代理</p><p>安卓微信和Ios微信的UA（User agent：用户代理）</p><p>安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352  </p><p>Ios微信UA：  mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0 </p><p>打开Chrome，F12打开开发人员工具，点击菜单按钮—–More Tools —–Network condition打开Network condition窗口</p><p>User agent选项，选择Custom（自定义），然后在下面的文本框中输入Android或者Ios的UA就可以了</p><hr><p>一种是微信web开发者工具</p><p>我之前下了微信开发者工具，用来开发小程序的，也能稍微调试公众号，看了看发现我的和文档里的不一样，人家的牛逼多了</p><p>找了半天发现，web开发者工具和开发者工具不是一个东西，图标都一模一样，</p><p>下了之后没有授权</p><p>我自己注册了个公众号，叫“骂就完事了”，给自己了开发授权，能开发了，只能开发自己的，南望山雷达站的还是不行，得人家给我授权，不知道会不会给我，不行就先用奇技淫巧凑活着</p><hr><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>添加评论板块</p><ul><li>Disques 国外挺出名的，但被墙了，在我的网站上运行速度堪忧</li><li>畅言，国内的，去年八月开始需要备案，我的网站是挂在国外服务器上的所以不用备案，这就很奇怪了，也不知道国外的服务器能不能备案，反正挺麻烦，算了</li><li>来比力，韩国的，挺好用，只是我的material版本不够新，需要更新，更新的同时我得手动把之前的配置和图片留下来，这是现在要做的，9点45</li></ul>]]></content>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> 微信 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天吃了大橙子 很开心</title>
      <link href="/2018/04/09/%E4%BB%8A%E5%A4%A9%E5%90%83%E4%BA%86%E5%A4%A7%E6%A9%99%E5%AD%90-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/09/%E4%BB%8A%E5%A4%A9%E5%90%83%E4%BA%86%E5%A4%A7%E6%A9%99%E5%AD%90-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早操睡觉算法很努力的去听了中午去图书馆下午测量学健身晚上编程</p><hr><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><p>这两天算法课讲了回溯，老师说比动态分布简单些，我感觉都不简单，做算法吃屎一样难受，要不然也不会选前端</p><p>就算是这样，还是硬憋着搞懂两道</p><p>其实效率还可以更高，但是老师给的标准案例有错误，其中一个+应该改成-，草他奶奶</p><p>用的是java，和c艹差不多，但是java没有指针，很开心</p><p>指针虽然和数组差不多，但是看起来心里烦得慌</p><hr><h4 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h4><p>这是我能写出来最精简得了，70行，从网上看的，然后背着写下来，有点改动，我把canMove和check整合成一个函数了</p><p>没有用堆栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package backtrack;</span><br><span class="line"></span><br><span class="line">public class backtrack &#123;</span><br><span class="line">  private static int[][] array = &#123;</span><br><span class="line">      &#123;2, 0, 1, 0, 0, 0, 1, 0&#125;,  </span><br><span class="line">      &#123;0, 0, 1, 0, 0, 0, 1, 0&#125;,  </span><br><span class="line">              &#123;0, 0, 1, 0, 1, 1, 0, 1&#125;,  </span><br><span class="line">              &#123;0, 1, 1, 1, 0, 0, 1, 0&#125;,  </span><br><span class="line">              &#123;0, 0, 0, 1, 0, 0, 0, 0&#125;,  </span><br><span class="line">              &#123;0, 1, 0, 0, 0, 1, 0, 1&#125;,  </span><br><span class="line">              &#123;0, 1, 1, 1, 1, 0, 0, 1&#125;,  </span><br><span class="line">              &#123;1, 1, 0, 0, 0, 1, 0, 1&#125;,  </span><br><span class="line">              &#123;1, 1, 0, 0, 0, 0, 0, 0&#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">  int playerx = 0;</span><br><span class="line">  int playery = 0;</span><br><span class="line">  </span><br><span class="line">  public static void check(int x, int y) &#123;</span><br><span class="line">    if(x == 8 || y ==7) &#123;</span><br><span class="line">      System.out.println(&quot;找到一个路径，路径是：&quot;);</span><br><span class="line">      print();</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断右边</span><br><span class="line">    if (array[x][y+1] == 0) &#123;</span><br><span class="line">      array[x][y+1] = 2;</span><br><span class="line">      check(x, y+1);</span><br><span class="line">      array[x][y+1] = 0;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // 判断下边</span><br><span class="line">    if(array[x+1][y] == 0) &#123;</span><br><span class="line">      array[x+1][y] = 2;</span><br><span class="line">      check(x+1, y);</span><br><span class="line">      array[x+1][y] = 0;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // 判断左边</span><br><span class="line">    if(y&gt;0) &#123;</span><br><span class="line">    if(array[x][y-1] == 0) &#123;</span><br><span class="line">      array[x][y-1] = 2;</span><br><span class="line">      check(x, y-1);</span><br><span class="line">      array[x][y-1] = 0;</span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    // 判断上边</span><br><span class="line">    if(x&gt;0) &#123;</span><br><span class="line">    if(array[x-1][y] == 0) &#123;</span><br><span class="line">      array[x-1][y] = 2;</span><br><span class="line">      check(x-1, y);</span><br><span class="line">      array[x-1][y] = 0;</span><br><span class="line">      </span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  private static void print() &#123;</span><br><span class="line">    for (int i = 0; i&lt;array.length; i++) &#123;</span><br><span class="line">      for (int j = 0; j&lt;array[1].length;j++) &#123;</span><br><span class="line">        System.out.print(array[i][j] + &quot; &quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    public static void main(String args[]) &#123;  </span><br><span class="line">    check(0, 0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="符号三角形"><a href="#符号三角形" class="headerlink" title="符号三角形"></a>符号三角形</h4><p>这个是最扯淡的，先把代码搁这</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package dfsTriangle;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line">public class dfsTriangle &#123;</span><br><span class="line">  static int n = 7;</span><br><span class="line">  static int[][] array = new int[8][8];</span><br><span class="line">  static int count = 0;</span><br><span class="line">  static int half = n*(n+1)/4;</span><br><span class="line">  static int sum = 0;</span><br><span class="line">  static void Backtrack(int t) &#123;</span><br><span class="line"></span><br><span class="line">    if(count&gt;half || (t*(t-1)/2-count) &gt;half) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(t &gt; n) &#123;</span><br><span class="line">      sum++;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      for(int i=0;i&lt;2;i++) &#123;</span><br><span class="line">        array[1][t] = i;</span><br><span class="line">        count+=i;</span><br><span class="line">        for(int j = 2; j&lt;=t;j++) &#123;</span><br><span class="line">          array[j][t-j+1] = array[j-1][t-j+1]^array[j-1][t-j+2];</span><br><span class="line">          count+=array[j][t-j+1];</span><br><span class="line">        &#125;</span><br><span class="line">        Backtrack(t+1);</span><br><span class="line">        for(int j=2;j&lt;=t;j++) &#123;</span><br><span class="line">          count -= array[j][t-j+1];</span><br><span class="line">        &#125;</span><br><span class="line">        count -=i;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line">    if(n*(n+1)/2 % 2 == 1) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i&lt;= n; i++) &#123;</span><br><span class="line">      for(int j=0;j&lt;=n;j++) &#123;</span><br><span class="line">        array[i][j]=0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Backtrack(1);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目是，第一行有加号有减号，从第二行开始，如果上面一行两个相邻的同号，则之间插个-，异号插个+，直到第n行只有一个符号，问如果第一行有n个，则所有可能性中，有多少个三角形是加号减号数量相同的</p><p>思路是，用一个数组表示第一排的加减号，一个二叉树，抽象的二叉树，从第一个数开始，第一行每次加一个符号，这个符号可能是+也可能是-，两种可能，之后第二行往后的都可以列出来，加第二个符号，第三个…一直到第n个，三角形从1到3到6一直扩大，知道边长为n，这时有2的n此房可能性</p><p>重点是判断条件，每次加个符号，就判断当前加号或减号有没有超过总数的一半，如果超过，直接否掉这种可能性，这是剪枝</p><p>问题就出在判断条件</p><pre><code>if(count&gt;half || (t*(t-1)/2-count) &gt;half) </code></pre><p>老师的是+号，但那样到第n次，无论如何都通不过，所以无论如何sum都是0</p><p>改成减号，这样只能判断到第6次，但可以顺利执行，再加一个专门的判断第n次的条件即可</p><hr><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>成功的把小方块添加了跳跃旋转的动画</p><p>用昨天的那种麻烦的旋转方法，算好速度加速度跳跃时间，每帧转9°，落下后如果在30°到60°间，则继续转，否则直接跳到90°的倍数，这么做是为了画面流畅，如果方块在平面上转，太违和了，如果不转直接到90°，又不流畅，中和下来，这是最好的办法</p><p>添加了可以踩的方块</p><p>这是这游戏的精髓，游戏最主要的模式是方形，那必须像马里奥一样造出立体的地图，用方块即可</p><p>以后还会有刺/斜面</p><p>地图初始化方式是，一个超长的数组，储存地图信息，0是空，1是方块</p><p>然后每帧前进vx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 游戏UI</span><br><span class="line">    blocks = new Array();</span><br><span class="line">    var blockWidth = 44;</span><br><span class="line">    var blockHeight = 44;</span><br><span class="line">    var blockX1 = canvasWidth;</span><br><span class="line">    var blockY1 = canvasHeight - 20;</span><br><span class="line">    var blockVx1 = -3;</span><br><span class="line">    var blockVy1 = 0;</span><br><span class="line">    blocks.push([1, 1, 1], [0, 1, 1], [0, 0, 1]);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// block</span><br><span class="line">    context.fillStyle = &quot;rgb(255, 255, 255)&quot;;</span><br><span class="line"></span><br><span class="line">    for (var k = 0; k &lt; blocks.length; k++) &#123;</span><br><span class="line">      for (var m = 0; m &lt; blocks[0].length; m++) &#123;</span><br><span class="line">        if (blocks[k][m] === 1) &#123;</span><br><span class="line">          context.fillRect(blockX1 + m * blockWidth, blockY1 - (k + 1) * blockHeight, blockWidth, blockHeight);</span><br><span class="line">          if (player.x - player.halfWidth &gt;= blockX1 + m * blockWidth)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">      blockX1 += blockVx1;</span><br><span class="line">      blockY1 += blockVy1;</span><br><span class="line">    for (var k = 0; k&lt; blocks.length; k++) &#123;</span><br><span class="line">      for (var m = 0; m&lt; blocks[0,length]; m++) &#123;</span><br><span class="line">        if(blocks[n][m] === 1) &#123;</span><br><span class="line">          var blockDistance = </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/img/content/game4.png" alt="game"></p>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 张发勇我操你妈了个逼 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天是星期日 很开心</title>
      <link href="/2018/04/08/%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%98%9F%E6%9C%9F%E6%97%A5-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/08/%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%98%9F%E6%9C%9F%E6%97%A5-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>大英听写仍然没抽到我，我怀疑我有避雷针体质</p><p>上午算法，看了眼我的博客，老师以为我在玩游戏，没收了我的手机，还说明天还我，后来跟老师解释清楚了，老师怂了吧唧的把手机还给我了</p><p>吃饭睡觉测量学健身吃饭图书馆</p><p>Vue现在的水平也算是入门了，在想要不要用Vue框架重写游戏</p><p>好处是巩固Vue水平，坏处是本来Canvas就是现学现卖，再加上个Vue，查文档的时间可能比写的时间都多</p><p>这个就权当Canvas的练习了，Vue再用别的实例练</p><hr><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>图片旋转</p><p>rotate(角度);</p><p>很简单，但是这是旋转整个画布，canvas只能旋转画布，图像在里面并不是对象</p><p>所以是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;canvasId&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var canvas = document.getElementById(&quot;canvasId&quot;);</span><br><span class="line">var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">var img = new Image();</span><br><span class="line">img.src = &quot;http://avatar.csdn.net/5/6/7/1_jslang.jpg&quot;;</span><br><span class="line">img.onload = function ()&#123;</span><br><span class="line"></span><br><span class="line">    ctx.save();//保存状态</span><br><span class="line">    ctx.translate(200,200);//设置画布上的(0,0)位置，也就是旋转的中心点</span><br><span class="line">    ctx.rotate(45*Math.PI/180);</span><br><span class="line">    ctx.fillRect(20, 20,200,200);</span><br><span class="line">    ctx.fillStyle=&quot;black&quot;;</span><br><span class="line"></span><br><span class="line">    ctx.restore();//恢复状态</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>转之前储存，转之后载入</p><p>试过了可以转，明天加上跳起来转动的动画</p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>v-on:input</p><p>大概懂了，上次卡在这里的，v-on:input是一个原生的，不是自定义的，用emit(‘input’, something)是在向input传值?</p><hr><p>光看官方文档还不够，在网易云课堂找了个视频教程看，听大神讲解了组件，总算是入门了</p><p>一个小Demo，不包括组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Vue.js&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;http://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">    &lt;!-- 图片 --&gt;</span><br><span class="line">    &lt;div id=&quot;bag&quot; v-bind:class=&quot;&#123;burst: broken&#125;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 进度 --&gt;</span><br><span class="line">    &lt;div id=&quot;bag-health&quot;&gt;</span><br><span class="line">      &lt;div v-bind:style=&quot;&#123;width: health + &apos;%&apos;&#125;&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 控制按钮 --&gt;</span><br><span class="line">    &lt;div id=&quot;controls&quot;&gt;</span><br><span class="line">      &lt;button v-on:click=&quot;punch&quot; v-show=&quot;!broken&quot;&gt;敲&lt;/button&gt;</span><br><span class="line">      &lt;button v-on:click=&quot;restart&quot;&gt;重新来&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var example = new Vue(&#123;</span><br><span class="line">  el: &quot;#vue-app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    health: 100,</span><br><span class="line">    broken: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    punch: function() &#123;</span><br><span class="line">      this.health -= 10;</span><br><span class="line">      if (this.health === 0) &#123;</span><br><span class="line">        this.broken = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    restart: function() &#123;</span><br><span class="line">      this.health = 100;</span><br><span class="line">      this.broken = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#bag &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  background: url(img.png) center no-repeat;</span><br><span class="line">  background-size: 80%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#bag.burst &#123;</span><br><span class="line">  background: url(img2.png) center no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#bag-health &#123;</span><br><span class="line"></span><br><span class="line">  width: 200px;</span><br><span class="line">  border: 2px #000 solid;</span><br><span class="line">  margin: 20px auto 20px auto;</span><br><span class="line">  /* margin-top: 20px; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#bag-health div &#123;</span><br><span class="line">  height: 20px;</span><br><span class="line"></span><br><span class="line">  background: crimson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#controls &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#controls button&#123;</span><br><span class="line">  margin-left: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的有点太简单了</p><hr><h4 id="CLI脚手架"><a href="#CLI脚手架" class="headerlink" title="CLI脚手架"></a>CLI脚手架</h4><ul><li>webpack，有项目用的东西</li><li>ES6 不必担心浏览器是否兼容，脚手架里有loader，将ES6打包时变成ES5</li><li>打包和压缩JS为一个文件</li><li>项目文件在环境中编译，脚手架中有环境，不在浏览器</li><li>页面自动刷新</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>vue-cli是基础，安过了就不用再安了</p><p>最后一行执行完后，localhost/8080可以本地访问</p><p>当更改项目文件，本地服务器上的网页也会随之改变，不用刷新，吊的不行</p><p>cli用于快速创建vue项目，<img src="https://github.com/vuejs/vue-cli" alt="Github地址"></p><p>注册组件分全局和局部，一般都是局部</p><p>全局在main.js注册，局部在父组件里面</p><p>局部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在父组件，比如app.js</span><br><span class="line">import User from &apos;./conponents/Users&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  data() &#123;return &#123;&#125;&#125;,</span><br><span class="line">  components: &#123;&quot;users&quot;: User&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>全局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在main.js</span><br><span class="line">import User from &apos;./components/Users&apos;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&quot;#app&quot;,</span><br><span class="line">  template:&apos;&lt;/App&gt;&apos;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>就这些</p><p>从webstorm里找，没找到创建vue项目的选项，看来只能用cli</p><p>视频讲解看了好几节，没懂太多新的内容，但理解起来熟练了许多</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前天看了头号玩家 很开心</title>
      <link href="/2018/04/07/%E5%89%8D%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/07/%E5%89%8D%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨起床去办公室，中午吃大鸡排，吃完继续回办公室，下午4点去健身房，晚上忘吃饭了，直接去的图书馆</p><p>画了等高线图</p><p>算法 主要是背包问题</p><p>游戏的改进</p><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>首先是我总结出的最完整的背包问题代码</p><p>Java的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class Package &#123;</span><br><span class="line">  //物体的重  </span><br><span class="line">    static int weight[] = &#123;2, 3, 1, 4, 6, 5&#125;;  </span><br><span class="line">    //物体的价值  </span><br><span class="line">    static int value[] = &#123;5, 6, 5, 1, 19, 7&#125;;  </span><br><span class="line">    // maxValue[i][j]保存容量为I的背包从j个物体中选择最大价值的物体放入后最大的价值和  </span><br><span class="line">    static int maxValue[][] = new int[11][6];  </span><br><span class="line">  </span><br><span class="line">    public static void main(String args[]) &#123;  </span><br><span class="line">        // 初始化 -1表示没有存储值  </span><br><span class="line">        for (int i = 0; i &lt; 11; i++)  </span><br><span class="line">            for (int j = 0; j &lt; 6; j++) &#123;  </span><br><span class="line">                maxValue[i][j] = -1;  </span><br><span class="line">            &#125;  </span><br><span class="line">        //包容量10,有5个物体的最大价值  </span><br><span class="line">        int r = maxValue(10, 5);  </span><br><span class="line">        System.out.println(&quot;最大价值:&quot;+r);  </span><br><span class="line">        int total = 10;  </span><br><span class="line">        //打印输出选取了那几个物体  </span><br><span class="line">        for (int j = 5; j &gt; 0; j--) &#123;  </span><br><span class="line">            if (maxValue[total][j] &gt; maxValue[total][j - 1]) &#123;  </span><br><span class="line">                System.out.println(&quot;选择&quot; + j);  </span><br><span class="line">                total = total - weight[j];  </span><br><span class="line">                if (total == 0) break;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (total &gt; weight[0]) System.out.println(&quot;选择&quot; + 0);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    // 容量和第几个物体  </span><br><span class="line">    private static int maxValue(int capacity, int count) &#123;  </span><br><span class="line">        int mValue;  </span><br><span class="line">        // 不等于-1 表示已经计算过。直接取值  </span><br><span class="line">        if (maxValue[capacity][count] != -1) &#123;  </span><br><span class="line">            mValue = maxValue[capacity][count];  </span><br><span class="line">        &#125; else if (count == 0) &#123; // 放进第一个物体;  </span><br><span class="line">            if (capacity &gt; weight[0]) &#123;  </span><br><span class="line">                mValue = value[0];  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                mValue = 0;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; else if (capacity &gt;= weight[count]) &#123;  </span><br><span class="line">            if (maxValue(capacity - weight[count], count - 1) + value[count] &gt; maxValue(capacity, count - 1)) &#123;  </span><br><span class="line">                mValue = maxValue(capacity - weight[count], count - 1) + value[count];  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                mValue = maxValue(capacity, count - 1);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125; else &#123;  </span><br><span class="line">            mValue = maxValue(capacity, count - 1);  </span><br><span class="line">        &#125;  </span><br><span class="line">        maxValue[capacity][count] = mValue;  </span><br><span class="line">        return mValue;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背包问题有三种</p><p>0-1背包问题/多重背包问题/完全背包问题</p><hr><h4 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h4><p>表示每个物品只有取和不取的状态，即只能取0个或1个。<br>用子问题定义状态：即f[i][j]表示前i间物品恰放入一个容器为j的背包可以获得的最大价值。状态转移方程为： </p><pre><code>f[i][j] = max{f[i-1][j], f[i-1][j-weight[i]]+value[i]} </code></pre><p>这里还有个python实现的，但这个不是递归，是重复遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def ZeroOnePack(N, V, weight, value):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    0-1 背包问题(每个物品只能取0次, 或者1次)</span><br><span class="line">    :param N: 物品个数, 如 N=5</span><br><span class="line">    :param V: 背包总容量, 如V=15</span><br><span class="line">    :param weight: 每个物品的容量数组表示, 如weight=[5,4,7,2,6]</span><br><span class="line">    :param value: 每个物品的价值数组表示, 如weight=[12,3,10,3,6]</span><br><span class="line">    :return:  返回最大的总价值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 初始化f[N+1][V+1]为0, f[i][j]表示前i件物品恰放入一个容量为j的背包可以获得的最大价值</span><br><span class="line">    f = [[0 for col in range(V+1)] for row in range(N+1)]</span><br><span class="line"></span><br><span class="line">    for i in range(1, N+1):</span><br><span class="line">        for j in range(1, V+1):</span><br><span class="line">            if j&lt;weight[i-1]:  # 总容量j小于物品i的容量时，直接不考虑物品i</span><br><span class="line">                f[i][j] = f[i-1][j]</span><br><span class="line">            else:</span><br><span class="line">                # 注意由于weight、value数组下标从0开始，第i个物品的容量为weight[i-1],价值为value[i-1]</span><br><span class="line">                f[i][j] = max(f[i-1][j], f[i-1][j-weight[i-1]]+value[i-1]) # 状态方程</span><br><span class="line">    max_value = f[N][V]</span><br><span class="line">    return max_value</span><br></pre></td></tr></table></figure><p>我试了试这个，改写成java后，得到的结果和列表不一样，算法有问题，而且不容易回推出来选的物品是哪几个</p><hr><h4 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h4><p>完全背包表示每个物品可以取无限次，只要加起来总容量不超过V就可以。<br>同样可以用f[i][j]表示前i间物品恰放入一个容器为j的背包可以获得的最大价值。则其状态转移方程为： </p><pre><code>f[i][j] = max{f[i-1][j-k*weight[i]]+k*value[i]} ,其中(0&lt;=k&lt;=j/weight[i]) </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def CompletePack(N, V, weight, value):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    完全背包问题(每个物品可以取无限次)</span><br><span class="line">    :param N: 物品个数, 如 N=5</span><br><span class="line">    :param V: 背包总容量, 如V=15</span><br><span class="line">    :param weight: 每个物品的容量数组表示, 如weight=[5,4,7,2,6]</span><br><span class="line">    :param value: 每个物品的价值数组表示, 如value=[12,3,10,3,6]</span><br><span class="line">    :return: 返回最大的总价值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 初始化f[N+1][V+1]为0，f[i][j]表示前i件物品恰放入一个容量为j的背包可以获得的最大价值</span><br><span class="line">    f = [[0 for col in range(V + 1)] for row in range(N + 1)]</span><br><span class="line"></span><br><span class="line">    for i in range(1, N+1):</span><br><span class="line">        for j in range(1, V+1):</span><br><span class="line">            # 注意由于weight、value数组下标从0开始，第i个物品的容量为weight[i-1],价值为value[i-1]</span><br><span class="line">            # V/weight[i-1]表示物品i最多可以取多少次</span><br><span class="line">            f[i][j] = f[i - 1][j]  # 初始取k=0为最大，下面的循环是把取了k个物品i能获得的最大价值赋值给f[i][j]</span><br><span class="line">            for k in range(j/weight[i-1]+1):</span><br><span class="line">                if f[i][j] &lt; f[i-1][j-k*weight[i-1]]+k*value[i-1]:</span><br><span class="line">                    f[i][j] = f[i-1][j-k*weight[i-1]]+k*value[i-1]  # 状态方程</span><br><span class="line"></span><br><span class="line">            # 上面的f[i][j]也可以通过下面一行代码求得</span><br><span class="line">            #  f[i][j] = max([f[i-1][j-k*weight[i-1]]+k*value[i-1] for k in range(j/weight[i-1]+1)])</span><br><span class="line">    max_value = f[N][V]</span><br><span class="line">    return max_value</span><br></pre></td></tr></table></figure><p>和上个一样</p><h4 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h4><p>多重背包是每个物品有不同的个数限制，如第i个物品个数为num[i]。<br>同样可以用f[i][j]表示前i间物品恰放入一个容器为j的背包可以获得的最大价值，且每个物品数量不超多num[i]。则其状态转移方程为： </p><pre><code>f[i][j] = max{f[i-1][j-k*weight[i]]+k*value[i]} ,其中(0&lt;=k&lt;=min{j/weight[i], num[i]})</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def MultiplePack(N, V, weight, value, num):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    多重背包问题(每个物品都有次数限制)</span><br><span class="line">    :param N: 物品个数, 如 N=5</span><br><span class="line">    :param V: 背包总容量, 如V=15</span><br><span class="line">    :param weight: 每个物品的容量数组表示, 如weight=[5,4,7,2,6]</span><br><span class="line">    :param value: 每个物品的价值数组表示, 如value=[12,3,10,3,6]</span><br><span class="line">    :param num: 每个物品的个数限制，如num=[2,4,1,5,3]</span><br><span class="line">    :return: 返回最大的总价值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 初始化f[N+1][V+1]为0，f[i][j]表示前i件物品恰放入一个容量为j的背包可以获得的最大价值</span><br><span class="line">    f = [[0 for col in range(V + 1)] for row in range(N + 1)]</span><br><span class="line">    for i in range(1, N+1):</span><br><span class="line">        for j in range(1, V+1):</span><br><span class="line">            # 对于物品i最多能取的次数是j/weight[i-1]与num[i-1]中较小者</span><br><span class="line">            max_num_i = min(j/weight[i-1], num[i-1])</span><br><span class="line"></span><br><span class="line">            f[i][j] = f[i - 1][j]  # 初始取k=0为最大，下面的循环是把取了k个物品i能获得的最大价值赋值给f[i][j]</span><br><span class="line">            for k in range(max_num_i+1):</span><br><span class="line">                if f[i][j] &lt; f[i-1][j-k*weight[i-1]]+k*value[i-1]:</span><br><span class="line">                    f[i][j] = f[i-1][j-k*weight[i-1]]+k*value[i-1]  # 状态方程</span><br><span class="line"></span><br><span class="line">            # 上面的f[i][j]也可以通过下面一行代码求得</span><br><span class="line">            # f[i][j] = max([f[i-1][j-k*weight[i-1]]+k*value[i-1] for k in range(max_num_i+1)])</span><br><span class="line">    max_value = f[N][V]</span><br><span class="line">    return max_value</span><br></pre></td></tr></table></figure><p>记在小本本上了</p><hr><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>今天在纠结Canvas的动态大小，本以为用js更改css就很容易设计，结果发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.getElemntById(&quot;canvas&quot;).style.width=&quot;&quot;</span><br><span class="line">document.getElemntById(&quot;canvas&quot;).style.height=&quot;&quot;</span><br></pre></td></tr></table></figure><p>这种方法看似可行,实际上并不可以,改变了大小,但是图像也被拉伸变形.</p><p>搞清楚了canvas,width和height实际上不是style的属性,而是attribute属性 </p><p>可以这样设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.getElemntById(&quot;canvas&quot;).setAttribute(&quot;width&quot;,&quot;&quot;)</span><br><span class="line">document.getElemntById(&quot;canvas&quot;).setAttribute(&quot;height&quot;,&quot;&quot;)</span><br></pre></td></tr></table></figure></p><p>确实这个方法不会拉伸画布的大小,但是又有新的问题出现了,就是画布改变大小会被重绘,原来的图形找不到了,怎么办?那就是第三种方法了</p><p>完美的解决方案,是基于2的基础之上,先把画布存储起来,再改变大小(画布被重绘),再将存储的信息,重新绘制到画布上.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// 完整实例</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">canvas&#123;</span><br><span class="line">    background: lawngreen;//画布背景色,画布放大缩小,好看出效果</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"> &lt;button id=&quot;add&quot;&gt;add&lt;/button&gt;&lt;button id=&quot;sub&quot;&gt;sub&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var content=document.getElementById(&quot;canvas&quot;).getContext(&quot;2d&quot;)</span><br><span class="line">    content.fillRect(50,50,100,100);</span><br><span class="line">    content.fillStyle=&quot;black&quot;</span><br><span class="line">    //为了对比看出效果,先绘制一个黑色的矩形</span><br><span class="line"></span><br><span class="line">    //绑定加大画布的操作放在按钮add上</span><br><span class="line">    document.getElementById(&quot;add&quot;).onclick=function()&#123;</span><br><span class="line">        //获取画布的宽和高</span><br><span class="line">        var width=canvas.getAttribute(&quot;width&quot;)</span><br><span class="line">        var height=canvas.getAttribute(&quot;height&quot;);</span><br><span class="line"></span><br><span class="line">        //获取画布的图像信息,一个副本</span><br><span class="line">        var data=content.getImageData(0,0,width,height)</span><br><span class="line"></span><br><span class="line">        //重新设置画布的大小</span><br><span class="line">        width=parseInt(width)+10</span><br><span class="line">        height=parseInt(height)+10</span><br><span class="line">        canvas.setAttribute(&quot;width&quot;,width)</span><br><span class="line">        canvas.setAttribute(&quot;height&quot;,height)</span><br><span class="line">        //将获得的图像副本,重新绘制到画布,完成画布的大小改变</span><br><span class="line">        content.putImageData(data,0,0)</span><br><span class="line">    &#125;</span><br><span class="line">        //方法和上面相同,就是减小而已.</span><br><span class="line">        document.getElementById(&quot;sub&quot;).onclick=function()&#123;</span><br><span class="line">            var width=canvas.getAttribute(&quot;width&quot;)</span><br><span class="line">            var height=canvas.getAttribute(&quot;height&quot;);</span><br><span class="line"></span><br><span class="line">            var data=content.getImageData(0,0,width,height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            width=parseInt(width)-10</span><br><span class="line">            height=parseInt(height)-10</span><br><span class="line">            canvas.setAttribute(&quot;width&quot;,width)</span><br><span class="line">            canvas.setAttribute(&quot;height&quot;,height)</span><br><span class="line"></span><br><span class="line">            content.putImageData(data,0,0)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>很麻烦，前前后后浪费一个多小时</p><hr><p>彻底解决箭头状态在边缘时的动画效果问题，原来是之前封装到计时器函数的调用出了问题，搞了半天也没解决，经过测试，那个函数只被调用一次就停了，最后的方案是取消封装，反正只用那么一两次，搁在外面凑活下也没问题</p><p>下一步是封装各种障碍物，刺/方块/Gaster Blaster/斜坡，其中方块可以组成多种形状</p><p>以及辅助用的版块，大中小弹簧/二次跳跃点/翻转重力/翻转左右/加速减速/复制玩家</p><p>以及死亡</p><p>暂时就这些</p><p>哦对，现在的折线的线条会闪烁了</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> canvas </tag>
            
            <tag> 算法 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>昨天看了头号玩家 很开心</title>
      <link href="/2018/04/06/%E6%98%A8%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/06/%E6%98%A8%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早起吃饭完了看了看陈亮老师给的学习路线博客，下午睡觉健身晚上图书馆</p><p>真是有品质的生活</p><p>博客主要内容是java爬虫建站</p><p>学习内容是java+前端，听了jdbc的几节内容，还算不错，就是，声音难听，跟屌被别人攥在手里说话一样，是些很棒的学习资源，有大型实例</p><p>但是java最近没功夫学，前端还没扎实呢，不能老来回变，先学着js再说</p><p>更新了折线，通过计时器的改进，现在点击松开切换不会卡顿了，也不会再有难看的不规则线条，但是出现了新的问题，折线在边界处会让整个线条完全扯淡的瞎转(好像问题更大了)，在网页上实现比在程序中要难不少，解决方案是，让折线碰到边界时，死掉，这就完美了，明天再实现</p><p><img src="/img/content/game2.png" alt="zhexian"></p><hr><p>Vue有点学不下去了，照着官方文档硬啃实在是，锻炼我的理解能力</p><p>我应该找个视频看一看</p><p>先把之前的ajax巩固下</p><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><h4 id="JavaScript-中原生-Ajax"><a href="#JavaScript-中原生-Ajax" class="headerlink" title="JavaScript 中原生 Ajax"></a>JavaScript 中原生 Ajax</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//通过这个函数来异步获取信息</span><br><span class="line">function Ajax()&#123; </span><br><span class="line">  var xmlHttpReq = null;  //声明一个空对象用来装入XMLHttpRequest</span><br><span class="line">  if (window.ActiveXObject)&#123;//IE5 IE6是以ActiveXObject的方式引入XMLHttpRequest的</span><br><span class="line">    xmlHttpReq = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">  &#125; </span><br><span class="line">  else if (window.XMLHttpRequest)&#123;//除IE5 IE6 以外的浏览器XMLHttpRequest是window的子对象</span><br><span class="line">    xmlHttpReq = new XMLHttpRequest();//实例化一个XMLHttpRequest</span><br><span class="line">  &#125;</span><br><span class="line">  if(xmlHttpReq != null)&#123; //如果对象实例化成功 </span><br><span class="line">    xmlHttpReq.open(&quot;GET&quot;,&quot;test.asp&quot;,true); //调用open()方法并采用异步方式</span><br><span class="line">    xmlHttpReq.onreadystatechange=RequestCallBack; //设置回调函数</span><br><span class="line">    xmlHttpReq.send(null);  //因为使用get方式提交，所以可以使用null参调用</span><br><span class="line">  &#125;</span><br><span class="line">  function RequestCallBack()&#123;//一旦readyState值改变，将会调用这个函数</span><br><span class="line">    if(xmlHttpReq.readyState == 4)&#123;</span><br><span class="line">        if(xmlHttpReq.status == 200)&#123;</span><br><span class="line">          //将xmlHttpReq.responseText的值赋给ID为 resText 的元素</span><br><span class="line">          document.getElementById(&quot;resText&quot;).innerHTML = xmlHttpReq.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jQuery-中的-Ajax"><a href="#jQuery-中的-Ajax" class="headerlink" title="jQuery 中的 Ajax"></a>jQuery 中的 Ajax</h4><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><pre><code>load(url, data, callback)</code></pre><p>data/callback可选</p><p> 最简单的方法，远程载入HTML代码并插入DOM中</p><p> url中可以加选择器，指定加载的内容</p><pre><code>$(&quot;#resText&quot;).load(&quot;test.html .para&quot;)</code></pre><p>传递方式根据data自动指定，如果没有用GET，有用POST</p><p>回调函数不用多说，异步就指望这个了</p><p>callback有三个参数，返回的内容、请求状态和XMLHttpRequest对象</p><h5 id="get-post"><a href="#get-post" class="headerlink" title="$.get()/$.post()"></a>$.get()/$.post()</h5><pre><code>$.get(url, data, callback, type)</code></pre><p>除了url都是可选</p><p>返回的格式，type，可以是HTML/XML/JSON</p><p>html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.get(&quot;get1.asp&quot;, &#123; </span><br><span class="line">            username :  $(&quot;#username&quot;).val() , </span><br><span class="line">            content :  $(&quot;#content&quot;).val()  </span><br><span class="line">          &#125;, function (data, textStatus)&#123;</span><br><span class="line">                        $(&quot;#resText&quot;).html(data); // 把返回的数据添加到页面上</span><br><span class="line">          &#125;</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></p><p>xml</p><p>实现过程复杂些，但可移植性搞，复用性提高，很多开放平台都是以XML格式输出数据，读者可以用他们提供的API，将获得的数据利用</p><p>但是XML文档体积大，解析操作速度慢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.get(&quot;get2.asp&quot;, &#123; </span><br><span class="line">            username :  $(&quot;#username&quot;).val() , </span><br><span class="line">            content :  $(&quot;#content&quot;).val()  </span><br><span class="line">          &#125;, function (data, textStatus)&#123;</span><br><span class="line">              var username = $(data).find(&quot;comment&quot;).attr(&quot;username&quot;);</span><br><span class="line">            var content = $(data).find(&quot;comment content&quot;).text();</span><br><span class="line">              var txtHtml = &quot;&lt;div class=&apos;comment&apos;&gt;&lt;h6&gt;&quot;+username+&quot;:&lt;/h6&gt;&lt;p class=&apos;para&apos;&gt;&quot;+content+&quot;&lt;/p&gt;&lt;/div&gt;&quot;;</span><br><span class="line">                        $(&quot;#resText&quot;).html(txtHtml); // 把返回的数据添加到页面上</span><br></pre></td></tr></table></figure></p><p>json</p><p>JSON也可以方便的重用，而且简洁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.get(&quot;get3.asp&quot;, &#123; </span><br><span class="line">            username :  $(&quot;#username&quot;).val() , </span><br><span class="line">            content :  $(&quot;#content&quot;).val()  </span><br><span class="line">          &#125;, function (data, textStatus)&#123;</span><br><span class="line">              var username = data.username;</span><br><span class="line">            var content = data.content;</span><br><span class="line">              var txtHtml = &quot;&lt;div class=&apos;comment&apos;&gt;&lt;h6&gt;&quot;+username+&quot;:&lt;/h6&gt;&lt;p class=&apos;para&apos;&gt;&quot;+content+&quot;&lt;/p&gt;&lt;/div&gt;&quot;;</span><br><span class="line">                        $(&quot;#resText&quot;).html(txtHtml); // 把返回的数据添加到页面上</span><br><span class="line">          &#125;,&quot;json&quot;);</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></p><p>第四个参数要设置为json</p><p><strong>新版本js中XML会和JSON一样容易解析，到时XML会成为主流</strong></p><p><strong>jSON格式要求极其严格，一点语法错误都会导致脚本停止运行</strong></p><p>不用与其他程序共享数据时，用HTML</p><p>重用，用JSON</p><p>远程应用程序未知，用XML</p><hr><p>$.post()</p><p>它和get区别在于</p><ol><li>GET请求会跟在URL后传递，POST是作为HTTP消息的尸体内容发给web服务器</li><li>GET大小限制2kb，post理论不限制</li><li>GET请求的数据会缓存，如账号密码，有安全问题</li><li>在服务器端的获取不同，$杠GET[]/$杠POST[]，都可以用$杠REQUEST[]代替</li></ol><hr><h5 id="getScript-getJson"><a href="#getScript-getJson" class="headerlink" title="$.getScript/$.getJson()"></a>$.getScript/$.getJson()</h5><p>动态创建script标签</p><pre><code>$(document.createElement(&quot;script&quot;)).attr(&quot;src&quot;, &quot;test.js&quot;).appendTo(&quot;head&quot;);// 或$(&quot;&lt;script type=&apos;text/javascript&apos; src=&apos;test.js/&gt;&apos;&quot;).appendTo(&quot;head&quot;)// 或$.getScript(&apos;test.js&apos;); // 这个有回调函数</code></pre><p>getJSON</p><pre><code>$.getJSON(&apos;test.json&apos;); //有回调，参数是data，返回的数据</code></pre><p>$.each</p><p>第一个参数是数组/对象，第二个是回调，回调两个参数，一个是索引，一个是对应的变量或内容</p><p>用JSONP形式的回调函数加载其他网页的JSON</p><p><strong>jquery自动把URL里的回调函数替换为正确的函数名</strong></p><p><strong>JSONP，JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com的服务器沟通，而 HTML 的script元素是一个例外。利用 script元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</strong></p><hr><h5 id="ajax-1"><a href="#ajax-1" class="headerlink" title="$.ajax"></a>$.ajax</h5><p>$.ajax是最底层的实现，所以可以替代以上所有</p><p>记住几个参数</p><ol><li>url 默认当前网址，发送请求的地址</li><li>type 默认GET，PUT和DELETE只有部分浏览器支持</li><li>timeout 超时时间，覆盖$.ajaxSetup()</li><li>data processData相关，如果是数组，自动为不同值对应相同名称</li><li>dataType: xml/html/script/json/jsonp/text</li><li>beforeSend 发送前修改XMLHttpRequest</li><li>complete 完成后的回调，两个参数，XMLHttpRequest, textStatus</li><li>success function(data, textStatus)</li><li>error XML对象，错误信息，捕获的错误对象（可选）</li><li>global 默认true，是否触发全局</li></ol><hr><h5 id="序列化元素"><a href="#序列化元素" class="headerlink" title="序列化元素"></a>序列化元素</h5><p>serialize()将DOM元素内容序列化为字符串</p><p>serializeArray() 将DOM序列化，返回JSON</p><p>param() 它是serialize的核心按key/value 序列化</p><hr><h5 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h5><p>不管哪的ajax触发，都会调用这个事件，除非global是false</p><ol><li>ajaxComplete(callback)</li><li>ajaxError(callback)  错误可以作为最后一个参数传递</li><li>ajaxSend(callback)</li><li>ajaxSuccess(callback)</li></ol>]]></content>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 头号玩家 </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天看了头号玩家 很开心</title>
      <link href="/2018/04/05/%E4%BB%8A%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/05/%E4%BB%8A%E5%A4%A9%E7%9C%8B%E4%BA%86%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>清明节假期第一天，雨很大</p><p>看了个段子说，武汉气温有满减优惠的，满30减25，真是这样，昨天还背心短裤拖鞋大蒲扇呢</p><p>上午去激光手术复查，眼压和角膜形态没有问题，视力也恢复到1.2了，还凑活</p><p>之后理发</p><p>中午吃饭</p><p>下午睡觉</p><p>晚上看头号玩家</p><p>今天过清明节被鬼上身了所以没编程</p><h3 id="头号玩家观后感"><a href="#头号玩家观后感" class="headerlink" title="头号玩家观后感"></a>头号玩家观后感</h3><p>首先这个翻译的就不好，Ready player one 是单机双人游戏里一句经典台词，玩家一登场前屏幕就显示这句话，最好的翻译应该是《玩家一准备》</p><p>当然如果是为了读着好听，头号玩家也不错</p><p>主题是彩蛋我很喜欢，我的qq头像就是个彩蛋，Gaster，出自<em>Undertale</em>，如果正常通关，根本不会碰到Gaster，只能通过更改游戏数据和其它NPC的暗示，比如<strong>当心那个用手说话的人</strong>，在一个五平米的小屋里找到他，也没有任何剧情，碰到他他就消失了。设定是地下最伟大的科学家，坠入自己造的核心，被打散到时间和空间里，给人的感觉就是神秘和悲剧，没有对话，没有战斗，只有一首歌和一条实验记录</p><p>扯远了，不过彩蛋题材真的很独特，电影本身就有一堆堆的彩蛋，印象最深的是钢铁巨人坠入岩浆后伸出大拇指的画面，记得这个彩蛋出自终结者2，毁灭公爵3里好像也出现过这个彩蛋</p><p>猎空雷诺这么明显的自然不用说，有人说还看看见大主教了</p><p>甚至有几帧闪过了玩具熊</p><p>剧情上来说，三把钥匙对应的是游戏制作人的生活</p><p>有不少能引起我共鸣的地方，比如<strong>没有规则</strong></p><p>做彩蛋不是什么快乐的事</p><p>如果彩蛋被发现了，玩家开心，开发者也开心</p><p>如果彩蛋没被发现，玩家不会有什么遗憾，因为他们根本不知道彩蛋的存在，反而开发者会难受</p><p>彩蛋越难发现越好，但太难了反而没人发现</p><p>就好像最出名的间谍也是最失败的间谍，真正顶尖的间谍到死也不会被人认出来，死后几十年也不会被人认出来</p><p>所以开发者是很孤独的，明明自己有好的创意，却必须按市场趋势来做，王者荣耀/吃鸡不能说是个垃圾游戏，只能说他们太迎合用户了，面向最最广大的用户，就必须做出一款不那么难，容易上手，没什么内容，不能深究的游戏，它们其实是<strong>社交</strong>游戏</p><p>其实如果让我创公司做游戏，我肯定比天美更面向<strong>广大</strong>群众，钱是一切的基础</p><p>真是的</p><p>头号玩家里的绿洲的创始人是个很厉害的人，因为他实现了做了个有趣的游戏的梦想，顺便赚了5000亿，现实里几乎不可能，尤其是在中国</p><p>最后的最后，开发者把主角带到自己家里</p><p>让他看看自己小时候的成长环境</p><p>我太了解这种感受了，从小玩游戏没几个朋友，想跟别人说点什么但没人理，见个人就想往家里领，不过那个开发者一直坚持到死，而我受不了，现在基本不玩游戏了</p><p>主角我没怎么在意，这个开发者的形象很好</p><p>当然我评判好不好的标准就是像不像我</p><p>没传说之下的彩蛋，毕竟传说之下太新了不够经典，影片里大多数是80年代的，Undertale是15年的，不过无所谓了，我不喜欢这游戏，我只是喜欢这游戏的音乐</p>]]></content>
      
      
        <tags>
            
            <tag> 彩蛋 </tag>
            
            <tag> 头号玩家 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天和一个打篮球的打排球 很开心</title>
      <link href="/2018/04/04/%E4%BB%8A%E5%A4%A9%E5%92%8C%E4%B8%80%E4%B8%AA%E6%89%93%E7%AF%AE%E7%90%83%E7%9A%84%E6%89%93%E6%8E%92%E7%90%83-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/04/%E4%BB%8A%E5%A4%A9%E5%92%8C%E4%B8%80%E4%B8%AA%E6%89%93%E7%AF%AE%E7%90%83%E7%9A%84%E6%89%93%E6%8E%92%E7%90%83-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>想起来前天上完课碰上万林老师，跟他打个招呼，他笑着问我天智下节还有没有课，我说没课去取快递，就走了</p><p>现在回想起来，他是不是有点事想让我干，结果我没理老师直接就走了</p><p>真是的</p><p>真的无聊想找点事干，想来想去陈亮比较靠谱，今天跟陈亮老师讲道理，说我想跟他做项目，他说回头约出来谈谈</p><p>早晨早操，体育课学排球，我的那个两星期没来的搭档总算来了，虽然之前没打过排球，但是会打篮球，给我发球让我有一种被当成篮筐的压迫感，球非常快，简直是冲着我的头砸</p><p>这节课学了发球，和气排球差不多，就是有点疼</p><p>贼疼</p><p>英语课口语展示，没啥意思，下节课到我了，配音可以现场配也可以录好了直接放，现场配分数高，作为一个学过口语的高素质大学生我选择现场配</p><p>吃饭，睡觉，健身</p><p>朋友丢下我去和妹子看电影了，大傻逼</p><p>吃饭，照例吃撑</p><p>去图书馆</p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>如果要在某个组件的根元素监听原生事件用修饰符.native</p><pre><code>&lt;mycomponent v-on:click.native=&quot;doTheThing&quot;&gt;&lt;my-component&gt;</code></pre><p>一些情况下可能需要对prop双向绑定，即.sync的功能，但是它破坏了单项数据流，由于子组件改变prop的代码和普通的状态改动代码没区别，所以当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本</p><p>.sync 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是让子组件改变父组件状态的代码更容易被区分</p><p>2.3.0重新引入.sync，但这次只是一个编译的语法糖，它会被扩展为一个自动更新父组件属性的 v-on 监听器</p><p>如下代码</p><pre><code>&lt;comp :foo.sync=&quot;bar&quot;&gt;&lt;/comp&gt;</code></pre><p>会被扩展为：</p><pre><code>&lt;comp :foo=&quot;bar&quot; @update:foo=&quot;val =&gt; bar = val&quot;&gt;&lt;/comp&gt;</code></pre><p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p><pre><code>this.$emit(&apos;update:foo&apos;, newValue)</code></pre><p>当使用一个对象一次性设置多个属性的时候，这个 .sync 修饰符也可以和 v-bind 一起使用：</p><pre><code>&lt;comp v-bind.sync=&quot;{ foo: 1, bar: 2 }&quot;&gt;&lt;/comp&gt;</code></pre><p>这个例子会为 foo 和 bar 同时添加用于更新的 v-on 监听器。</p><p>使用自定义事件的表单输入组件<br>自定义事件可以用来创建自定义的表单输入组件，使用 v-model 来进行数据双向绑定。要牢记：</p><pre><code>&lt;input v-model=&quot;something&quot;&gt;</code></pre><p>这不过是以下示例的语法糖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;something&quot;</span><br><span class="line">  v-on:input=&quot;something = $event.target.value&quot;&gt;</span><br></pre></td></tr></table></figure><p>所以在组件中使用时，它相当于下面的简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input</span><br><span class="line">  v-bind:value=&quot;something&quot;</span><br><span class="line">  v-on:input=&quot;something = arguments[0]&quot;&gt;</span><br><span class="line">&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure><p>所以要让组件的 v-model 生效，它应该</p><ol><li>接受一个 value prop</li><li>在有新的值时触发 input 事件并将新值作为参数</li><li>一个非常简单的货币输入的自定义控件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Conponent&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currency-input&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&apos;currency-input&apos;, &#123;</span><br><span class="line">  template: &apos;\</span><br><span class="line">    &lt;span&gt;\</span><br><span class="line">      $\</span><br><span class="line">      &lt;input\</span><br><span class="line">        ref=&quot;input&quot;\</span><br><span class="line">        v-bind:value=&quot;value&quot;\</span><br><span class="line">        v-on:input=&quot;updateValue($event.target.value)&quot;\</span><br><span class="line">      &gt;\</span><br><span class="line">    &lt;/span&gt;\</span><br><span class="line">  &apos;,</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span><br><span class="line">    updateValue: function (value) &#123;</span><br><span class="line"></span><br><span class="line">      var formattedValue = value</span><br><span class="line">        // 删除两侧的空格符</span><br><span class="line">        .trim()</span><br><span class="line">        // 保留 2 位小数</span><br><span class="line">        .slice(</span><br><span class="line">          0,</span><br><span class="line">          value.indexOf(&apos;.&apos;) === -1</span><br><span class="line">            ? value.length</span><br><span class="line">            : value.indexOf(&apos;.&apos;) + 3</span><br><span class="line">        )</span><br><span class="line">      // 如果值尚不合规，则手动覆盖为合规的值</span><br><span class="line">      if (formattedValue !== value) &#123;</span><br><span class="line">        this.$refs.input.value = formattedValue</span><br><span class="line">      &#125;</span><br><span class="line">      this.$refs.input.value = Number(formattedValue)</span><br><span class="line">      // 通过 input 事件带出数值</span><br><span class="line"></span><br><span class="line">            // console.log(this.$refs.input.value)</span><br><span class="line"></span><br><span class="line">      // this.$emit(&apos;input&apos;, &quot;222&quot;)</span><br><span class="line">      //       console.log(this.$refs.input.value)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    var example = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;price: 0&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>写上面这个时废了很大劲，因为组件这个概念不好理解，各种传值贼乱，尤其是官网的原本的代码中有一行</p><pre><code>this.$emit(&apos;input&apos;, Number(formattedValue))</code></pre><p>在最后</p><p>没搞懂，是想把它转化成数字提出来，但这样触发Input，不会又调用updateValue吗</p><p>那又会触发input，成了个死循环，什么鬼玩意</p><p>从网上找了找，没搞懂</p><p>但运行的确不出错，可能是特殊的语法</p><p>我把它改成</p><pre><code>this.$refs.input.value = Number(formattedValue)</code></pre><p>同样不会出错</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>默认情况下，一个组件的 v-model 会使用 value prop 和 input 事件。但是诸如单选框、复选框之类的输入类型可能把 value 用作了别的目的。model 选项可以避免这样的冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-checkbox&apos;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &apos;checked&apos;,</span><br><span class="line">    event: &apos;change&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: Boolean,</span><br><span class="line">    // 这样就允许拿 `value` 这个 prop 做其它事了</span><br><span class="line">    value: String</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line">&lt;my-checkbox v-model=&quot;foo&quot; value=&quot;some value&quot;&gt;&lt;/my-checkbox&gt;</span><br><span class="line"></span><br><span class="line">//上述代码等价于：</span><br><span class="line"></span><br><span class="line">&lt;my-checkbox</span><br><span class="line">  :checked=&quot;foo&quot;</span><br><span class="line">  @change=&quot;val =&gt; &#123; foo = val &#125;&quot;</span><br><span class="line">  value=&quot;some value&quot;&gt;</span><br><span class="line">&lt;/my-checkbox&gt;</span><br></pre></td></tr></table></figure><p>注意仍然需要显式声明 checked 这个 prop</p><p>纠结上面那个问题花了好久，今天没学多少，十点了，就这样</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天上课用拍照签到 很开心</title>
      <link href="/2018/04/03/%E4%BB%8A%E5%A4%A9%E4%B8%8A%E8%AF%BE%E7%94%A8%E6%8B%8D%E7%85%A7%E7%AD%BE%E5%88%B0-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/03/%E4%BB%8A%E5%A4%A9%E4%B8%8A%E8%AF%BE%E7%94%A8%E6%8B%8D%E7%85%A7%E7%AD%BE%E5%88%B0-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p><strong>创建了游戏更新日志和学习进度日志</strong></p><p>早晨起床，早操，吃饭，毛概没占到前面的位置，有个傻吊问我怎么今天来上课了，我他妈这学期毛概一节都没翘过好吗，我给你们的印象就是从来不上课吗</p><p>毛概，写Vue，嵌入式，在几何冲刺中找了找灵感后写Vue</p><p>已经没几个人在听郭明强讲课了</p><p>中午吃饭睡觉，下午等大鸡哥回来一起健身，晚上吃完晚饭时间很紧，七点和司机去图书馆，现在是九点，学到十点去跑步</p><p>mac带出来时还有26的电，用了俩小时还剩6，mac的续航是真他妈牛逼，忘充电了还能用</p><p>前提是不带touch bar</p><p>Vue的Prop内容已经完成，自己动手写了俩实例，磕磕绊绊也算整出来了，事件块完成了，明天可以把官网上的基础部分完成，后天总算能学点稍微高级的东西了</p><p>有空试着把之前用jQuery写的改写成Vue</p><p>不要跟我说什么React</p><p>不要跟我说什么Vue</p><p>不要跟我说什么Node.js</p><p>不要跟我嗦什么Angular</p><p>不要跟我嗦什么Dojo</p><p>老夫写代码</p><p>就！用！</p><p>JQUERY</p><p><img src="/img/content/jquery.png" alt="jquery"></p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>用v-on指令监听DOM事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;counter += 1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>v-on还可以接收一个需要调用的方法名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &apos;Vue.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      alert(&apos;Hello &apos; + this.name + &apos;!&apos;)</span><br><span class="line">      if (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 也可以用 JavaScript 直接调用方法</span><br><span class="line">example2.greet()</span><br></pre></td></tr></table></figure><p>上面是直接绑定的，还可以在内联js语句调用方法</p><p>即带参数</p><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  warn: function (message, event) &#123;</span><br><span class="line">    // 现在我们可以访问原生事件对象</span><br><span class="line">    if (event) event.preventDefault()</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>event.preventDefault() 或 event.stopPropagation()是常见的需求</p><p>虽然可以在方法中实现，但更好的方式是使用事件修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="line">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="line">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="line">&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>如果记不住所有的keyCode，可以用别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span><br><span class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line">&lt;!-- 缩写语法 --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><ol><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ol><p>config.keyCodes 自定义按键修饰符别名</p><pre><code>Vue.config.keyCodes.f1 = 112// 现在可以用 v-on:keyup.f1 了</code></pre><p>也可直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="noopener">KeyboardEvent.key</a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符</p><h5 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h5><ol><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ol><blockquote><p>在和 keyup 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 ctrl 的情况下释放其它按键，才能触发 keyup.ctrl。而单单释放 ctrl 也不会触发事件</p></blockquote><p>如果想要单单释放ctrl触发的事件，用 keyCode：keyup.17</p><p>exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure><h5 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h5><p>.left<br>.right<br>.middle</p><hr><h4 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h4><p>v-model的本质不过是语法糖，它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><blockquote><p>v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p></blockquote><blockquote><p>对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 input 事件。</p></blockquote><p>及 将表单的会提交的值和Vue实例里的data中的数据绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>v-model要绑定到能拿到值的元素，比如input/select</p><hr><p>值绑定</p><p>一般情况，v-model通常绑定字符串/布尔值</p><p>绑定的是用户见到的内容，是默认的内容，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>绑定了abc</p><p>但其实也可以绑定到动态值</p><p>用v-bind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">    &lt;!-- 内联对象字面量 --&gt;</span><br><span class="line">  &lt;option v-bind:value=&quot;&#123; number: 123 &#125;&quot;&gt;123&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  type=&quot;checkbox&quot;</span><br><span class="line">  v-model=&quot;toggle&quot;</span><br><span class="line">  true-value=&quot;yes&quot;</span><br><span class="line">  false-value=&quot;no&quot;</span><br><span class="line">&gt;</span><br><span class="line">// 当选中时</span><br><span class="line">vm.toggle === &apos;yes&apos;</span><br><span class="line">// 当没有选中时</span><br><span class="line">vm.toggle === &apos;no&apos;</span><br></pre></td></tr></table></figure><hr><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><ul><li><p>.lazy</p><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了输入法组合文字时)。可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：</p></li><li><p>.trim</p><p>自动过滤用户输入的首尾空白字符</p></li><li><p>.number</p><p>自动将用户输入转换成数值型</p>  <input v-model.number="age" type="number"></li></ul><p>这很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。</p><hr><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>最基础的前两天写过了</p><hr><h5 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h5><p>父组件向子组件传值</p><p>父组件是子组件外边的</p><p>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;child&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>div是child的父组件</p><p>简单应用，注意绑定才是精髓，不绑定的话根本不算传值</p><p>如果想把一个对象所有属性作为Prop传递，则用不带参数的v-bind</p><p>初学者常犯的一个错误是使用字面量语法传递数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递了一个字符串 &quot;1&quot; --&gt;</span><br><span class="line">&lt;comp some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br><span class="line">&lt;!-- 传递真正的数值 --&gt;</span><br><span class="line">&lt;comp v-bind:some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><h5 id="不应该在子组件内部改变-prop"><a href="#不应该在子组件内部改变-prop" class="headerlink" title="不应该在子组件内部改变 prop"></a>不应该在子组件内部改变 prop</h5><p>如果想要把子组件当成局部数据来用，应该定义一个局部变量，用prop初始化它</p><p>如果要把Prop由子组件处理成其他数据输出，应该定义一个计算属性，处理并返回</p><p>如果要调用以上两者，在template里就行</p><p>以下是这一部分的所有实例应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;child message=&quot;hello&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;child v-bind:message=&quot;fuck&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;child v-bind=&quot;gaster&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;child v-bind:message=&quot;gaster.son1&quot; ref=&quot;child&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">      props: [&apos;message&apos;],</span><br><span class="line">      template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125; + &#123;&#123; dajiba &#125;&#125; + &#123;&#123; normalizedSize &#125;&#125; +!!!&lt;/span&gt;&apos;,</span><br><span class="line">      data: function() &#123;</span><br><span class="line">        return &#123; dajiba: this.message &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        normalizedSize: function() &#123;</span><br><span class="line">          return this.message.trim().toLowerCase()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var example1 = new Vue(&#123;</span><br><span class="line">      el: &quot;#example-1&quot;,</span><br><span class="line">      data: function() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">        fuck: &quot;fuck you&quot;,</span><br><span class="line">        gaster: &#123;</span><br><span class="line">          son1: &quot;sans&quot;,</span><br><span class="line">          message: &quot;papyrus&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h5><p>为组件的Prop指定验证规则，如果传入的数据不符合要求，会发出警告</p><p>这个功能多用于开发，或者说是为了防止其他人用错自己写的组件而使用认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;my-child</span><br><span class="line">   :num=&quot;100&quot;</span><br><span class="line">   :msg=&quot;&apos;sdf&apos;&quot;</span><br><span class="line">   :object=&quot;&#123;a:&apos;a&apos;&#125;&quot;</span><br><span class="line">   :cust=&quot;100&quot;</span><br><span class="line">  &gt;&lt;/child&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  Vue.component(&apos;my-child&apos;, &#123;</span><br><span class="line">   props: &#123;</span><br><span class="line">    // 基础类型检测 (`null` 意思是任何类型都可以)</span><br><span class="line">    num: Number,</span><br><span class="line">    // 多种类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必传且是字符串</span><br><span class="line">    msg: &#123;</span><br><span class="line">     type: String,</span><br><span class="line">     required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数字，有默认值</span><br><span class="line">    num1: &#123;</span><br><span class="line">     type: Number,</span><br><span class="line">     default: 1000</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数组/对象的默认值应当由一个工厂函数返回</span><br><span class="line">    object: &#123;</span><br><span class="line">     type: Object,</span><br><span class="line">     default: function () &#123;</span><br><span class="line">     return &#123; message: &apos;hello&apos; &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    cust: &#123;</span><br><span class="line">     validator: function (value) &#123;</span><br><span class="line">     return value &gt; 10</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   template: `&lt;div&gt;</span><br><span class="line">       &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;&#123;&#123; num1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;&#123;&#123; object &#125;&#125;&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;&#123;&#123; cust &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;`</span><br><span class="line">  &#125;)</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">   el: &quot;#app&quot;</span><br><span class="line">  &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;my-child</span><br><span class="line">   :num=&quot;asd&quot;</span><br><span class="line">   :msg=&quot;sdf&quot;</span><br><span class="line">   :object=&quot;&#123;a:&apos;a&apos;&#125;&quot;</span><br><span class="line">   :cust=&quot;100&quot;</span><br><span class="line">  &gt;&lt;/child&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><h5 id="非Prop特性"><a href="#非Prop特性" class="headerlink" title="非Prop特性"></a>非Prop特性</h5><p>所谓非 prop 特性，就是指它可以直接传入组件，而不需要定义相应的 prop</p><p>它可以直接把特性添加到组件中</p><pre><code>&lt;bs-date-input data-3d-date-picker=&quot;true&quot;&gt;&lt;/bs-date-input&gt;</code></pre><p>还可以合并/替换现有属性</p><p>假设这是 bs-date-input 的模板</p><pre><code>&lt;input type=&quot;date&quot; class=&quot;form-control&quot;&gt;</code></pre><p>为了给该日期选择器插件增加一个特殊的主题，我们可能需要增加一个特殊的 class，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bs-date-input</span><br><span class="line">  data-3d-date-picker=&quot;true&quot;</span><br><span class="line">  class=&quot;date-picker-theme-dark&quot;</span><br><span class="line">&gt;&lt;/bs-date-input&gt;</span><br></pre></td></tr></table></figure><p>现在有两个class，一个来自自身的模板，一个来自父组件</p><p>如果是其他特性，比如type，会替换掉，但是class和style会合并(merge)</p><hr><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>父组件使用prop传递数据给子组件，子组件通过事件传递数据给父组件</p><h5 id="v-on绑定自定义事件"><a href="#v-on绑定自定义事件" class="headerlink" title="v-on绑定自定义事件"></a>v-on绑定自定义事件</h5><p>$on(eventName)  监听事件</p><p>$emit(eventName, optionalPayload) 触发事件</p><p>父组件可以在子组件的地方直接用v-on来监听子组件处罚的时间，不能用$on。必须在模板中用v-on绑定</p><p>照着文档写了个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button-counter v-on:add=&quot;addTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter v-on:add=&quot;addTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;button v-on:click=&quot;addCount&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">      data: function() &#123;</span><br><span class="line">        return &#123;count: 0&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        addCount: function() &#123;</span><br><span class="line">          this.count++;</span><br><span class="line">          this.$emit(&apos;add&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var example1 = new Vue(&#123;</span><br><span class="line">      el: &quot;#example-1&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        total: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        addTotal: function() &#123;</span><br><span class="line">          this.total++;</span><br><span class="line">          return this.total</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="使用载荷-payload-数据的实例"><a href="#使用载荷-payload-数据的实例" class="headerlink" title="使用载荷(payload)数据的实例"></a>使用载荷(payload)数据的实例</h5><p>载荷其实类似传参数</p><p>整体结构和上面的实例类似</p><p><strong>鼠标点击触发click事件，click绑定子组件的methods中的一个事件m1，在子组件的实例中m1绑定父组件的事件m2，m2会改变父组件的data中的内容，改变的内容由子组件传值，就是通过paylaod传值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">能否理解？</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;button-message v-on:sendtofather=&apos;receive&apos;&gt;</span><br><span class="line">    &lt;/button-message&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p v-for=&quot;msg in receivemessage&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> Vue.component(&apos;button-message&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div&gt;&lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;&lt;button v-on:click=&quot;send&quot;&gt;Send&lt;/button&gt;&lt;/div&gt;&apos;,</span><br><span class="line">      data: function() &#123;</span><br><span class="line">        return&#123; message: &apos;textarea&apos; &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        send: function()&#123;</span><br><span class="line">          this.$emit(&apos;sendtofather&apos;, &#123; message: this.message&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var example2 = new Vue(&#123;</span><br><span class="line">      el: &quot;#example-2&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        receivemessage: []</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        receive: function(payload) &#123;</span><br><span class="line">          this.receivemessage.push(payload.message)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>命名方法有些乱了，凑活着看</p><p>Vue的一些位置不能用驼峰命名，必须用-分开单词，</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180402 今天和最最优秀的人去图书馆感觉自己也变优秀了一丁点 很开心</title>
      <link href="/2018/04/02/20180402-%E4%BB%8A%E5%A4%A9%E5%92%8C%E6%9C%80%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E5%8E%BB%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E4%B9%9F%E5%8F%98%E4%BC%98%E7%A7%80%E4%BA%86%E4%B8%80%E4%B8%81%E7%82%B9-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/02/20180402-%E4%BB%8A%E5%A4%A9%E5%92%8C%E6%9C%80%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E5%8E%BB%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E4%B9%9F%E5%8F%98%E4%BC%98%E7%A7%80%E4%BA%86%E4%B8%80%E4%B8%81%E7%82%B9-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>今天是周一，开心的不行</p><p>越来越觉得周末无聊，周末人都不见了，只能自己敲代码</p><p>早晨以为有早操，六点一刻起来刷牙洗脸，回头一看寝室没动静，再一看手机 早操取消</p><p>操他妈的</p><p>七点多去搬仪器</p><p>搬到那发现<em>少了个电池少了个卷尺</em>，可能是他们拿包时拿错了</p><p>仪器的电池得不少钱，我们找了找别的组的已经交了的仪器，有个组多一个电池，我说“那是我们的，我们和那个组换了换仪器”，老师说”好”，于是赔了卷尺的2块钱高高兴兴回去了</p><p>我们真是群伟大的地质工作者</p><p>算法，讲贪心算法，老师让讨论，那个姓李的同桌很自私，不愿意说出自己对世界七大数学难题的深刻理解</p><p>背包，矩阵乘法分组，LSC，回头背过</p><p>中午和同桌买饭，碰到外校的来考试，借我们卡刷，转给我们钱</p><p>吃完和刘老板去图书馆，大中午的，图书馆真凉快</p><p>现在是中午</p><p>现在是晚上9:45 图书馆</p><p>中午没睡觉下午也不觉得困，可能是因为测量学和同桌友好交流的很开心</p><p>测量学老师又透了10分的题，算下来整张卷子快透光了</p><p>第九周考试</p><p>测量学之后拿完快递去和司机去健身房，</p><p>那件连帽小背心还挺骚气的</p><p>主要练肩，之前没着重练过，很疼</p><p>吃了晚饭买水果去图书馆</p><p>直到现在</p><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>今天没有学Canvas，补上昨天的理解</p><p><img src="/img/content/dontforget.png" alt="Dont Forget"></p><p>可以看到玩家后面有条轨迹</p><p>那个轨迹花了我一下午的时间</p><p>Canvas只能逐帧渲染</p><p>所以我设了个数组，在onmouseup/onmousedown事件绑定了重复调用的计时器，每几毫秒便调用一次，获取当前y值，存数组里，这会是一个非常长的数组，之后根据数组逐帧绘画</p><p>但是运算量很大，如果想要平滑的效果，需要极高的性能，我试过每1毫秒渲染一次，其实60帧每秒就够了，但是为了画曲线，必须要更精确的时间，因为其实它不是曲线，它是无数条线段，计时器时间间隔越小，就越平滑</p><p>下面是5毫秒的效果</p><p><img src="/img/content/dontforget2.png" alt="5ms"></p><p>我试过1毫秒，非常棒，和完美的曲线一样</p><p>运行了半分钟，电脑嗡嗡嗡要炸了一样</p><p>游戏才刚开始做，不打算以此某生，权当爱好，每天做一点</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>v-if/v-else和平时理解的差不多，v-else-if是2.1.0版本新增的</p><p>刚才打版本两个字时，发现搜狗输入法的第二项是输入法的版本号：</p><p>4.6.0.5592系统词频: 20180103组词数据: 20180103辅助码  : 20150602编译时间: Mar  1 2018 19:32:21平台版本: OS X 10.13.3(17D47)</p><p>这个设计还算不错，让人感到有点意外的惊喜，意料之内的不算是用户体验，意料之外的才是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class="line">  A</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class="line">  B</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class="line">  C</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">  Not A/B/C</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><p><em>key</em></p><p>Vue会高效渲染元素，通常会复用已有的，这样做除了加快速度外，还有些别的好处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;</span><br><span class="line">  &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">  &lt;input placeholder=&quot;Enter your username&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-else&gt;</span><br><span class="line">  &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">  &lt;input placeholder=&quot;Enter your email address&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>切换不会清除已输入内容</p><p>如果要让两个元素是相互独立的，加个key即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;</span><br><span class="line">  &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">  &lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-else&gt;</span><br><span class="line">  &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">  &lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><p><em>v-show</em></p><p>这也是一个用于根据条件展示元素的指令</p><pre><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code></pre><p><em>v-show不支持template元素，也不支持v-else</em></p><p>v-if/v-show</p><blockquote><p>-if 是<em>真正</em>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>v-show 简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。<br>它只是切换display属性<br>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p></blockquote><p>v-if/v-for  学v-for时再讲</p><hr><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>用v-for把一个数组对应为一组元素</p><p>item in items 特殊语法，items 是源数据数组， item 是数组元素迭代的别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>v-for块中，拥有对父作用域属性的完全访问权限，v-for还支持一个可选的第二个参数为当前项的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;example-2&apos;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; -&#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &quot;#example-2&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &quot;Parent&quot;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;.,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>index分别是0, 1</p><p>可以用of替代in作为分隔符</p><pre><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code></pre><hr><p>对象的v-for</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example3 = new Vue(&#123;</span><br><span class="line">  element: &quot;#v-for-object&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: &apos;Wang&apos;,</span><br><span class="line">      lastName: &apos;Badanzhi&apos;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>提供第二个参数为键名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>第三个参数为索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>以上value/key/index可以随意更改，安顺序排就行</p><hr><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>Vue.js 用v-for更新渲染过的元素列表时，默认用“就地复用”策略，如果数据项顺序改变，不用移动DOM元素来匹配，而是简单复用每个元素，并确保在特定索引下显示已经被渲染过的每个元素</p><p>默认模式是高效的，但只适用于<em>不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</em></p><p>为了重用和重新排序现有元素，以便追踪每个节点身份，需要给每项提供一个唯一的key属性，最好每项都有唯一的key。需要用v-bind绑定</p><pre><code>&lt;div v-for=&quot;item in items&quot; key=&quot;item.id&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p>尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p></blockquote><hr><h4 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h4><h5 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h5><p>会改变原数组，也会将触发视图更新</p><ol><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse() </li></ol><p>例如，在控制台输入</p><pre><code>example1.items.push({ message: &apos;Baz&apos; })</code></pre><h5 id="非编译方法"><a href="#非编译方法" class="headerlink" title="非编译方法"></a>非编译方法</h5><p>不会改变原始数组，但会返回一个新数组，可以替换原有数组</p><ol><li>filter()</li><li>concat()</li><li>slice()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(function(item) &#123;</span><br><span class="line">  return item.message.match(/Foo/)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>Vue不能检测以下变动的数组</p><ol><li><p>由索引值直接设置一个项</p><p> vm.items[indexOfItem] = new Value</p></li><li><p>修改数组长度时</p><p> vm.items.length = newLength</p></li></ol><p>为了解决第一类问题</p><pre><code>Vue.set(vm.items, indexOfItem, newValue)//或vm.$set(vm.items, indexOfItem, newValue)// 或Vue.items.splice(indexOfItem, 1, newValue)</code></pre><p>为了解决第二类问题</p><pre><code>vm.items.splice(newLength)</code></pre><hr><p>Vue不能检测对象属性的添加或删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// &apos;vm.a&apos; 现在是响应的</span><br><span class="line">vm.b = 2 不是响应的</span><br></pre></td></tr></table></figure></p><p>对于已创建的实例，Vue不能动态的添加根级别的响应式属性，但可以用</p><pre><code>Vue.set(object, key, value)</code></pre><p>向嵌套对象添加响应式属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userProfile: &#123;</span><br><span class="line">      name = &apos;wangbadanzhi&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.userProfile, &apos;age&apos;, 27)</span><br><span class="line">vm.$set(vm.userProfile, &apos;age&apos;, 27)</span><br></pre></td></tr></table></figure><hr><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>object.assign() 从后向前复制，如果后面的前面没有，则追加到末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const object1 = &#123;</span><br><span class="line">  a:1,</span><br><span class="line">  b:2,</span><br><span class="line">  c:3</span><br><span class="line">&#125;;</span><br><span class="line">const object2 = Object.assign(&#123;c:4, d:5&#125;, object1);</span><br></pre></td></tr></table></figure><p>有关JSON的一点东西</p><pre><code>JSON.parse(jsonstr);    // 可以将json字符串转换成json对象JSON.stringify(jsonobj);    // 反过来</code></pre><h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h5><p>返回值有六种可能</p><p>number/string/boolean/object/function/undefined</p><p>可以用typeof来获取一个变量是否存在</p><pre><code>if(typeof a!= &quot;undefined&quot;){}</code></pre><p>而不要用if(a)，因为这样如果a不存在(未声明)会报错</p><p>对于Array/Null这样的特殊对象一律返回object，如果要想判断是否是数组，可以用instanceof判断，如</p><pre><code>var a = new Array();alert(a instanceof Array);</code></pre><p>会返回true，</p><pre><code>alert(a instanceof Object);</code></pre><p>也是true，因为Array的prototype属性构造于Object，Array的父级是Function</p><p>提到prototype，它是个很简单的属性，用于为对象添加属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function employee(name,job,born)</span><br><span class="line">&#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.job=job;</span><br><span class="line">this.born=born;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var bill=new employee(&quot;Bill Gates&quot;,&quot;Engineer&quot;,1985);</span><br><span class="line"></span><br><span class="line">employee.prototype.salary=null;</span><br><span class="line">bill.salary=20000;</span><br><span class="line"></span><br><span class="line">document.write(bill.salary);</span><br></pre></td></tr></table></figure><p>输出20000<br>可以不加圆括号</p><h5 id="jQuery-isPlainObject"><a href="#jQuery-isPlainObject" class="headerlink" title="jQuery.isPlainObject"></a>jQuery.isPlainObject</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.isPlainObject(&#123;&#125;);    // true</span><br><span class="line">$.isPlainObject(new Object());    //true</span><br><span class="line">$.isPlainObject(&#123;name: &quot;CodePlayer&quot;&#125;);    //true</span><br><span class="line">$.isPlainObject(&#123;fuck: function()&#123;&#125;&#125;);    //true</span><br><span class="line">$.isPlainObject(&quot;wangtianzhi&quot;);   //false</span><br><span class="line">$.isPlainObject([]);    //false</span><br><span class="line">$.isPlainObject(function()&#123;&#125;);    //false</span><br><span class="line">$.isPlainObject(document.location); //false  在IE中返回true，IE真是调皮</span><br></pre></td></tr></table></figure><hr><h4 id="回到Vue"><a href="#回到Vue" class="headerlink" title="回到Vue"></a>回到Vue</h4><p>和object.assign()类似，如果要为已有对象负于多个新值，要添加新的响应式属性</p><p>不要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object.assign(vm.userProfile, &#123;</span><br><span class="line">  age: 27,</span><br><span class="line">  favoriteColor: &apos;Vue Green&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.userProfile = Object.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class="line">  age: 27,</span><br><span class="line">  favoriteColor: &apos;Vue Green&apos;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><hr><p>显示过滤/排序结果</p><p>如果要显示一个数组的过滤/排序副本，而不改变原始数据，赢创建返回过滤/排序数组的计算属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  number: [1, 2, 3, 4, 5]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: function() &#123;</span><br><span class="line">    return this.number.filter(function(number) &#123;</span><br><span class="line">      return number % 2 === 0;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述提到了array.filter</p><pre><code>array.filter(function(currentValue, index, arr), thisValue)</code></pre><ol><li>currentValue: 必须，currentValue是数组中的每个当前元素</li><li>index: 可选，当前元素索引值</li><li>arr，可选当前元素属于的数组对象</li><li>thisValue 可选，对象作为执行回调时使用，传递给函数，用作this的值，如果省略，this为undefined</li></ol><hr><h5 id="一段取值范围的v-for"><a href="#一段取值范围的v-for" class="headerlink" title="一段取值范围的v-for"></a>一段取值范围的v-for</h5><p>可以取一段整数，这种情况下它会重复多次模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>结果：12345678910</p><p>v-for on a template<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;template v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><h5 id="v-for-with-v-if"><a href="#v-for-with-v-if" class="headerlink" title="v-for with v-if"></a>v-for with v-if</h5><p>v-for优先级比v-if更高，意味着v-if将重复运行于每个v-for循环中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;</span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>如果想用v-if跳过循环，可以将v-if置于外层元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul v-if=&quot;todos.length&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;todo in todos&quot;&gt;</span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;p v-else&gt;No todos left!&lt;/p&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>按理说还要组件之前还有事件处理和表单输入绑定，但那些内容动不动就是”这些是和组件有关的内容，请先看组件的”，我心里痒痒，就先跳过那两块</p><p>组件 Component 是Vue的代表性功能之一，可以拓展HTML元素，封装重用代码</p><p>较高层面上，组件是自定义元素</p><p>所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象</p><h5 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>对于自定义标签的命名 Vue.js 不强制遵循 W3C 规则 (小写，并且包含一个短杠)，尽管这被认为是最佳实践</p></blockquote><p>注册之后便可以在一个实例模板中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;div&gt;fuck&lt;/div&gt;&apos;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var Child = &#123;</span><br><span class="line">  template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  components: &#123;</span><br><span class="line">    // &lt;my-component&gt; 将只在父组件模板中可用</span><br><span class="line">    &apos;my-component&apos;: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种封装也适用于其它可注册的 Vue 功能，比如指令。</p><p>些元素内部不能使用自定义标签或者自定义标签内也不能放某些特殊的标签，这时候就要用is代替一下，让html语法符合规则验证。is属于指定要在内部使用的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;my-row&gt;...&lt;/my-row&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>是不行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>才可以</p><blockquote><p>如果使用来自以下来源之一的字符串模板，则没有这些限制：<br>  <script type="text/x-template"><br>  JavaScript 内联模板字符串<br>  .vue 组件<br>  因此，请尽可能使用字符串模板。</p></blockquote><h5 id="data里的内容必须是函数"><a href="#data里的内容必须是函数" class="headerlink" title="data里的内容必须是函数"></a>data里的内容必须是函数</h5><p>否则会报错</p><p>如果非得返回自己，应该返回个全新的数据对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件组合"><a href="#组件组合" class="headerlink" title="组件组合"></a>组件组合</h4><p>简单来说就是</p><p>prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息</p><p>剩下的明天再说</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>解耦 是将程序积木化</p><p>各个积木可以组合成一个形状，又可以拆分，彼此互不影响，但只要形状合适(接口合适)，就能灵活的组合在一起，这是理想状态</p><p>而解耦是在逐渐达到这个理想状态的过程</p><h3 id=""><a href="#" class="headerlink" title="===/=="></a>===/==</h3><p>===是严格运算符，==是相等运算符</p><p>简单说，===要求类型和值都相等，==要求值相等，类型会自动换</p><blockquote><p>举个简单的例子，团队协作中你肯定需要读别人的代码。而当你看到“==”时，要判断清楚作者的代码意图是确实需要转型，还是无所谓要不要转型只是随手写了，还是不应该转型但是写错了……所花费的脑力和时间比明确的“===”（加上可能需要的明确转型）要多得多。要记得团队中的每个人（包括原作者自己）都需要付出这理解和维护成本。——贺师俊</p></blockquote></script></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180401今天签了二十张签到表 很开心</title>
      <link href="/2018/04/01/20180401%E4%BB%8A%E5%A4%A9%E7%AD%BE%E4%BA%86%E4%BA%8C%E5%8D%81%E5%BC%A0%E7%AD%BE%E5%88%B0%E8%A1%A8-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/04/01/20180401%E4%BB%8A%E5%A4%A9%E7%AD%BE%E4%BA%86%E4%BA%8C%E5%8D%81%E5%BC%A0%E7%AD%BE%E5%88%B0%E8%A1%A8-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>今</p><p>天</p><p>我</p><p>把</p><p>游</p><p>戏</p><p>的</p><p>Demo</p><p>撸出来了</p><p>早晨起床去图书馆，中午吃完饭去办公室，晚上回寝室写</p><p>我都佩服我一连串Canvas的奇技淫巧</p><p>具体操作明天再写，今天累了</p><p>出去跑一跑回来吃大鸡排睡觉</p><p>游戏在侧边栏可以找到</p>]]></content>
      
      
        <tags>
            
            <tag> web-front </tag>
            
            <tag> 游戏 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180331 今天有人说天天都会看我的博客 很开心</title>
      <link href="/2018/03/31/20180331-%E4%BB%8A%E5%A4%A9%E6%9C%89%E4%BA%BA%E8%AF%B4%E5%A4%A9%E5%A4%A9%E9%83%BD%E4%BC%9A%E7%9C%8B%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/31/20180331-%E4%BB%8A%E5%A4%A9%E6%9C%89%E4%BA%BA%E8%AF%B4%E5%A4%A9%E5%A4%A9%E9%83%BD%E4%BC%9A%E7%9C%8B%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>周六，早晨没早操，早起去测量学实习，不会，划水，在北区实习基地，环境不错，还有打真人CS的，好像80一次</p><p>看小朋友们打枪战，枪林弹雨的，贼恐怖，差点回不来</p><p>有个小女孩疯子一样，扯着嗓子喊打死他们打死他们，就叫她秀琴大妹子了</p><p>对野外环境没兴趣，虫子多，提前带上皮哥溜了，吃了北区星球美食街的铁板烧，味一般，太烫</p><p>中午睡一觉，下午健身，赶上单车教练第一次带我们上课，有教练带着就是不一样，学会了很多新姿势，正手反手背手左边右边一把位二把位三把位换着来，动作非常骚气</p><p>很伤耳朵，和那边的VOX酒吧有一拼，怀疑他们开这么大声音是因为，年轻时单车课上多了听力下降，中年成了单车教练时耳朵已经很不好，要开很大声音才有感觉，结果又把我们这一代的耳朵带坏了，如此恶性循环</p><p>洗澡吃饭去图书馆，做了三小时游戏，游戏命名DON’T FORGET</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>造轮子一向是举步维艰</p><p>进度极慢，因为在不停的试错，没有好的解决方案</p><p>我想让玩家后面有一条跟着玩家轨迹的折线，这本来不难，但我是要用Canvas做，而且，因为是伪跑酷，玩家是不动的，折线在后退，每一帧都要重画折线</p><p>我想用一个Array来记录玩家近几秒的行动，再根据Array来画，玩家的行动路径全凭按屏幕的时间长短，那如何获取这时间就是关键</p><p>我用一个计时器来做，每0.001s进行一次，每次进行使时间+1，按下和松开分别两个计时器，按下后会停止松开的，松开后会停止按下的，这样总有一个计时器在运作</p><p>结果不行，因为keydown是持续的方法，也就是按着会不停重复调用，不停刷新计时器，我想找个能判断是否存在计时器的，太麻烦没找到</p><p>后来我用date.gettime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();          </span><br><span class="line">var time = date.getTime();  //拿到今天到现在的总毫秒</span><br></pre></td></tr></table></figure><p>每次交换会让两次的time相减，拿到值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;gameUI&quot; onmousedown=&quot;upArray(this)&quot; onmouseup=&quot;downArray(this)&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function upArray(ev) &#123;</span><br><span class="line">  var date = new Date();</span><br><span class="line">  time1 = date.getTime();</span><br><span class="line">  if(time2 &gt; 1) &#123;</span><br><span class="line">    timeDown = time1-time2;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(timeDown);</span><br><span class="line">  array.unshift(timeDown);</span><br><span class="line">  if(array.length&gt;100) &#123;</span><br><span class="line">    array.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function downArray(ev) &#123;</span><br><span class="line">  var date = new Date();</span><br><span class="line">  time2 = date.getTime();</span><br><span class="line">  if(time1 &gt; 1) &#123;</span><br><span class="line">    timeUp = time1-time2;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(timeUp);</span><br><span class="line">  array.unshift(timeUp);</span><br><span class="line">  console.log(array);</span><br><span class="line">  if(array.length&gt;100) &#123;</span><br><span class="line">    array.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好的操作，但由于游戏性，考虑到移动端，用鼠标操作更好，我这时已经换成了onmousedown，又他妈炸了</p><p>这个不是重复的，只有按下和松开触发</p><p>所以数组也是按下或松开才改变</p><p>那根本起不到实时绘制路线的效果，我想路线一直跟着</p><p>最终最终的解决方案是，游戏开始时不停检测当前状态，如果是按住的状态，重复更改数组，如果是松开也是同理，但是，按住替换成松开或反过来是增加一项，一直按住或一直松开是替换原来的一项，需要加判断条件</p><p>思路就是这样，这是模式里最难设计的，也是玩着最爽的一种</p><p>原来的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;downtime:&quot;+downTime);</span><br><span class="line">        downTime = 0;</span><br><span class="line">        try&#123;</span><br><span class="line">          clearTimeout(downTimeout);&#125;catch (e)&#123;console.log(e)&#125;</span><br><span class="line">          if(!upTimeout) &#123;</span><br><span class="line">            upTimeout = setTimeout(function () &#123;</span><br><span class="line">              upTime++;</span><br><span class="line">              console.log(upTime);</span><br><span class="line">              if (player.moveArray[0] &gt;= 0) &#123;</span><br><span class="line">                player.moveArray.unshift(upTime);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                player.moveArray.shift();</span><br><span class="line">                player.moveArray.unshift(upTime);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, 1);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></p><p>绘制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">    context.moveTo(player.x-player.halfWidth, player.y);</span><br><span class="line">    for (var i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">      var lineLength = array[i];</span><br><span class="line">      if(lineLength&gt;0) &#123;</span><br><span class="line">        var linex = lineLength*0.03;</span><br><span class="line">        var liney = lineLength*0.03;</span><br><span class="line">        lineStartx -= linex;</span><br><span class="line">        lineStarty += liney;</span><br><span class="line">        context.lineTo(lineStartx, lineStarty);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        lineLength = -1 * lineLength;</span><br><span class="line">        var linex = lineLength*0.03;</span><br><span class="line">        var liney = lineLength*0.03;</span><br><span class="line">        lineStartx -= linex;</span><br><span class="line">        lineStarty -= liney;</span><br><span class="line">        context.lineTo(lineStartx, lineStarty);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    context.strokeStyle=&quot;green&quot;;</span><br><span class="line">    context.stroke();</span><br></pre></td></tr></table></figure></p><hr><p><strong>与 onmousedown 事件相关连得事件发生次序（ 鼠标左侧/中间 按钮）：</strong></p><p>onmousedown<br>onmouseup<br>onclick<br>与 onmousedown 事件相关连得事件发生次序 (鼠标右侧按钮):</p><p>onmousedown<br>onmouseup<br>oncontextmenu<br>语法<br>在 HTML 中:</p><pre><code>&lt;element onmousedown=&quot;SomeJavaScriptCode&quot;&gt;</code></pre><p>在 JavaScript 中:</p><pre><code>object.onmousedown=function(){SomeJavaScriptCode};</code></pre><hr><p><strong>与 onkeydown 事件相关联的事件触发次序:</strong></p><p>onkeydown<br>onkeypress<br>onkeyup<br>语法<br>HTML 中:</p><pre><code>&lt;element onkeydown=&quot;SomeJavaScriptCode&quot;&gt;</code></pre><p>JavaScript 中:</p><pre><code>object.onkeydown=function(){SomeJavaScriptCode};</code></pre><hr><h4 id="JQuery-Mobile-Tap"><a href="#JQuery-Mobile-Tap" class="headerlink" title="JQuery Mobile Tap"></a>JQuery Mobile Tap</h4><p>和JQuery差不多了</p><p>tap 事件在用户敲击某个元素时触发。</p><p>点一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).on(&quot;tap&quot;,function()&#123;</span><br><span class="line">  $(this).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>jQuery Mobile Taphold，taphold 事件在用户敲击某个元素并保持一秒时被触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).on(&quot;taphold&quot;,function()&#123;</span><br><span class="line">  $(this).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery Mobile Swipe,，swipe 事件在用户在某个元素上水平滑动超过 30px 时被触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).on(&quot;swipe&quot;,function()&#123;</span><br><span class="line">  $(&quot;span&quot;).text(&quot;Swipe detected!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery Mobile Swipeleft，swipeleft 事件在用户在某个元素上从左滑动超过 30px 时被触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).on(&quot;swipeleft&quot;,function()&#123;</span><br><span class="line">  alert(&quot;You swiped left!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery Mobile Swiperight，swiperight 事件在用户在某个元素上从右滑动超过 30px 时被触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).on(&quot;swiperight&quot;,function()&#123;</span><br><span class="line">  alert(&quot;You swiped right!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> web-front </tag>
            
            <tag> 游戏 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180330 今天去了NOBIBI 很开心</title>
      <link href="/2018/03/30/20180330-%E4%BB%8A%E5%A4%A9%E5%8E%BB%E4%BA%86NOBIBI-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/30/20180330-%E4%BB%8A%E5%A4%A9%E5%8E%BB%E4%BA%86NOBIBI-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨有早操，上午英语课，听写没抽着我，又失去一次加分机会</p><p>算法，炸了，背包问题要考回头背了，剩下的，操他妈比的</p><p>昨天没睡好，很困，中午睡到三点半，测量学的课和实习都没去</p><p>醒了去健身，到六点</p><p>晚上图书馆闭馆，去光谷转了转，去了一家叫NOBIBI的网红店，店面极小，里面乘十个人就满了，不在步行街里面，地图上标的是个狗屁，找了好久，在街外</p><p>晚上没有冰激凌，气泡水很好看，上面是蓝下面是粉很好看，搅一搅后变成灰色，听说那的吃的颜值都很高</p><p>拍了一张摇之前的，有蓝有粉的</p><p><img src="/img/content/huangxudong.png" alt="黄旭东与孙一峰"></p><p>放错图了不好意思</p><p><img src="/img/content/qipaoshui.png" alt="气泡水"></p><p>真无聊</p><hr><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>今天状态不好，没有怎么编程，完善了下校园卡充值页面</p><p>用的WEUI，无非就是调调接口，再稍加排版，值得一提的是，我看官网demo的标题很不错，想拿来用用，但看源码发现那不是可调用借口之内的，我就直接把网页的CSS下下来，把标题那一段拿过来用，效果很好，调了调padding看起来就很好看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;title&gt;校园卡充值&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/weui/1.1.2/style/weui.min.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/jquery-weui/1.2.0/css/jquery-weui.min.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-115462869-1&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.dataLayer = window.dataLayer || [];</span><br><span class="line"></span><br><span class="line">    function gtag() &#123;</span><br><span class="line">      dataLayer.push(arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gtag(&apos;js&apos;, new Date());</span><br><span class="line"></span><br><span class="line">    gtag(&apos;config&apos;, &apos;UA-115462869-1&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;a class=&quot;weui-btn weui-btn_primary&quot; href=&quot;javascript:;&quot; id=&quot;show-confirm&quot;&gt;&lt;/a&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;password-page&quot;&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot; id=&quot;password-header&quot;&gt;</span><br><span class="line">    &lt;h1 class=&quot;title&quot;&gt;校园卡充值&lt;/h1&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;password-div&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;weui-cells&quot; style=&quot;margin-top: -5px;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell&quot;&gt;</span><br><span class="line">        &lt;!-- 输入金额 --&gt;</span><br><span class="line">        &lt;div class=&quot;weui-cell__hd&quot;&gt;&lt;label class=&quot;weui-label&quot;&gt;密码&lt;/label&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">          &lt;input class=&quot;weui-input&quot; id=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;默认为身份证号后六位&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;div class=&quot;weui-cells&quot; style=&quot;padding-top:10px;width:85%; margin: 0 auto;&quot;&gt; --&gt;</span><br><span class="line">    &lt;div class=&quot;content-padded&quot; style=&quot;margin-top: 9px&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;javascript:;&quot; class=&quot;weui-btn weui-btn_primary&quot; id=&quot;password-sure&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;weui-cells__title&quot; style=&quot;margin-top: -1px;&quot;&gt;充值成功后钱会转到过渡余额中，下一次刷卡消费后才会转入卡余额中&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;money-page&quot;&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot; id=&quot;money-header&quot;&gt;</span><br><span class="line">    &lt;h1 class=&quot;title&quot;&gt;</span><br><span class="line">      充值</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;div class=&quot;weui-cells&quot; style=&quot;margin-top: -5px;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;weui-cell&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;当前余额&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot; id=&quot;left-money&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;weui-cell&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;过渡余额&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot; id=&quot;unsettle-money&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;weui-cells__title&quot;&gt;选择金额&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;weui-cells weui-cells_radio&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;weui-cell weui-check__label&quot; for=&quot;x12&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;30&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;radio1&quot; class=&quot;weui-check&quot; id=&quot;x12&quot; checked=&quot;checked&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;weui-icon-checked money-check&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label class=&quot;weui-cell weui-check__label&quot; for=&quot;x13&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;50&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;radio1&quot; class=&quot;weui-check&quot; id=&quot;x13&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;weui-icon-checked&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label class=&quot;weui-cell weui-check__label&quot; for=&quot;x14&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;100&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;radio1&quot; class=&quot;weui-check&quot; id=&quot;x14&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;weui-icon-checked&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label class=&quot;weui-cell weui-check__label&quot; for=&quot;x15&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;p&gt;200&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__ft&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;radio1&quot; class=&quot;weui-check&quot; id=&quot;x15&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;weui-icon-checked&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;weui-cells__title&quot;&gt;其他&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;weui-cells weui-cells_form&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;weui-cell&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__hd&quot;&gt;&lt;label class=&quot;weui-label&quot;&gt;充值金额&lt;/label&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;weui-cell__bd&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;weui-input&quot; id=&quot;money-text&quot; placeholder=&quot;填写0~500的整数&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;content-padded&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;javascript:;&quot; id=&quot;charge-button&quot; class=&quot;weui-btn weui-btn_primary&quot;&gt;确认充值&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;weui-msg&quot; id=&quot;success&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;weui-msg__icon-area&quot;&gt;&lt;i class=&quot;weui-icon-success weui-icon_msg&quot;&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;weui-msg__text-area&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;weui-msg__title&quot;&gt;充值成功&lt;/h2&gt;</span><br><span class="line">    &lt;p class=&quot;weui-msg__desc&quot; id=&quot;success-left-money&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;weui-msg__opr-area&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;weui-btn-area&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;javascript:window.opener=null;window.open(&apos;&apos;,&apos;_self&apos;);window.close();&quot; class=&quot;weui-btn weui-btn_primary&quot;</span><br><span class="line">         id=&quot;close&quot;&gt;确认&lt;/a&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;weui-footer&quot;&gt;</span><br><span class="line">  &lt;p class=&quot;weui-footer__text&quot;&gt;点石团队 ©&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;init-jssdk.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&apos;text/javascript&apos; src=&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/jquery-weui/1.2.0/js/jquery-weui.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>jQuery写的，正则表达式拿到openid, money，ajax应用，异步调用，根据返回的res回调，这个以后再系统写，比较展现我的想象力的是从用户选择的充值金额标签中拿到金额，一堆DOM操作，硬是找着了金额p标签里的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">function getQueryString(name) &#123;</span><br><span class="line">  var reg = new RegExp(&apos;(^|&amp;)&apos; + name + &apos;=([^&amp;]*)(&amp;|$)&apos;, &apos;i&apos;);</span><br><span class="line">  var r = window.location.search.substr(1).match(reg);</span><br><span class="line">  if (r != null) &#123;</span><br><span class="line">    return unescape(r[2]);</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function validMoney(money) &#123;</span><br><span class="line">  var reg = new RegExp(&quot;^[0-9]+(.[0-9]&#123;1&#125;)?$&quot;);</span><br><span class="line">  return reg.test(money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.showLoading = function (text) &#123;</span><br><span class="line">  var html = &apos;&lt;div class=&quot;weui_loading&quot;&gt;&apos;;</span><br><span class="line">  for (var i = 0; i &lt; 12; i++) &#123;</span><br><span class="line">    html += &apos;&lt;div class=&quot;weui_loading_leaf weui_loading_leaf_&apos; + i + &apos;&quot;&gt;&lt;/div&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  html += &apos;&lt;/div&gt;&apos;;</span><br><span class="line">  html += &apos;&lt;p class=&quot;weui_toast_content&quot;&gt;&apos; + (text || &quot;数据加载中&quot;) + &apos;&lt;/p&gt;&apos;;</span><br><span class="line">  show(html, &apos;weui_loading_toast&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.hideLoading = function () &#123;</span><br><span class="line">  hide();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">  var openid = getQueryString(&quot;openid&quot;);</span><br><span class="line">  var code = getQueryString(&quot;code&quot;);</span><br><span class="line">  var password = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  $(&quot;#money-page&quot;).hide();</span><br><span class="line">  $(&quot;#success&quot;).hide();</span><br><span class="line"></span><br><span class="line">  $(&quot;#money-text&quot;).focus(function (event) &#123;</span><br><span class="line">    $(&quot;span&quot;).hide();</span><br><span class="line">  &#125;).focusout(function (event) &#123;</span><br><span class="line">    $(&quot;span&quot;).show();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  if (openid == null) &#123;</span><br><span class="line">    location.replace(&quot;http://time-capsule.icug.net.cn/qrcode.html&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  var mytime = new Date();</span><br><span class="line">  if (mytime.getHours() &gt; 23 || mytime.getHours() &lt; 6 || (mytime.getHours() == 22 &amp;&amp; mytime.getMinutes() &gt;= 30)) &#123;</span><br><span class="line">    $.alert(&quot;请注意，22:30到6:00间系统无法充值，仅可查询一卡通余额。&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $(&quot;#password-sure&quot;).click(function () &#123;</span><br><span class="line">    password = $(&quot;#password&quot;).val();</span><br><span class="line">    if (!password) &#123;</span><br><span class="line">      $.toast(&quot;请输入密码&quot;, &quot;cancel&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    $.showLoading();</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: &quot;http://card-service.icug.net.cn/accountinformation?&quot; + &quot;openid=&quot; + openid + &quot;&amp;pwd=&quot; + password,</span><br><span class="line">      type: &quot;GET&quot;,</span><br><span class="line">      dataType: &quot;json&quot;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        $.hideLoading();</span><br><span class="line">        if (res.status == 0) &#123;</span><br><span class="line">          $.toast(&quot;登录成功&quot;)</span><br><span class="line">          $(&quot;#password-page&quot;).toggle();</span><br><span class="line">          $(&quot;#money-page&quot;).toggle();</span><br><span class="line">          balance = parseInt(res.db_balance);</span><br><span class="line">          unsettleMoney = parseInt(res.unsettle_amount);</span><br><span class="line">          dislplay_balance = (balance / 100) + &quot; 元&quot;;</span><br><span class="line">          dislplay_unsettle = (unsettleMoney / 100) + &quot; 元&quot;;</span><br><span class="line">          $(&quot;#left-money&quot;).replaceWith(dislplay_balance);</span><br><span class="line">          $(&quot;#unsettle-money&quot;).replaceWith(dislplay_unsettle);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          $.toast(&quot;查找不到用户&quot;, &quot;cancel&quot;);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      error: function (res) &#123;</span><br><span class="line">        $.hideLoading();</span><br><span class="line">        $.toast(&quot;网络故障，请重试&quot;, &quot;cancel&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#charge-button&quot;).click(function () &#123;</span><br><span class="line">    var money = $(&quot;#money-text&quot;).val();</span><br><span class="line">    if (money == &quot;大智最帅&quot;) &#123;</span><br><span class="line">      $.toast(&quot;我觉得也是&quot;);</span><br><span class="line">      $(&quot;#money-text&quot;).val(&quot;&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!validMoney(money) &amp;&amp; money != &quot;&quot;) &#123;</span><br><span class="line">      $.toast(&quot;请输入正确格式的金额&quot;, &quot;cancel&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (parseInt(money) &gt; 500 || parseInt(money) &lt; 0) &#123;</span><br><span class="line">      $.toast(&quot;金额不符合要求&quot;, &quot;cancel&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果没有填写，则找到选择的金额</span><br><span class="line">    if (money == &quot;&quot;) &#123;</span><br><span class="line">      var money = $(&quot;:checked&quot;).parent().prev().children(&apos;p&apos;).text();</span><br><span class="line">      ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    money = parseFloat(money);</span><br><span class="line">    money *= 100;</span><br><span class="line">    password = $(&quot;#password&quot;).val();</span><br><span class="line">    console.log(money);</span><br><span class="line"></span><br><span class="line">    $.confirm(&quot;确认充值&quot; + money / 100 + &quot;元吗？&quot;,</span><br><span class="line">      function () &#123;</span><br><span class="line">        $.showLoading();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url: &quot;http://card-service.icug.net.cn/accountmoney&quot;,</span><br><span class="line">          type: &quot;POST&quot;,</span><br><span class="line">          dataType: &quot;json&quot;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            &quot;openid&quot;: openid,</span><br><span class="line">            &quot;pwd&quot;: password,</span><br><span class="line">            &quot;money&quot;: money</span><br><span class="line">          &#125;,</span><br><span class="line">          success: function (res) &#123;</span><br><span class="line">            $.hideLoading();</span><br><span class="line">            if (res.status == 0) &#123;</span><br><span class="line">              $(&quot;#money-page&quot;).hide();</span><br><span class="line">              $(&quot;#success&quot;).show();</span><br><span class="line">              var newMoney = parseFloat(beforeMoney) + parseInt(money / 100);</span><br><span class="line">              $(&quot;#success-left-money&quot;).html(&quot;已成功充值&quot; + money / 100 + &quot;元，下次消费后转入卡余额中&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              console.log(money);</span><br><span class="line">              console.log(res.status);</span><br><span class="line">              $.toast(&quot;充值失败&quot;, &quot;cancel&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          error: function (res) &#123;</span><br><span class="line">            $.hideLoading();</span><br><span class="line">            $.toast(&quot;网络故障，请重试&quot;, &quot;cancel&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      function () &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>jssdk，上面的其实没啥技术含量，都是划水，下面这个是关键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">  var timestamp;</span><br><span class="line">  var nonceStr = &quot;&quot;;</span><br><span class="line">  var signature = &quot;&quot;;</span><br><span class="line">  var is_applied = &quot;&quot;;</span><br><span class="line">  var appid = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: &apos;post&apos;,</span><br><span class="line">    url: &apos;https://api.network.cugapp.com/api/platform/wechat/mp/mixed/get_jssdk_config_and_userinfo&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      &apos;mp_wechat_id&apos;: &quot;cugapp&quot;,</span><br><span class="line">      &apos;url&apos;: window.location.href</span><br><span class="line">    &#125;,</span><br><span class="line">    async: false,</span><br><span class="line">    cache: false,</span><br><span class="line">    dataType: &apos;JSON&apos;,</span><br><span class="line">    success: function (data) &#123;</span><br><span class="line">      var jssdklist = data.jssdk_sign_package;</span><br><span class="line">      console.log(jssdklist);</span><br><span class="line">      timestamp = jssdklist.timestamp;</span><br><span class="line">      nonceStr = jssdklist.nonceStr;</span><br><span class="line">      signature = jssdklist.signature;</span><br><span class="line">      appid = jssdklist.appId;</span><br><span class="line">      wx.config(&#123;</span><br><span class="line">        debug: false,</span><br><span class="line">        appId: appid,</span><br><span class="line">        timestamp: timestamp,</span><br><span class="line">        nonceStr: nonceStr,</span><br><span class="line">        signature: signature,</span><br><span class="line">        jsApiList: [&apos;checkJsApi&apos;,</span><br><span class="line">          &apos;onMenuShareTimeline&apos;,</span><br><span class="line">          &apos;onMenuShareAppMessage&apos;,</span><br><span class="line">          &apos;onMenuShareQQ&apos;,</span><br><span class="line">          &apos;onMenuShareWeibo&apos;,</span><br><span class="line">          &apos;onMenuShareQZone&apos;,</span><br><span class="line">          &apos;hideMenuItems&apos;,</span><br><span class="line">          &apos;showMenuItems&apos;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  var u_title = &quot;角闪石君帮您充值一卡通&quot;;</span><br><span class="line">  var u_desc = &quot;一个微小的非官方地大一卡通充值页面&quot;</span><br><span class="line">  var u_link = &quot;https://confession.cugapp.com/Confession/?work_url=http://pages.icug.net.cn/charge/index.html&quot;;</span><br><span class="line">  var u_img_link = &quot;http://time-capsule.icug.net.cn/img/avatar.jpg&quot;;</span><br><span class="line"></span><br><span class="line">  wx.ready(</span><br><span class="line">    function () &#123;</span><br><span class="line">      wx.onMenuShareAppMessage(&#123;</span><br><span class="line">        title: u_title,</span><br><span class="line">        desc: u_desc,</span><br><span class="line">        link: u_link,</span><br><span class="line">        imgUrl: u_img_link,</span><br><span class="line">        trigger: function (res) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          alert(&apos;已分享&apos;);</span><br><span class="line">          ga(&apos;send&apos;, &apos;event&apos;, &apos;jssdk&apos;, &apos;Share&apos;, &apos;Friend&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: function (res) &#123;</span><br><span class="line">          alert(&apos;已取消&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口</span><br><span class="line"></span><br><span class="line">      wx.onMenuShareTimeline(&#123;</span><br><span class="line">        title: u_title,</span><br><span class="line">        desc: u_desc,</span><br><span class="line">        link: u_link,</span><br><span class="line">        imgUrl: u_img_link,</span><br><span class="line">        trigger: function (res) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          alert(&apos;已分享&apos;);</span><br><span class="line">          ga(&apos;send&apos;, &apos;event&apos;, &apos;jssdk&apos;, &apos;Share&apos;, &apos;TimeLine&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: function (res) &#123;</span><br><span class="line">          alert(&apos;已取消&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口</span><br><span class="line"></span><br><span class="line">      wx.onMenuShareQQ(&#123;</span><br><span class="line">        title: u_title,</span><br><span class="line">        desc: u_desc,</span><br><span class="line">        link: u_link,</span><br><span class="line">        imgUrl: u_img_link,</span><br><span class="line">        trigger: function (res) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        complete: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          alert(&apos;已分享&apos;);</span><br><span class="line">          ga(&apos;send&apos;, &apos;event&apos;, &apos;jssdk&apos;, &apos;Share&apos;, &apos;QQ&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: function (res) &#123;</span><br><span class="line">          alert(&apos;已取消&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      wx.onMenuShareWeibo(&#123;</span><br><span class="line">        title: u_title,</span><br><span class="line">        desc: u_desc,</span><br><span class="line">        link: u_link,</span><br><span class="line">        imgUrl: u_img_link,</span><br><span class="line">        trigger: function (res) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        complete: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          alert(&apos;已分享&apos;);</span><br><span class="line">          ga(&apos;send&apos;, &apos;event&apos;, &apos;jssdk&apos;, &apos;Share&apos;, &apos;Weibo&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: function (res) &#123;</span><br><span class="line">          alert(&apos;已取消&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      wx.onMenuShareQZone(&#123;</span><br><span class="line">        title: u_title,</span><br><span class="line">        desc: u_desc,</span><br><span class="line">        link: u_link,</span><br><span class="line">        imgUrl: u_img_link,</span><br><span class="line">        trigger: function (res) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        complete: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          alert(&apos;已分享&apos;);</span><br><span class="line">          ga(&apos;send&apos;, &apos;event&apos;, &apos;jssdk&apos;, &apos;Share&apos;, &apos;Qzone&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: function (res) &#123;</span><br><span class="line">          alert(&apos;已取消&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">          alert(JSON.stringify(res));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 校园卡充值 </tag>
            
            <tag> jssdk </tag>
            
            <tag> NOBIBI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180329 今天挺暖和的 很开心</title>
      <link href="/2018/03/29/20180329-%E4%BB%8A%E5%A4%A9%E6%8C%BA%E6%9A%96%E5%92%8C%E7%9A%84-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/29/20180329-%E4%BB%8A%E5%A4%A9%E6%8C%BA%E6%9A%96%E5%92%8C%E7%9A%84-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨早操，吃饭，上毛概，一个不管事的教授听课，继续写游戏，重新翻出来了之前的Canvas那本书，照着书上最后一个实例改</p><p>顺便看了下前两天的Wegeek大赛的说明，注册了小程序开发账号，下了小程序开发者工具，它是用WXML/WXSS/JS编写的，说白了就是前端的变种，感觉不难，接口好找，教程清晰</p><p>小程序开发大赛是由商户出题，暂时还猜不到会是什么样的题，但多半是实用性的功能性的，比如U净洗衣的小程序</p><p>但是肯定不能是那么简单的功能，因为那样不能给用户一个替代公众号的理由，除了它能添加到桌面快捷方式</p><p>敲代码被老师关照，但不止我一个人在用电脑，老师走后继续敲，后来马被叫起来回答问题，回答还行，之后也没管我用电脑</p><p>嵌入式系统开发，郭明强存在感极低</p><p>傻吊同桌给我推荐了个app，移动端的电音板，我之前在B站见过，很好玩，找到了Undertal的BGM <strong>狂妄之人</strong>，敲的风生水起</p><p>吃饭，睡觉，叫大鸡哥健身，洗澡，吃饭，和屁哥去图书馆，他说有人帮忙占了两个位置，带我去，结果是个妹子帮他占的，人家俩面对面，我坐一边，啥几把玩意</p><p>图书馆里写游戏，学Canvas，很头疼，博客都没写完，现在闭馆，回寝室接着写</p><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>webkit</p><p>一个开源的浏览器引擎，Safari/Chorme，同时也是苹果Mac OS X系统引擎框架版本的名称</p><p>moz</p><p>firefox内核</p><p>ms</p><p>IE浏览器的</p><p>o</p><p>opera的</p><hr><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>border-radius 只有在以下版本的浏览器：Firefox4.0+、Safari5.0+、Google Chrome 10.0+、Opera 10.5+、IE9+ 支持 border-radius 标准语法格式，对于老版的浏览器，border-radius 需要根据不同的浏览器内核添加不同的前缀，比说 Mozilla 内核需要加上“-moz”，而 Webkit 内核需要加上“-webkit”等，但是IE和Opera没有私有格式，因此为了最大程度的兼容浏览器，我们需要设置如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-border-radius: 10px 20px 30px; </span><br><span class="line">-moz-border-radius: 10px 20px 30px; </span><br><span class="line">border-radius: 10px 20px 30px;</span><br></pre></td></tr></table></figure><hr><p>margin  4个参数是上右下左  2个是上下/左右</p><hr><h3 id="键值"><a href="#键值" class="headerlink" title="键值"></a>键值</h3><p>a~z 65~90，←37，↑38，→39，下40</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arrowLeft = 37;</span><br><span class="line">var arrowUp = 38;</span><br><span class="line">var arrowRight = 39;</span><br><span class="line">var arrowDown = 40;</span><br></pre></td></tr></table></figure><p>以上代码为每个箭头对应的键值分配了一个变量，称作枚举</p><hr><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>做游戏</p><p>做了三个小时，首先一个很大的问题，我做出来的有重影，而且玩家和官方的demo的速度明显不一样，我的要快很多，考虑过清除过去动画产生的图像，用了ClearRect，但是没用，即使动画没有进行，也有重影，重影大小和它的速度有关</p><p>和官方的对比后，发现出了调用顺序不一样，剩下的都一样，拷过来动画部分，没问题了</p><p>虽然不知道是什么造成的，但也勉强算是解决了</p><p>贴一张三个小时速成的小游戏的图</p><p><img src="/img/content/game1.png" alt="游戏的第一个图"></p><p>就打算拿这个做下去了</p><p>预计<strong>两个月</strong>做完</p><ul><li>Q: 什么类型的游戏</li><li>A: 跑酷</li><li>Q: 画质</li><li>A: 别想了，肯定全是几何图形，我会画个啥</li><li>Q: 音乐</li><li>A: 我会精心选的</li><li>Q: 谁可以玩到这个游戏</li><li>A: 都可以，只是极少人可以玩完整版，大部分人只能玩闯关类型的单个关卡</li><li>Q: 为什么做这个游戏</li><li>A: 还是沉浸在过去，很难受，发泄情绪</li><li>Q: 亮点</li><li>A: 音乐的契合和极其夸张的创意，后者是关键，因为自己瞎做着玩，不考虑普遍用户体验，所以我可以 <strong>怎么爽怎么做</strong>，</li></ul><hr><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>所有障碍物没有随机生成的，全是设定好的</p><p>伪跑酷，以时间为轴，玩家水平不动只能上下动，障碍物从屏幕右侧外部向左移动，提前设置好所有障碍物位置，之后按顺序进入场景，如何控制进入时间呢？一种是计时器，一种是速度不变用距离设置时间，一种是参照前一个障碍物退出屏幕的时间，它一旦退出，就从数组移除，检测它是否在数组里来控制下一个障碍物进入时间，这样缺点是一旦一个变动，整体都要变动，我更倾向于计时器方案</p><p>一个数组，用于存障碍物，每种障碍物存一个数组，声明一个含多个属性的对象，每次设定一个障碍物就实例化一个对象，push到数组里</p><p>有多种形态，暂定四种</p><p>方形，圆，折线，曲线</p><p>游戏也会有多种干扰因素，最简单的例子是，重力颠倒，除此之外还有许多种</p><hr><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>不能直接用canvas操作，拿到其中的2d画布，用context操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var canvas = $(&quot;#gameCanvas&quot;);</span><br><span class="line">var context = canvas.get(0).getContext(&quot;2d&quot;);</span><br></pre></td></tr></table></figure></p><p>animate，每0.033毫秒调用一次重置画布，重新规划每个元素的位置的效果，检测碰撞，速度，加速度，摩擦力，达到动画的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//画图形，填充</span><br><span class="line">    context.fillStyle = &quot;rgb(255, 0, 0)&quot;;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.moveTo(player.x+player.halfWidth, player.y);</span><br><span class="line">    context.lineTo(player.x-player.halfWidth, player.y-player.halfHeight);</span><br><span class="line">    context.lineTo(player.x-player.halfWidth, player.y+player.halfHeight);</span><br><span class="line">    context.closePath();</span><br><span class="line">    context.fill();</span><br></pre></td></tr></table></figure><p>障碍物的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var Asteroid = function (x, y, radius, vX) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    this.radius = radius;</span><br><span class="line">    this.vX = vX;</span><br><span class="line">  &#125;;</span><br><span class="line">  var Player = function (x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    this.width = 24;</span><br><span class="line">    this.height = 24;</span><br><span class="line">    this.halfWidth = this.width / 2;</span><br><span class="line">    this.halfHeight = this.height / 2;</span><br><span class="line">    this.vX = 0;</span><br><span class="line">    this.vY = 0;</span><br><span class="line">    // this.moveRight = false;</span><br><span class="line">    this.moveUp = false;</span><br><span class="line">    // this.moveDown = false;</span><br><span class="line">    this.flameLength = 20;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>初始化并推到数组里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; numAsteroids; i++) &#123;</span><br><span class="line">    var radius = 5 + (Math.random() * 10); // 5~15</span><br><span class="line">    var x = canvasWidth + radius + Math.floor(Math.random() * canvasWidth);</span><br><span class="line">    var y = Math.floor(Math.random() * canvasHeight);</span><br><span class="line">    var vX = -5 - (Math.random() * 5);</span><br><span class="line">    asteroids.push(new Asteroid(x, y, radius, vX));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以及用牛二牛三定律实现的物理系统，这里不多解释，最恶心的是动量守恒，很长的公式，要疯了</p><p>今天就这些</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> canvas </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180328 今天看着朋友被学姐要微信号 很开心</title>
      <link href="/2018/03/28/20180328-%E4%BB%8A%E5%A4%A9%E7%9C%8B%E7%9D%80%E6%9C%8B%E5%8F%8B%E8%A2%AB%E5%AD%A6%E5%A7%90%E8%A6%81%E5%BE%AE%E4%BF%A1%E5%8F%B7-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/28/20180328-%E4%BB%8A%E5%A4%A9%E7%9C%8B%E7%9D%80%E6%9C%8B%E5%8F%8B%E8%A2%AB%E5%AD%A6%E5%A7%90%E8%A6%81%E5%BE%AE%E4%BF%A1%E5%8F%B7-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>昨天晚上睡不着，听了许多遍千本樱，吉他的</p><p>网易云曾经有这首歌的版权，当时我下载了，现在没有版权无法收藏，但我想把它加到歌单里，mac上无法导入本地的歌，也不能导入网盘的，但可以下载已经从网盘收藏的歌，我把它下载了，裁剪让网易云识别不出来（改名没用），导入本地，上传云盘，从云盘收藏至歌单，在mac上从歌单下载，完美</p><p>早晨有早操，排球课打的胳膊疼，占了个有树荫的地不算晒，听力课没啥可说的，中午吃北街的鸡公煲很好吃，下午在图书馆，重写了校园卡充值，我拿自己和别人的openid测试可以用，能充钱，但这个发光的角闪石要注销了，等新公众号再用我的，大概吧</p><p>晚上健身，上了69，这个星期上71，然后稳定住</p><p><img src="/img/content/jianshen1.jpg" alt="jianshendetu"></p><p>今天眼睛有点累，没写多少</p><hr><h3 id="关于游戏"><a href="#关于游戏" class="headerlink" title="关于游戏"></a>关于游戏</h3><p>横版跑酷游戏，是让玩家水平位置不动，障碍物向左移动，整个画布位置不动好，还是让障碍物不动，画布极长，玩家向右动同时屏幕向右和玩家保持相对平衡好</p><p>我更倾向于第一种</p><h3 id="SDK-与-API"><a href="#SDK-与-API" class="headerlink" title="SDK 与 API"></a>SDK 与 API</h3><p>一开始搞不懂SDK指什么，后来看了一个逼乎老哥的答案，瞬间明白了</p><blockquote><p> 你是个男的<br>你要开发一个<br>BABY<br>SDK<br>就是房间、床、你老婆等一系列相关的工具、文档<br>API<br>就是你老婆开放的接口</p></blockquote><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>Application Programming Interface</p><p>编写应用程序的接口，抽象概念</p><p>翻译成中文就是”应用程式介面”，其实这样翻译不好，应该说是”程式沟通介面”。翻译为介面，顾名思义就要沟通两个不同的东西用的，通常由一组函式库所组成。在一个 同一个平台 下的 两个不同东西(程式 or 系统)，为了能取用对方的功能等等，所以一个 X程式 写了一组函式，让 同一平台的其他程式 取用 X程式 的功能，那组函式就可以说是那个 X程式 对外开放的 API。</p><h4 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h4><p>Software Development Kit</p><p>使用某种语言来暴露API，提供头文件、库文件、工具（通常不是IDE）和范例</p><p>SDK (Software Development Kit)翻译成中文就是”软体开发工具组”是用来帮一个 产品 或 平台 开发应用程式的工具组，由产品的厂商提供给开发者使用的。通常是 某一家厂商 针对某一 平台 或 系统 或 硬体 所发佈出来用以开发应用程式的工具组，在这个工具包裡面，可能包含了各式各样的开发工具，模拟器等。例如：给 Android平台 使用的 Android SDK 就是用来开发 Android系统上面的应用程式。</p><p>可以理解为，SDK包括API</p><p>最近遇到的是微信的jsSDK</p><p>微信JS-SDK是微信公众号平台面向网页开发这提供基于微信内的网页开发工具包。接口大类分为：基础接口、分享接口、图像接口、音频接口、智能接口、设备信息、地址位置、摇一摇周边、界面操作、微信扫一扫、微信小店、微信卡劵和微信支付。一般使用频率高的就是分享接口、地理微信、微信扫一扫和微信支付。</p><p>文档勉强能看懂</p><p>改天弄个公众号玩玩sdk，正好室友就在做家教公众号的，回头问问他们能不能借来搞搞</p><h3 id="抖音-qq-微信-微博"><a href="#抖音-qq-微信-微博" class="headerlink" title="抖音 qq 微信 微博"></a>抖音 qq 微信 微博</h3><p>微博封杀抖音今日爆出，微博并不是第一个这么干的</p><p>其实还有个说法，在抖音被封杀之前，抖音已经杀掉了所有同用户群体的竞品</p><p>快手和抖音并不是你死我活的关系，事实上快手现在7000万，抖音6000万，你们以为抖音杀了快手，只是因为你们不在快手的圈子里，快手仍然是四五线城市的主流社交软件，而抖音更多的是潮流的年轻人，虽然是同一类型，并不是一个群体</p><p>以下是整理媒体信息的内容</p><hr><p>“微信朋友圈屏蔽抖音”、“QQ空间屏蔽抖音”……继近日微博封杀抖音分享页之后，以微信、QQ为代表的腾讯系再次被媒体抛出，成为大众眼下任人指摘的对象。</p><p>据有关媒体报道，知情人士称，微信朋友圈分享量超临界值后，每晚九点左右所转发抖音链接到朋友圈后仅自己可见，同时，把抖音链接分享至QQ空间，一分钟后该条朋友圈便只能自己可见，目前，QQ空间采取的是24小时封杀。</p><p>随后，这一消息得到了腾讯公关总监张军的回应：“（微信）朋友圈一直有防刷屏机制，过了阀（阈）值就自动不可见，过凌晨12点自动恢复正常，屏蔽之说不存在。”</p><p>640?wx_fmt=png</p><p>微信方面也回应称：为避免链接刷屏影响朋友圈阅读体验，微信对朋友圈内链接的传播设有防刷屏限制；以天为计算单位，若链接在朋友圈分享次数触发当日上限，将自动被屏蔽处理，次日可恢复正常。</p><p>而关于“QQ空间屏蔽抖音”事件，腾讯相关负责人也向媒体回应称：“并不存在QQ空间封杀抖音，系用户系统Bug。”</p><p>阈值，即临界值，是指一个效应能够产生的最低值或最高值。据了解，上一次引发微信单天分享临界值的还是去年冬天刷爆朋友圈的《罗一笑，你给我站住》，当时，该文阅读量猛增触发了系统Bug，导致“赞赏资金单日5万限制”的功能失效。</p><p>而笔者也进行了一番尝试，并未出现上述屏蔽现象。</p><p>至此，尽管腾讯方的辩解似乎句句在理，但接二连三的“头条系”被封杀事件却是耐人寻味。就在本月初，微信曾因“禁止诱导分享行为”屏蔽过今日头条的链接，这似乎无法解释所有问题。</p><p>2017年9月前后，消息显示，被腾讯一手杀死的亲儿子“微视”似乎复活了。</p><p>据氢媒工场透露，微视选择卷土重来，据说在腾讯内部下达了死命令，要求加速发力微视。</p><p>今年两会期间，马化腾在接受《中国日报》记者提问时表示，已经注意到短视频，正在探索发展短视频、直播等新型社交平台。“社交与短视频和直播如何结合，这是值得关注的。”</p><p>640?wx_fmt=jpeg</p><p>图片来源于网络</p><p>回到短视频这个领域，曾经沦为“弃子”的微视再度复活，不由得让外界对腾讯关于短视频的态度有了新的猜测：腾讯从来没有离开过短视频赛道。</p><p>2013年9月，腾讯微视上线，定位8秒短视频分享社区，用户可以通过QQ、微信等方式登录；除了在其中分享拍摄的短视频之外，还可以将内容同步分享到微信好友、朋友圈等。然而，短视频市场的不温不火，作为腾讯系的一块内容产品定位却又不清不楚，加之腾讯放弃了新浪微博，并战略投资快手之后，去年4月，微视被关停。</p><p>自媒体人罗超评论称，</p><p>“短视频对于腾讯的泛文娱或者大内容战略而言，都不可或缺。腾讯的社交网络平台本身就需要大量的内容来填充，公众号、企鹅号、音乐、视频、文学、动漫，无一不是这样的大内容，而短视频作为一种被用户越来越依赖的内容形态，自然要被腾讯倚重。</p><p>腾讯可能会将搜索、电商等‘半条命’交给合作伙伴，但对于与核心战略强相关的业务如媒体、视频、音乐、短视频、直播等等，不可能全然依赖第三方力量。”</p><p>在这里“既有利益权衡，又有制衡考量”。</p><p>换句话说，钱是可以出的，但流量是万万不能出让。原先用户获取信息的渠道主要是通过报纸、电视、收音机等，随着流量资费等问题的逐步消解，在手机上同样阅读一段内容信息，为什么不能是视频呢？</p><p>这样看来，微视回归的第一步是与QQ空间打通，未来将与天天快报、腾讯新闻、手机QQ等入口级产品整合。</p><p>相比之下，阿里和百度后知后觉只能匆忙选择土豆和好看视频入局。既然腾讯早已有所布局，在看到头条孵化的抖音、西瓜视频、火山小视频纷纷爆红后，很难说不是一种应激防御。</p><p>自从抖音被微博封杀后，绝大多数网友曾拍手称好，究其原因还是在于抖音等短视频上充斥着大量“趣味性低”的视频。另一方面则是，近期抖音等平台上出现了一批公然展示假冒化妆品、山寨奢侈品的视频，它们通过留下微信号，转账发货，形成一条黑色产业链，这类视频还获得了平台推荐和用户浏览。</p><p>对平台上的人气网红而言，短视频自然是一种全新的营销方式。对于平台方而言，在逐渐熬过了用户获取的第一阶段之后，短视频产品需要的是一个流量生产、可变现的生态圈，途径之一便是“微商”。</p><p>尽管在此事件过后，抖音迅速给出回应并进行了处理，但还是让外界将目光转向了头条系产品自带的基因——算法问题，这也频频引发了用户对头条的争议。</p><p>客观来讲，今日头条已经形成了包括抖音、火山小视频、悟空问答等一系列的高用户粘性的产品矩阵，它们已悄悄占据了数亿用户大量的停留时间。</p><p>尽管算法将碎片的信息能够以更有逻辑的组织方式推荐给用户，但在真正智能化之前，仍是内容分发的绝对控制和定向的广告贩卖。显然，价值用户需要看到的是优质内容，而不是仅靠捕捉用户兴趣，不断地讨好用户。</p><p>QuestMobile 数据显示，2017年短视频独立App行业用户已突破4.1亿人，较去年同期增长率达116.5%，这或许给了背靠腾讯的微视一定的可乘之机。</p><p>据腾讯2017 Q4 财报显示，该季度网络广告业务收入同比增长49%至人民币123.61亿元，其中，媒体广告收入增长22%至人民币41.21亿元，主要受益于腾讯视频（视频流媒体服务）收入的增长。</p><p>据了解，在过去的6个月里，腾讯先后投资了新丽传媒、快手、斗鱼直播、虎牙直播，也足以看出，在游戏业务之外，腾讯正有意将视频作为腾讯新的增长点，并同时作为新入口反哺游戏、电竞等泛娱乐活动的用户增长。</p><p>实际上，在流量获取成本日趋增高的当下，移动互联网的几乎每个细分赛道上都出现了头部产品，与此同时，用户安装App热情降低，应用开发商上线新应用的拉新成本随之提高。短视频究竟能火多久？或者说，短视频产品将如何避免沦为现象级产品？去年年初，微信小程序的出现激起了整个市场的强势反攻，如今“轻应用”、“快应用”的声音不绝于耳，支付宝也悄悄上线了小程序，在微信小程序格局未来尚未明朗的情况下，腾讯自然也不会甘于仅作第三方。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 校园卡充值 </tag>
            
            <tag> jssdk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180327 今天开始规划游戏 很开心</title>
      <link href="/2018/03/27/20180327-%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%86%99%E8%A7%84%E5%88%92%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/27/20180327-%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%86%99%E8%A7%84%E5%88%92%E6%B8%B8%E6%88%8F-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨吃了俩鸡蛋，一个咸的，一个不是咸的</p><p>今天的课跟没上一样，一节毛概给你洗脑整的跟传销一样，让敲代码大半节课被老师戳后背，一节嵌入式，总算讲有用的了，安卓开发，就是听不见讲课的声音</p><p>中午和那谁又敲了会，十二点多去吃</p><p>睡到三点多</p><p>然后照例健身一个半小时，和俩朋友，带着一个新来的骑单车</p><p>动感单车天下第一！！！</p><p>健完身洗澡吃饭和俩朋友刷步道乐跑回去吃苹果去图书馆敲代码到现在</p><p>想着重写校园卡充值，替代现在的，应该能做的比现在的好看点，逻辑也更能好点</p><p>明天看看接口还能不能用</p><hr><h3 id="HTML5-template标签"><a href="#HTML5-template标签" class="headerlink" title="HTML5 template标签"></a>HTML5 template标签</h3><p>关于template，这是HTML5的新特性，当使用String-base的模板引擎时（如Handlebar.js），要么通过外部文件存放模板文本，用XHR或script标签加载进来，要么通过<script type="text/x-template"></script>直接写在当前页面上</p><p>现在，HTML5提供了一个template标签，用于存放模板文本，简单来说，这个更屌</p><p>首先要明确模板文档具有以下2个要求：</p><ol><li>&lt;&gt; “‘ 不被转成字符实体；</li><li>含src特性的img标签不触发资源请求。</li></ol><p>下面是常用的存放方式：</p><h5 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 模板文本</span><br><span class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/x-template&quot;&gt;</span><br><span class="line">&lt;img src=&quot;dummy.png&quot; title=&quot;&#123;&#123;title&#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 获取模板</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">// 不能通过innerText获取，因为innerText无法获取&lt;img/&gt;等标签字符</span><br><span class="line">var tpl = document.getElementById(&apos;tpl&apos;).innerHTML</span><br><span class="line">tpl = tpl.replace(/^[\s\u3000]*|[\s\u3000]*$/, &apos;&apos;)</span><br><span class="line">Handlebars.compile(tpl)(&#123;title: &apos;test&apos;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>若模板中包含标签会造成标签结束符混乱的问题，因此通过该方式存放模板时，不能包含结束标签;</li><li>script标签位置较随意，可以作为head或body的子元素。</li></ol><h5 id="textarea标签"><a href="#textarea标签" class="headerlink" title="textarea标签"></a>textarea标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 模板文本</span><br><span class="line">&lt;textarea id=&quot;tpl&quot; style=&quot;display:none;&quot;&gt;</span><br><span class="line">&lt;img src=&quot;dummy.png&quot; title=&quot;&#123;&#123;title&#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">// 获取模板</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var tplEl = document.getElementById(&apos;tpl&apos;)</span><br><span class="line">var tpl = tplEl.value</span><br><span class="line">// 通过tplEl.innerText获取也可以。但不能通过tplEl.innerHTML获取，因为它会对&lt;&gt;&quot;&apos;等转换为字符实体</span><br><span class="line">tpl = tpl.replace(/^[\s\u3000]*|[\s\u3000]*$/, &apos;&apos;)</span><br><span class="line">Handlebars.compile(tpl)(&#123;title: &apos;test&apos;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>若模板中包含标签会造成标签结束符混乱的问题，因此通过该方式存放模板时，不能包含结束标签；</li><li>textarea元素必须作为body的子孙元素。</li><li>xmp标签（语义为标识内容用作示例，现已被标准废除了，但各大浏览器依然支持该标签）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 模板文本</span><br><span class="line">&lt;xmp id=&quot;tpl&quot; style=&quot;display:none;&quot;&gt;</span><br><span class="line">&lt;img src=&quot;dummy.png&quot; title=&quot;&#123;&#123;title&#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/xmp&gt;</span><br><span class="line"></span><br><span class="line">// 获取模板</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var tplEl = document.getElementById(&apos;tpl&apos;)</span><br><span class="line">var tpl = tplEl.innerHTML</span><br><span class="line">// 通过tplEl.innerText获取也可以</span><br><span class="line">tpl = tpl.replace(/^[\s\u3000]*|[\s\u3000]*$/, &apos;&apos;)</span><br><span class="line">Handlebars.compile(tpl)(&#123;title: &apos;test&apos;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>若模板中包含标签会造成标签结束符混乱的问题，因此通过该方式存放模板时，不能包含结束标签；</li><li>xmp元素必须作为body的子孙元素。<br>由于模板文本中出现<script></script>标签的情况较少，而出现表单元素textarea标签的几率较大，而xmp标签已被废弃,因此还是通过script标签存放模板文本的方式较为常见。</li></ol><h5 id="template"><a href="#template" class="headerlink" title="template"></a>template</h5><p>  2013年定稿的template标签为我们提供一种更统一、功能更强大的模板文本存放方式。而它基本的使用方式与之前的3种方式无太大差别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 模板文本</span><br><span class="line">&lt;template id=&quot;tpl&quot;&gt;</span><br><span class="line">&lt;img src=&quot;dummy.png&quot; title=&quot;&#123;&#123;title&#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 获取模板</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var tplEl = document.getElementById(&apos;tpl&apos;)</span><br><span class="line">// 通过tplEl.innerText获取也可以</span><br><span class="line">var tpl = tplEl.innerHTML</span><br><span class="line">tpl = tpl.replace(/^[\s\u3000]*|[\s\u3000]*$/, &apos;&apos;)</span><br><span class="line">Handlebars.compile(tpl)(&#123;title: &apos;test&apos;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>若模板中包含标签会造成标签结束符混乱的问题，因此通过该方式存放模板时，不能包含结束标签;</li><li>script标签位置较随意，可以作为head或body的子元素。</li></ol><p>深入了解</p><ol><li><p>不一样的childNodes</p><p>script、textarea和xmp方式存放模板文本时，通过 tplEl.childNodes.length 均返回1， tplEl.childNodes[0].nodeName 均返回text。而template返回的是0。</p></li><li><p>伪文档片段入口——content属性</p><p>通过innerHTML或innerText属性，template内部的模板文本将被视为普通文本来使用。但template元素为我们提供了另一种使用方式，那就是“文档片段”。</p></li></ol><p>“文档片段”的[[Class]]为[object DocumentFragment]，“文档片段”具有文档片段的所有功能API，不同的是设置img元素的src属性不会发出资源请求、不执行Script和CSS规则，而[object HTMLDocument]“文档”则会发送img请求并在当前browsing context(即window对象上下文)内执行Script和CSS规则。</p><p>而我们可以通过content属性获取“文档片段”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var tplEl = document.getElementById(&apos;tpl&apos;)</span><br><span class="line">var x = tplEl.content</span><br><span class="line">var img = x.querySelector(&apos;img&apos;)</span><br><span class="line">console.log(img.src) // 显示空字符串</span><br><span class="line">console.log(img.getAttribute(&apos;src&apos;)) // 显示dummy.png</span><br><span class="line">img.src = img.getAttribute(&apos;src&apos;)</span><br><span class="line">console.log(img.src) // 显示about:blank</span><br><span class="line">复制代码</span><br><span class="line">    当添加到当前文档中才会发起资源请求。</span><br><span class="line"></span><br><span class="line">document.body.appendChild(img)</span><br><span class="line">// 发起资源请求</span><br><span class="line">console.log(tplEl.innerHTML.replace(/^[\s\u3000]*|[\s\u3000]*$/,&apos;&apos;)) //</span><br></pre></td></tr></table></figure><p>显示空白字符串由于appendChild方法实际上会对元素进行剪切操作，因此无法实现模板复用的效果。因此我们需要复制模板内的元素，然后再将元素副本添加到当前文档中。实现手段有很多种，大家可以自行了解一下。</p><p>那么怎样将整个template提供的DocumentFragment导出到当前document呢？答案就是采用IE9+才有的document.importNode方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var tplEl = document.getElementById(&apos;tpl&apos;)</span><br><span class="line">var x = tplEl.content</span><br><span class="line">var clone = document.importNode(x, true)</span><br></pre></td></tr></table></figure><hr><h3 id="番外-js-jq模板引擎-Handlebars"><a href="#番外-js-jq模板引擎-Handlebars" class="headerlink" title="番外 js/jq模板引擎 Handlebars"></a>番外 js/jq模板引擎 Handlebars</h3><p>如果要拼接html字符串</p><pre><code>var data = {        name:&apos;约翰莫里森&apos;,        home:&apos;美国&apos;,        job:&apos;摔跤手&apos;    };    var str = &quot;&quot;;    str += &quot;&lt;div&gt;姓名：&quot; + data.name + &quot;&lt;/div&gt;&quot;;    str += &quot;&lt;div&gt;出生地：&quot; + data.home + &quot;&lt;/div&gt;&quot;;    str += &quot;&lt;div&gt;职业：&quot; + data.job + &quot;&lt;/div&gt;&quot;;    $(&apos;#person_info&apos;).html(str);</code></pre><p>可以这样，双大括号里面的是即将匹配渲染的内容</p><pre><code>&lt;div id=&quot;person_info&quot;&gt;  &lt;div class=&quot;person&quot;&gt;    &lt;div&gt; 姓名：{{ name }}&lt;/div&gt;    &lt;div&gt; 出生地：{{ home }}&lt;/div&gt;    &lt;div&gt; 职业：{{ job }}&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;var data ={  name: &apos;老王八蛋&apos;,  home: &apos;美国&apos;,  job: &apos;摔跤手&apos;};var tmp1 = $(&apos;#person_info&apos;).html();var func = Handlebars.compile(tmp1);var result = func(data);$(&apos;#person_info&apos;).html(result);</code></pre><p>就讲最后四句，第一句拿html模板内容，第二句对刚取得的模板编译，返回的是一个函数，这个函数有一个参数，参数是用来匹配模板的数据，就是第三句，第四句替换内容</p><p>如果有多项数据需要展示，则需要用到</p><pre><code>{{#each this}}  {{/each}}。</code></pre><p> 语法类似标签，所以要注意别漏了闭合标签</p><pre><code>{{/each}}。 {{#each this}} ... {{/each}}</code></pre><p>中间的内容是模板。this 则是指传入函数的数据data。 </p><pre><code>&lt;body&gt;    &lt;div id = &quot;person_info&quot;&gt;        {{#each this}}        &lt;div class = &quot;person&quot;&gt;            &lt;div&gt;姓名：{{name}}&lt;/div&gt;            &lt;div&gt;出生地：{{home}}&lt;/div&gt;            &lt;div&gt;职业：{{job}}&lt;/div&gt;        &lt;/div&gt;        {{/each}}    &lt;/div&gt;&lt;/body&gt;&lt;script&gt;    var data =[{        name:&apos;约翰莫里森&apos;,        home:&apos;美国&apos;,        job:&apos;摔跤手&apos;    },    {        name:&apos;Faker&apos;,        home:&apos;韩国&apos;,        job:&apos;英雄联盟职业选手&apos;    }];    var tmpl = $(&apos;#person_info&apos;).html();    var func = Handlebars.compile(tmpl);    var result = func(data);    $(&apos;#person_info&apos;).html(result);&lt;/script&gt;</code></pre><p><strong>如果对象所包含的数据域有个别不同，需要用分支语句进行判断</strong></p><pre><code>&lt;body&gt;    &lt;div id = &quot;person_info&quot;&gt;        {{#each this}}        &lt;div class = &quot;person&quot;&gt;            &lt;div&gt;姓名：{{name}}&lt;/div&gt;            &lt;div&gt;出生地：{{home}}&lt;/div&gt;            &lt;div&gt;职业：{{job}}&lt;/div&gt;            {{#if life}}            　　&lt;div&gt;生涯经历：&lt;/div&gt;                &lt;ul&gt;                {{#each life}}                    &lt;li&gt;{{this}}&lt;/li&gt;                {{/each}}                &lt;/ul&gt;            {{/if}}        &lt;/div&gt;        {{/each}}    &lt;/div&gt;&lt;/body&gt;&lt;script&gt;    var data =[{        name:&apos;约翰莫里森&apos;,        home:&apos;美国&apos;,        job:&apos;摔跤手&apos;    },    {        name:&apos;Faker&apos;,        home:&apos;韩国&apos;,        job:&apos;英雄联盟职业选手&apos;,        life:[&apos;S3世界总冠军&apos;,&apos;S4世界总冠军&apos;,&apos;S5世界总冠军&apos;]    }];    var tmpl = $(&apos;#person_info&apos;).html();    console.log(tmpl);    var func = Handlebars.compile(tmpl);    var result = func(data);    $(&apos;#person_info&apos;).html(result);&lt;/script&gt;</code></pre><p>因为今天的Vue用到了</p><pre><code>{{#if something}} {{/if}}</code></pre><p>所以引入以上内容</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="Class-与-Style绑定"><a href="#Class-与-Style绑定" class="headerlink" title="Class 与 Style绑定"></a>Class 与 Style绑定</h4><p>#####接着上次的Class绑定</p><p>三元表达式</p><p>这样写将始终添加 errorClass，但是只有在 isActive 是 truthy 时才添加 activeClass。</p><pre><code>&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass&quot;&gt;&lt;/div&gt;</code></pre><p>truthy: 不是指true，是指可以被转化为true的内容，可以是字符串也可以是[]{}</p><p><strong>用在组件上</strong></p><p>同样适用，而且可以和组件上已经存在的并存</p><h5 id="Style-绑定"><a href="#Style-绑定" class="headerlink" title="Style 绑定"></a>Style 绑定</h5><pre><code>&lt;div v-bind:style=&quot;{ color: activeColor, fontSize + &apos;px&apos; }&quot;&gt;&lt;/div&gt;data: {  activeColor: &apos;red&apos;,  fontSize: 30}</code></pre><p>直接绑定到一个样式对象通常更好</p><pre><code>&lt;div v-bind:style=&apos;styleObject&apos;&gt;&lt;/div&gt;data: {  styleObject: {    activeColor: &apos;red&apos;,    fontSize: &apos;13px&apos;  }}</code></pre><p>数组语法</p><pre><code>&lt;div v-bind:style=&quot;[baseStyle, overridingStyles&quot;&gt;&lt;/div&gt;</code></pre><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p><strong>v-if</strong></p><p>在我们上面写到的 Handlebars 的条件块中</p><pre><code>{{#if ok}}   &lt;h1&gt;Yes&lt;/h1&gt;{{/if}</code></pre><p>在Vue中，可以用 v-if 实现同样的功能，还可以加个else块</p><pre><code>&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;&lt;h1 v-else&gt;No&lt;/h1&gt;</code></pre><p>在<template>上用v-if条件渲染分组</template></p><p>因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢，此时可以把一个 <template> 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 <template> 元素。</template></template></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> template </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 模板文本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180326 今天学Vue 很开心</title>
      <link href="/2018/03/26/20180326-%E4%BB%8A%E5%A4%A9%E5%AD%A6Vue-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/26/20180326-%E4%BB%8A%E5%A4%A9%E5%AD%A6Vue-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>发现昨天忘写流水账了，今天加上</p><p>昨天，周一，早晨升旗，升完旗理论上是不能走，但我带了波节奏带走一批人吃饭去了，班长很着急</p><p>一二节没课，弄了会博客，三四节算法，没犯困，发哥讲的很复杂，其实稍微想想就明白，前提是你要别被老师牵着鼻子走，而且智商高于平均智商</p><p>中午呼噜呼噜</p><p>下午测量学，讲的很慢，拿纸写游戏需求</p><p>测量学完了去健身，给新来的秀秀</p><p>晚上编程，nodejs告一段落，会服务器的基本操作就够应付现在了，转战Vue</p><p>仍然无聊</p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>这不是我第一次接触 Vue，之前接触过点</p><hr><h4 id="顺便说一下"><a href="#顺便说一下" class="headerlink" title="顺便说一下"></a>顺便说一下</h4><p>用于构建用户界面的渐进式框架，特点是自底向上逐层应用，核心库只关注图层，易上手，便于与第三方库和既有项目整合</p><p>Vue是未来前端框架应用的趋势</p><p>这次与上次学 Vue 比，明显理解起来更加轻松，看着不像之前云里雾里，尤其是组件系统，因为组件、Vue对象实例、HTML中的DOM之间相互有联系，再加上组件内部也互相有联系，所以理解起来比较困难，上次就卡在这里了，这次为此梳理了个图</p><p><img src="/img/content/nodejs1.jpg" alt="avatar"><br>图少了一点，key 中的todo.id id也是和groceryList 绑定的</p><p>这个图我想着要怎么上传最合适，不想占地方，最后的方法是，在qq上发个只有自己可见的说说，上传这张图，再把链接拉过来</p><p>然而被空间拦住了</p><p>还是用本地储存得了</p><p>下面范范整一下核心内容，其实就是把官网的搬过来再加上自己理解，说真的，学Vue没啥比直接看官网看API更快的。视频教程只是实在理解不下去辅助用的，最终还是回归文档</p><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">// 或</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="声明式渲染与绑定"><a href="#声明式渲染与绑定" class="headerlink" title="声明式渲染与绑定"></a>声明式渲染与绑定</h4><p>Vue.js 核心是允许采用简洁模板语法来声明式的将数据渲染进DOM的系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>很简单， 两个大括号中间括起来的是即将渲染的位置，el是绑定的元素，data是渲染的内荣</p><p>当然还能绑定元素属性（特性）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app-2&quot;&gt;</span><br><span class="line">  &lt;span v-bind:title=&quot;message&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var app2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#app-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;页面加载于 &apos; + new Date().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是绑定了title属性和message，鼠标悬停会显示title属性，这不是Vue的，这是html就有的，一开始不理解，它这里对新手有误导，换个属性，比如color就更好了</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 app2.message = ‘新消息’，就会再一次看到这个绑定了 title 特性的 HTML 已经进行了更新。</p><h4 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h4><p>控制切换一个元素是否显示，很简单</p><p>Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    seen: true</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>v-for 循环，绑定数组的数据渲染一个项目列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;todo in todos&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; text: &apos;学习 JavaScript&apos; &#125;,</span><br><span class="line">      &#123; text: &apos;学习 Vue&apos; &#125;,</span><br><span class="line">      &#123; text: &apos;整个牛项目&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输入 app4.todos.push({ text: ‘新项目’ })，你会发现列表最后添加了一个新项目</p><hr><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><p>v-on 事件监听器</p><p>更新了应用的状态，但没有触碰 DOM，所有的 DOM 操作都由 Vue 来处理，代码只需要关注逻辑层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-model 表单和应用状态双向绑定，表单绑定vue，vue绑定</p><p>中内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input v-model=&quot;message</span><br><span class="line">data: &#123;</span><br><span class="line">message: &apos;Hello Vue!&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h4><p>一个重要概念，一中抽象，允许使用小组件构建大型应用，这些小组件是小型的，独立的，可复用的</p><p>其实就是面向对象思想</p><p>只是不叫类和对象了，类和对象的关系是抽象和实例，这一点在Vue不明显，vue都叫组件，叫大组件和小组件，小小组件，小小小组件，总之都叫组件。把继承发挥的很好</p><p>在Vue，一个组件本质上是有预定义选项的Vue实例，注册组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 定义名为 todo-item 的新组件</span><br><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;li&gt;这是个待办项&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>构建组件模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span><br><span class="line">  &lt;todo-item&gt;&lt;/todo-item&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>父作用域将数据传到子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  props: [&apos;todo&apos;],</span><br><span class="line">  template: &apos;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>v-bind 将代办项传到循环输出的每个组件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;!--todo 对象是变量，即其内容可以是动态的。需要为每个组件提供一个“key”，详细解释以后再说。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;todo-item v-for=&quot;item in groceryList&quot; v-bind:todo=&quot;item&quot; v-bind:key=&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;/todo-item&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  props: [&apos;todo&apos;],</span><br><span class="line">  template: &apos;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; id: 0, text: &apos;蔬菜&apos; &#125;,</span><br><span class="line">      &#123; id: 1, text: &apos;奶酪&apos; &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;随便其它什么人吃的东西&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h4><p>自定义元素是web组件规范中的一部分</p><blockquote><p>Web 组件规范仍然处于草案阶段，并且未被所有浏览器原生实现。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</p></blockquote><blockquote><p>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</p></blockquote><h4 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h4><p>虽然没有完全遵循MVVM模型，但Vue设计也有所体现</p><p>创建数据对象，这样改起来方便<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">data.a = 3</span><br></pre></td></tr></table></figure></p><p>Object.freeze()，使响应系统停止工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;bar&apos;</span><br><span class="line">&#125;</span><br><span class="line">Object.freeze(obj)</span><br><span class="line"> </span><br><span class="line">data: obj</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- 这里的 `foo` 不会更新！ --&gt;</span><br><span class="line">  &lt;button @click=&quot;foo = &apos;baz&apos;&quot;&gt;Change it&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>$，特有的实例属性和方法，$符号用于和用户定义的分开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data // =&gt; true</span><br><span class="line">vm.$el === document.getElementById(&apos;example&apos;) // =&gt; true</span><br><span class="line"></span><br><span class="line">// $watch 是一个实例方法</span><br><span class="line">vm.$watch(&apos;a&apos;, function (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>生命周期钩子</p><p>created 钩子可以用来在一个实例被创建之后执行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function () &#123;</span><br><span class="line">    // `this` 指向 vm 实例</span><br><span class="line">    console.log(&apos;a is: &apos; + this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>模板语法允许开发者声明式的将DOM绑定到Vue实例的数据</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><h5 id="差值"><a href="#差值" class="headerlink" title="差值"></a>差值</h5><p>Mustache 语法，最常见的数据绑定方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span v-once&gt;这个不会改变 &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>双大括号会将数据解释为普通文本，而非HTML代码，如果要输出真的HTML，用v-html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Using mustaches: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于UI，组件更适合作为可重用和可组合的基本单位。</p><p><strong>绑定属性</strong></p><pre><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code></pre><p>布尔特性是个需要特殊关注的，它只要存在，就是true，如果值是null/undefined/false，那么它根本不会出现在属性中</p><pre><code>&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</code></pre><p><strong>使用JS表达式</strong></p><p>一下都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>但它们只能是单个表达式，语句/if都不行</p><hr><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>v-前缀的特殊属性</p><pre><code>&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>参数是冒号后面的东西，它的参数可以是HTML属性</p><pre><code>&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</code></pre><p>也可以是事件</p><pre><code>&lt;a v-on:click=&quot;dosomething&quot;&gt;&lt;/a&gt;</code></pre><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><p>.后面的，用于指出一个指令应该以特殊方式绑定</p><pre><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></pre><h5 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h5><p>v-bind:href == :href</p><p>v-on:click == @click</p><p>只有on和bind有缩写</p><hr><h4 id="计算属性和监听器"><a href="#计算属性和监听器" class="headerlink" title="计算属性和监听器"></a>计算属性和监听器</h4><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>简单说，经过一定计算后对绑定的地方返回一个值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 翻转文本</span><br><span class="line"> computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>易于计算和理解</p><h5 id="computed-VS-methods"><a href="#computed-VS-methods" class="headerlink" title="computed VS methods"></a>computed VS methods</h5><p>用方法也可以达到同样目的，但完全不同，因为计算属性的缓存在它们的相关依赖被修改前一直存在，而方法是每次调用都会重新计算，所以为了减少运算增加效率，使用计算属性</p><h5 id="computed-VS-watch"><a href="#computed-VS-watch" class="headerlink" title="computed VS watch"></a>computed VS watch</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;,</span><br><span class="line">    fullName: &apos;Foo Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &apos; &apos; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哪个牛逼一看就知道</p><h5 id="computed-setter"><a href="#computed-setter" class="headerlink" title="computed setter"></a>computed setter</h5><p>默认只有getter，需要时也提供setter</p><pre><code> computed: {fullName: {// getterget: function () {  return this.firstName + &apos; &apos; + this.lastName},// setterset: function (newValue) {  var names = newValue.split(&apos; &apos;)  this.firstName = names[0]  this.lastName = names[names.length - 1]}  } }</code></pre><p>现在运行 vm.fullName = ‘John Doe’时，setter会调用，另俩值会更新</p><hr><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   // 如果 `question` 发生改变，这个函数就会运行</span><br><span class="line">   question: function (newQuestion, oldQuestion) &#123;</span><br><span class="line">     this.answer = &apos;Waiting for you to stop typing...&apos;</span><br><span class="line">     this.getAnswer()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>每当改变时就运行，频率有时会过高，需要_.debounce()限定频率</p><pre><code>_.debounce(function() {}, t)</code></pre><p>t是毫秒数，t毫秒内最多触发一次</p><p>需要注意的是，侦听器里有两个参数，第一个是改变后的值，第二个是之前的值</p><p>axios里的this拿不到Vue实例，需要在axios外面</p><pre><code>var rm = this</code></pre><p>之后用rm</p><h4 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h4><p>传给v-bind:class一个对象，动态切换class</p><pre><code>&lt;div v-bind:class=&quot;{active: isActive}&quot;&gt;&lt;/div&gt;</code></pre><p>active这个class是否存在得看isActive是不是真</p><p>可以传更多属性动态切换多个class，而且它可以和原生class共存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;static&quot; v-bind:class=&quot;&#123;active: isActive, &apos;text-danger&apos;: hasError&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果是</p><pre><code>&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</code></pre><p>数据对象可以内联定义在模板中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:class=&quot;classObject&quot;</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    &apos;text-danger&apos;: false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>绑定一个计算属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组语法</p><p>把一个数组传给 v-bind:class</p><pre><code>&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;data: {  active: true,  &apos;text-danger&apos;: false}</code></pre><p>三元表达式，这个比较扯</p>]]></content>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180325 今天早晨没吃饭 很开心</title>
      <link href="/2018/03/25/20180325-%E4%BB%8A%E5%A4%A9%E6%97%A9%E6%99%A8%E6%B2%A1%E5%90%83%E9%A5%AD-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/25/20180325-%E4%BB%8A%E5%A4%A9%E6%97%A9%E6%99%A8%E6%B2%A1%E5%90%83%E9%A5%AD-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨九点起床，不吃饭全靠一口仙气吊着，前一天睡得不晚，十一点二十就躺下了，看来是真累了</p><p>起床来办公室，nodejs 的基础可以说学完了</p><p>中午吃了饭</p><p>中午的会取消了</p><p>下午在办公室继续呆着到四点</p><p>回去和司机聊人生</p><p>吃了学一烩面，仍然很好吃，明天继续吃，吃腻为止</p><p>晚上和班长健身</p><p>回来十点，吃了室友过生日的蛋糕，准备吃大鸡排</p><h3 id="nodejs-梳理"><a href="#nodejs-梳理" class="headerlink" title="nodejs 梳理"></a>nodejs 梳理</h3><p>####简单概括</p><ol><li>Chrome V8 是 JavaScript 引擎</li><li>Node.js 内置 Chrome V8 引擎，所以它使用的 JavaScript 语法</li><li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事</li><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 I/O 很慢，不得不等着结果出来，再往下执行</li><li>CPU 完全可以不管 I/O 设备，挂起处于等待中的任务，先运行排在后面的任务</li><li>将等待中的 I/O 任务放到 Event Loop 里</li><li>由 Event Loop 将 I/O 任务放到线程池里</li><li>不能提高事件处理效率，但可以让时间利用率变高</li></ol><hr><h4 id="IDE-和-编辑器"><a href="#IDE-和-编辑器" class="headerlink" title="IDE 和 编辑器"></a>IDE 和 编辑器</h4><p>我用Webstorm和Sublime，Webstorm代码提示，重构方面强大，作为IDE支持各种语言框架，模板也多，支持断电调试，极其智能，但这也不是什么好事，Sublime就是好用，跨平台，轻量</p><p>Vim也很常见，命令行下的编辑器，非常强大，难度也稍大，但更为酷炫，而且对于服务器部署开发来说是值得一学的</p><p>最推荐用 VSCode 编辑器编写 Nodejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vsc是一个比较潮比较新的编辑器（跨平台Mac OS X、Windows和 Linux ）</span><br><span class="line">vsc功能和textmate、sublime、notepad++，ultraedit等比较，毫不逊色</span><br><span class="line">vsc尤其是在nodejs（调试）和typescript、go上支持尤其好</span><br><span class="line">vsc提供了自定义 Debugger Adapter 和 VSCode Debug Protocol 从而实现自己的调试器</span><br></pre></td></tr></table></figure></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>DIRT，这是Node.js 所针对的应用程序的专门简称，表示数据密集型实时程序。</p><p>比较像I/O-bound，即运行效率的瓶颈在于I/O，而CPU大多数时间闲着，数据处理很快，但是数据传入传出效率跟不上。</p><p>它和CPU-bound相反，CPU-bound指效率瓶颈在于运算。</p><p>Node.js在今天开来，已经不只是DIRT，包括四类</p><ol><li>跨平台 几乎所有平台</li><li>Node后端 核心特性 Web应用，Api，测试，部署</li><li>前端 react/vue/angular 辅助开发</li><li>工具 各种预编译，构建工具，webpack/gulp，工程化，npm，hack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）初衷，server端，不想成了前端开发的基础设施</span><br><span class="line">2）命令行辅助工具，甚至可以是运维</span><br><span class="line">3）移动端：cordova，pc端：nw.js和electron</span><br><span class="line">4）组件化，构建，代理</span><br><span class="line">5）架构，前后端分离、api proxy</span><br><span class="line">6）性能优化、反爬虫与爬虫</span><br></pre></td></tr></table></figure><hr><h4 id="学习注意事项"><a href="#学习注意事项" class="headerlink" title="学习注意事项"></a>学习注意事项</h4><h5 id="异步流程"><a href="#异步流程" class="headerlink" title="异步流程"></a>异步流程</h5><p><img src="https://dn-cnode.qbox.me/FowNmdNw00ghB3PxKtMz9ajo2i5c" alt="avatar"></p><ul><li>红色代表Promise，是使用最多的，无论async还是generator都可用</li><li>蓝色是Generator，过度货</li><li>绿色是Async函数，趋势</li></ul><p>推荐使用Asyns函数+Promise组合</p><h5 id="Api写法-Error-first-Callback-和-EventEmitter"><a href="#Api写法-Error-first-Callback-和-EventEmitter" class="headerlink" title="Api写法 Error-first Callback 和 EventEmitter"></a>Api写法 Error-first Callback 和 EventEmitter</h5><p>查看Api文档</p><p>Node.js异步原理，我们可以知道，核心在于 Node.js SDK 中API调用，然后交由EventLoop（Libuv）去执行，所以我们一定要熟悉Node.js的API操作。</p><p>Node.js的API都是异步的，同步的函数是奢求，要查API文档，在高并发场景下慎用。</p><p>笔者推荐使用 Dash 或 Zeal 查看离线文档，经常查看离线文档，对Api理解会深入很多，比IDE辅助要好，可以有效避免离开IDE就不会写代码的窘境。</p><h5 id="中流砥柱-Promise"><a href="#中流砥柱-Promise" class="headerlink" title="中流砥柱 Promise"></a>中流砥柱 Promise</h5><p>Callback Hell 回调地狱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">step1(function (value1) &#123;</span><br><span class="line">    step2(value1, function(value2) &#123;</span><br><span class="line">        step3(value2, function(value3) &#123;</span><br><span class="line">            step4(value3, function(value4) &#123;</span><br><span class="line">                // Do something with value4</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Promise是对回调地狱的思考，或者说是改良方案。目前使用非常普遍，可以说是在async函数普及之前唯一一个通用性规范，甚至 Node.js 社区都在考虑 Promise 化，可见其影响之大。</p><h5 id="终极解决方案：Async-Await"><a href="#终极解决方案：Async-Await" class="headerlink" title="终极解决方案：Async/Await"></a>终极解决方案：Async/Await</h5><ul><li>Async函数语义上非常好</li><li>Async不需要执行器，它本身具备执行能力，不像Generator需要co模块</li><li>Async函数的异常处理采用try/catch和Promise的错误处理，非常强大</li><li>Await接Promise，Promise自身就足够应对所有流程了，包括async函数没有纯并行处理机制，也可以采用Promise里的all和race来补齐</li><li>Await释放Promise的组合能力，外加co和Promise的then，几乎没有不支持的场景</li></ul><p>综上所述</p><ul><li>Async函数是趋势，如果Chrome 52. v8 5.1已经支持Async函数(<a href="https://github.com/nodejs/CTC/issues/7)了，Node.js支持还会远么？" target="_blank" rel="noopener">https://github.com/nodejs/CTC/issues/7)了，Node.js支持还会远么？</a></li><li>Async和Generator函数里都支持promise，所以promise是必须会的。</li><li>Generator和yield异常强大，不过不会成为主流，所以学会基本用法和promise就好了，没必要所有的都必须会。</li><li>co作为Generator执行器是不错的，它更好的是当做Promise 包装器，通过Generator支持yieldable，最后返回Promise，是不是有点无耻</li></ul><p>因为暂时不打算深入学习，所以不深入说Async和Promise，先码上</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有JS基础的建议学nodejs</p><p>I/O-bound下建议用nodejs</p><p>nodejs是一个转全栈的很好的工具</p><p>如果是前端，先把Vue搞懂再说，nodejs是辅助，前端如果做服务端用nodejs也很好。</p><p>所以下一步学<strong>VUE</strong></p><p>真无聊</p><p>你们是怎么找到那么多人出去玩的</p>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180324 今天骑了一个半小时的单车 很开心</title>
      <link href="/2018/03/24/20180324-%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%98%9F%E6%9C%9F%E5%85%AD-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/24/20180324-%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%98%9F%E6%9C%9F%E5%85%AD-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>昨天晚上聊人生到比较晚，早晨七点四十起</p><p>收拾完去办公室，除去中午吃饭一直到现在，下午三天</p><p>中午上KAB的小学弟想在办公室给手机充下电，我说行</p><p>学弟极其有气质，谈吐也不像是大一的</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><h4 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h4><p>这是一个简洁灵活的应用框架</p><p>安装，用cnpm，感谢淘宝 cnpm 比 npm 稳定不少</p><p>记得没有权限的话，用 sudo</p><p>安了express还需要安几个重要模块</p><ol><li>body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的<strong>数据</strong>。</li><li>cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</li><li>multer - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。<strong>用于处理文件</strong></li></ol><p><strong>.use</strong><br>use就是给你的当前路径的请求加上中间件，假如这个路径的参数没有传，默认的就是”/“，也就是说所有的请求都会走这个中间件处理。中间件的处理是按照挂载顺序执行的，因此app.use的fn到底哪个写在前面，哪个写在后面，这个顺序尤为关键</p><p><strong>初始页面</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">   res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>正则匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/ab*cd&apos;, function(req, res) &#123;   </span><br><span class="line">   console.log(&quot;/ab*cd GET 请求&quot;);</span><br><span class="line">   res.send(&apos;正则匹配&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>静态文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure></p><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://127.0.0.1:8081/process_get&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt;  &lt;br&gt;</span><br><span class="line">Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"> </span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"> </span><br><span class="line">app.get(&apos;/index.htm&apos;, function (req, res) &#123;</span><br><span class="line">   res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.get(&apos;/process_get&apos;, function (req, res) &#123;</span><br><span class="line"> </span><br><span class="line">   // 输出 JSON 格式</span><br><span class="line">   var response = &#123;</span><br><span class="line">       &quot;first_name&quot;:req.query.first_name,</span><br><span class="line">       &quot;last_name&quot;:req.query.last_name</span><br><span class="line">   &#125;;</span><br><span class="line">   console.log(response);</span><br><span class="line">   res.end(JSON.stringify(response));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line"> </span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line"> </span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://127.0.0.1:8081/process_post&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt;  &lt;br&gt;</span><br><span class="line"> </span><br><span class="line">Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意body-parser，用于解析post请求的请求体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"> </span><br><span class="line">// 创建 application/x-www-form-urlencoded 编码解析</span><br><span class="line">var urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line">app.get(&apos;/index.htm&apos;, function (req, res) &#123;</span><br><span class="line">   res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );</span><br><span class="line">&#125;)</span><br><span class="line">app.post(&apos;/process_post&apos;, urlencodedParser, function (req, res) &#123;</span><br><span class="line">   // 输出 JSON 格式</span><br><span class="line">   var response = &#123;</span><br><span class="line">       &quot;first_name&quot;:req.body.first_name,      // 注意是body，而get是query</span><br><span class="line">       &quot;last_name&quot;:req.body.last_name</span><br><span class="line">   &#125;;</span><br><span class="line">   console.log(response);</span><br><span class="line">   res.end(JSON.stringify(response));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/file_upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;image&quot; size=&quot;50&quot; /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>multer 用于解析post请求中的文件</p><p>Multer在解析完请求体后，会向Request对象中添加一个body对象和一个file或files对象（上传多个文件时使用files对象 ）。其中，body对象中包含所提交表单中的文本字段（如果有），而file(或files)对象中包含通过表单上传的文件。</p><p>multer({dest:path})</p><p>path是文件存放的路径，如果没有，就存在内存里，永远看不见</p><p>文件上传有以下方法</p><ol><li>muilter.single(‘file’)  适用于单文件上传</li><li>muilter.array(‘file’,num)  适用于多文件上传，num为最多上传个数，上传文件的数量可以小于num,</li><li>muilter.fields(fields)  适用于混合上传，比如A类文件1个，B类文件2个。官方API有详细说明。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(multer(&#123; dest: &apos;tmp/&apos;&#125;).array(&apos;image&apos;));</span><br><span class="line"> </span><br><span class="line">app.get(&apos;/index.htm&apos;, function (req, res) &#123;</span><br><span class="line">   res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.post(&apos;/file_upload&apos;, function (req, res) &#123;</span><br><span class="line"> </span><br><span class="line">   console.log(req.files[0]);  // 上传的文件信息</span><br><span class="line"> </span><br><span class="line">   var des_file = __dirname + &quot;/&quot; + req.files[0].originalname;</span><br><span class="line">   fs.readFile( req.files[0].path, function (err, data) &#123;</span><br><span class="line">        fs.writeFile(des_file, data, function (err) &#123;</span><br><span class="line">         if( err )&#123;</span><br><span class="line">              console.log( err );</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">               response = &#123;</span><br><span class="line">                   message:&apos;File uploaded successfully&apos;, </span><br><span class="line">                   filename:req.files[0].originalname</span><br><span class="line">              &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">          console.log( response );</span><br><span class="line">          res.end( JSON.stringify( response ) );</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line"> </span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line"> </span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;)</span><br><span class="line">var util = require(&apos;util&apos;);</span><br><span class="line"> </span><br><span class="line">var app = express()</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"> </span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">    console.log(&quot;Cookies: &quot; + util.inspect(req.cookies));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(8081)</span><br></pre></td></tr></table></figure><h5 id="Mysql-链接"><a href="#Mysql-链接" class="headerlink" title="Mysql 链接"></a>Mysql 链接</h5><p>需要提前配置好mysql，包括系统变量</p><p>最好用独立的MySQL，不用XAMPP捆绑的</p><p>具体的链接代码，就和Java很像了，没什么可说的，如何在服务器中应用mysql才是重点，明后天找个demo学习之后实现，再之后自己应用</p><p>值得一提的是，webStorm给的补全是rowsAffected，但正确的是affectedRows</p><p>宅哥说学精就行，vue先放放，把nodejs学好再说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">var mysql = require(&apos;mysql&apos;);</span><br><span class="line"></span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">  host: &apos;localhost&apos;,</span><br><span class="line">  user: &apos;root&apos;,</span><br><span class="line">  password: &apos;huzi866812571230&apos;,</span><br><span class="line">  port: &apos;3306&apos;,</span><br><span class="line">  database: &apos;dbnodejs&apos;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">var sql = &apos;SELECT * FROM websites&apos;;</span><br><span class="line">// 查</span><br><span class="line">connection.query(sql, function (err, result) &#123;</span><br><span class="line">  if(err) &#123;</span><br><span class="line">    console.log(&apos;[SELECT ERROR - &apos;, err.message);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&apos;---------SELECT----------&apos;);</span><br><span class="line">  console.log(result);</span><br><span class="line">  console.log(&apos;--------------------------\n\n&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 增</span><br><span class="line"></span><br><span class="line">var addSql = &apos;INSERT INTO websites(Id, name, url, alexa, country) VALUES(0, ?, ?, ?, ?)&apos;;</span><br><span class="line">var addSqlParams = [&apos;菜鸟工具&apos;, &apos;wangtianzhi.me&apos;, &apos;23453&apos;, &apos;CN&apos;];</span><br><span class="line"></span><br><span class="line">connection.query(addSql, addSqlParams, function (err, result) &#123;</span><br><span class="line">  if(err) &#123;return;&#125;</span><br><span class="line">  console.log(&apos;-------INSERT-------&apos;);</span><br><span class="line">  console.log(&apos;INSERT ID: &apos;,result);</span><br><span class="line">  console.log(&apos;--------------------&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 改</span><br><span class="line">var modSql = &apos;UPDATE websites SET name=?,url=? WHERE Id = ?&apos;;</span><br><span class="line">var modSqlParams = [&apos;菜鸟移动站&apos;, &apos;http://m.runoob.com&apos;, 1];</span><br><span class="line"></span><br><span class="line">connection.query(modSql, modSqlParams, function (err, result) &#123;</span><br><span class="line">  if(err) &#123;return;&#125;</span><br><span class="line">  console.log(&apos;-------UPDATE---------&apos;);</span><br><span class="line">  console.log(&apos;UPDATE affectedRows&apos;, result.affectedRows);</span><br><span class="line">  console.log(&apos;-----------------------&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 删</span><br><span class="line">var delSql = &apos;DELETE FROM websites where id=2&apos;;</span><br><span class="line">connection.query(delSql, function (err, result) &#123;</span><br><span class="line">  if(err) &#123;</span><br><span class="line">    console.log(&apos;err&apos;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&apos;-------DELETE---------&apos;);</span><br><span class="line">  console.log(&apos;DELETE affectedRows&apos;, result.affectedRows);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180323 今天办公室没有人 很开心</title>
      <link href="/2018/03/23/20180323-%E4%BB%8A%E5%A4%A9%E5%8A%9E%E5%85%AC%E5%AE%A4%E6%B2%A1%E6%9C%89%E4%BA%BA-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/23/20180323-%E4%BB%8A%E5%A4%A9%E5%8A%9E%E5%85%AC%E5%AE%A4%E6%B2%A1%E6%9C%89%E4%BA%BA-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨早操，莽着被单词，背完两页，英语课是翻译课不听写，简直浪费感情</p><p>翻译的一些名词很难，但在同桌帮助下，有几个词翻译的贼他妈信达雅，很开心</p><p>算法课照例困得要命呼噜呼噜</p><p>递归和归并算法很抽象</p><p>下了课学完nodejs的文件系统去吃饭，午饭照例吃撑</p><p>睡一会上课，书记来查人，高兴的颤抖</p><p>晚饭和那个小谁吃烩面，原理烩面就是板面，挺好吃</p><p>晚上洗衣服去办公室，没人，吃零食</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><h4 id="接着上次的文件系统"><a href="#接着上次的文件系统" class="headerlink" title="接着上次的文件系统"></a>接着上次的文件系统</h4><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.read(fd, buffer, offset, length, position, callback)</span><br></pre></td></tr></table></figure><ol><li>fd - 通过 fs.open() 方法返回的文件描述符。</li><li>buffer - 数据写入的缓冲区。</li><li>offset - 缓冲区写入的写入偏移量。</li><li>length - 要从文件中读取的字节数。</li><li>position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。</li><li>callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， <strong>bytesRead 表示读取的字节数，buffer 为缓冲区对象。</strong></li></ol><p>读取文件可以在open的回调函数进行，且读取的类型和open的flag有关。如果不用open，默认r?大概是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.read(fd, buf, 0, buf.length, 0, function(err, bytes)&#123;</span><br><span class="line">      if (err)&#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(bytes + &quot;  字节被读取&quot;);</span><br><span class="line">      // 仅输出读取的字节</span><br><span class="line">      if(bytes &gt; 0)&#123;</span><br><span class="line">         console.log(buf.slice(0, bytes).toString());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><hr><h5 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h5><p>注意 a+<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.open(&quot;input.txt&quot;, &quot;a+&quot;, function (err, fd) &#123;</span><br><span class="line">  if(err) &#123;</span><br><span class="line">    return console.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.appendFile(fd, &quot;追加&quot;, function (err) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      return console.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h5 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.close(fd, callback)</span><br></pre></td></tr></table></figure><p>参数： fd一样，callback没有参数</p><p>放在open的回调函数最后</p><hr><h5 id="截取文件"><a href="#截取文件" class="headerlink" title="截取文件"></a>截取文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.ftruncate(fd, len, callback)</span><br></pre></td></tr></table></figure><p>参数： fd一样，len 文件内容截取的长度，callback没有参数</p><hr><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(path, callback)</span><br></pre></td></tr></table></figure><p>参数： path路径，callback没有参数</p><hr><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(path[, mode], callback)</span><br></pre></td></tr></table></figure><p>参数：path路径，mode设置目录权限默认0777，callback没有参数</p><p><strong>特别注意，目录只能一层一层建，不能一次多层</strong></p><hr><h5 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(path, callback)</span><br></pre></td></tr></table></figure><p>参数：path 路径，callback 两个参数 err files files为目录下文件的数组列表</p><p>forEach 用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(&quot;/tmp/&quot;,function(err, files)&#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   files.forEach( function (file)&#123;</span><br><span class="line">       console.log( file );</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h5 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdir(path, callback)</span><br></pre></td></tr></table></figure><p>callback没参数 </p><hr><h4 id="GET-POST-请求"><a href="#GET-POST-请求" class="headerlink" title="GET/POST 请求"></a>GET/POST 请求</h4><h5 id="获取GET请求内容"><a href="#获取GET请求内容" class="headerlink" title="获取GET请求内容"></a>获取GET请求内容</h5><p>GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此可以手动解析后面的内容作为GET请求的参数</p><p>获取URL的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">    res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class="line"> </span><br><span class="line">    // 解析 url 参数</span><br><span class="line">    var params = url.parse(req.url, true).query;</span><br><span class="line">    res.write(&quot;网站名：&quot; + params.name);</span><br><span class="line">    res.write(&quot;\n&quot;);</span><br><span class="line">    res.write(&quot;网站 URL：&quot; + params.url);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;).listen(3000);</span><br></pre></td></tr></table></figure></p><p>url.parse(req,url, true)<br>前一个是url，true会吧query设置成对象，否则是未编码的格式</p><p>具体看代码</p><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p>node.js 默认是不会解析请求体的，需要手动来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">    // 定义了一个post变量，用于暂存请求体的信息</span><br><span class="line">    var post = &apos;&apos;;     </span><br><span class="line"> </span><br><span class="line">    // 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span><br><span class="line">    req.on(&apos;data&apos;, function(chunk)&#123;    </span><br><span class="line">        post += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    // 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span><br><span class="line">    req.on(&apos;end&apos;, function()&#123;    </span><br><span class="line">        post = querystring.parse(post);</span><br><span class="line">        res.end(util.inspect(post));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(3000);</span><br></pre></td></tr></table></figure><hr><h4 id="Web-模块"><a href="#Web-模块" class="headerlink" title="Web 模块"></a>Web 模块</h4><p>大多数 web 服务器都支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器。</p><p>目前最主流的三个Web服务器是Apache、Nginx、IIS。</p><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var url = require(&apos;url&apos;);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">// 创建服务器</span><br><span class="line">http.createServer( function (request, response) &#123;  </span><br><span class="line">   // 解析请求，包括文件名</span><br><span class="line">   var pathname = url.parse(request.url).pathname;</span><br><span class="line">   </span><br><span class="line">   // 输出请求的文件名</span><br><span class="line">   console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line">   </span><br><span class="line">   // 从文件系统中读取请求的文件内容</span><br><span class="line">   fs.readFile(pathname.substr(1), function (err, data) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">         // HTTP 状态码: 404 : NOT FOUND</span><br><span class="line">         // Content Type: text/plain</span><br><span class="line">         response.writeHead(404, &#123;&apos;Content-Type&apos;: &apos;text/html&apos;&#125;);</span><br><span class="line">      &#125;else&#123;             </span><br><span class="line">         // HTTP 状态码: 200 : OK</span><br><span class="line">         // Content Type: text/plain</span><br><span class="line">         response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/html&apos;&#125;);    </span><br><span class="line">         </span><br><span class="line">         // 响应文件内容</span><br><span class="line">         response.write(data.toString());        </span><br><span class="line">      &#125;</span><br><span class="line">      //  发送响应数据</span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);   </span><br><span class="line">&#125;).listen(8080);</span><br><span class="line"> </span><br><span class="line">// 控制台会输出以下信息</span><br><span class="line">console.log(&apos;Server running at http://127.0.0.1:8080/&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// client.js</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"> </span><br><span class="line">// 用于请求的选项</span><br><span class="line">var options = &#123;</span><br><span class="line">   host: &apos;localhost&apos;,</span><br><span class="line">   port: &apos;8080&apos;,</span><br><span class="line">   path: &apos;/index.html&apos;  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 处理响应的回调函数</span><br><span class="line">var callback = function(response)&#123;</span><br><span class="line">   // 不断更新数据</span><br><span class="line">   var body = &apos;&apos;;</span><br><span class="line">   response.on(&apos;data&apos;, function(data) &#123;</span><br><span class="line">      body += data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   response.on(&apos;end&apos;, function() &#123;</span><br><span class="line">      // 数据接收完成</span><br><span class="line">      console.log(body);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 向服务端发送请求</span><br><span class="line">var req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>要用两个终端分别运行server.js client.js</p>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180322 今天中午吃了三个汉堡其中两个是双层的 很开心</title>
      <link href="/2018/03/22/20180322-%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%90%83%E4%BA%86%E4%B8%89%E4%B8%AA%E6%B1%89%E5%A0%A1%E5%85%B6%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%98%AF%E5%8F%8C%E5%B1%82%E7%9A%84-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/22/20180322-%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%90%83%E4%BA%86%E4%B8%89%E4%B8%AA%E6%B1%89%E5%A0%A1%E5%85%B6%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%98%AF%E5%8F%8C%E5%B1%82%E7%9A%84-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><p>早晨有早操，站着听歌背单词，之后毛概上课写nodejs，被傻吊老师亲切的拍拍后背盖上了我的电脑</p><p>嵌入式的郭明强讲的稀里哗啦，似乎已经在让我们写出来能在手机上运行的带mapgis的app了，但是没几个能写出来的，我之前在寝室里做了，除了没引入mapgis都没问题</p><p>所以整节课我在搞博客</p><p>我想改一改博客的版块，在移动端打开不太好看，字体也想改，但是很难</p><p>系统自带的很好加，但肯定不是所有人都用mac，从Google Fonts引入云字体也只能引入英文的，中文字体太大，一个字体十几M。从本地连接到Font-family很不错，但是我需要理解整个主题的目录和构造，看了好久没看懂。听说有国内的CDN，回头看看</p><p>所以如果想在博客内置个游戏之类的，把它连接的新的网页更好?</p><p>中 午 我 吃 了 三 个 汉 堡 </p><p>撑得要命，床上一趟睡到五点</p><p>然后来开年级大会，边听辅导员逼逼边写nodejs，明天学到服务器端</p><hr><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><p>文件和模块是一一对应的。或者说，一个 Node.js 文件就是一个模块</p><p>创建模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var hello = require(&apos;./hello&apos;); //./ 为当前目录，node.js 默认后缀为 js</span><br><span class="line">hello.world();</span><br></pre></td></tr></table></figure></p><p>创建 hello.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.world = function() &#123;</span><br><span class="line">  console.log(&apos;Hello World&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有时只是想把一个对象封装到模块里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//hello.js </span><br><span class="line">function Hello() &#123; </span><br><span class="line">    var name; </span><br><span class="line">    this.setName = function(thyName) &#123; </span><br><span class="line">        name = thyName; </span><br><span class="line">    &#125;; </span><br><span class="line">    this.sayHello = function() &#123; </span><br><span class="line">        console.log(&apos;Hello &apos; + name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;; </span><br><span class="line">module.exports = Hello;</span><br><span class="line"></span><br><span class="line">//main.js </span><br><span class="line">var Hello = require(&apos;./hello&apos;); </span><br><span class="line">hello = new Hello(); </span><br><span class="line">hello.setName(&apos;BYVoid&apos;); </span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></table></figure></p><p><strong>服务端模块加载</strong></p><p>模块在哪里</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg" alt="avatar"></p><hr><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>和js类似，一个函数可以作为另一个函数的参数</p><p>匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function execute(someFunction, value) &#123;</span><br><span class="line">  someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(function(word)&#123; console.log(word) &#125;, &quot;Hello&quot;);</span><br></pre></td></tr></table></figure></p><p>HTTP服务器与匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(function(request, response) &#123;</span><br><span class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">  response.write(&quot;Hello World&quot;);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;).listen(8888);</span><br></pre></td></tr></table></figure></p><hr><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>url.parse(string).query<br>                                           |<br>           url.parse(string).pathname      |<br>                       |                   |<br>                       |                   |<br>                     —— ——————-<br><a href="http://localhost:8888/start?foo=bar&amp;hello=world" target="_blank" rel="noopener">http://localhost:8888/start?foo=bar&amp;hello=world</a><br>                                —       —–<br>                                 |          |<br>                                 |          |<br>              querystring.parse(queryString)[“foo”]    |<br>                                            |<br>                         querystring.parse(queryString)[“hello”]</p><p>我们为路由提供URL和其他需要的GET及POST参数，随后由路由根据需要执行相关代码</p><p>因此，我们需要查看HTTP请求，提取出URL、GET/POST。这是HTTP服务器的功能</p><p>也可以用querystring模块解析POST</p><p>用onRequesy()找出URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var url = require(&quot;url&quot;);</span><br><span class="line"> </span><br><span class="line">function start(route) &#123;</span><br><span class="line">  function onRequest(request, response) &#123;</span><br><span class="line">    var pathname = url.parse(request.url).pathname;</span><br><span class="line">    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line">    route(pathname);</span><br><span class="line">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">    response.write(&quot;Hello World&quot;);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  http.createServer(onRequest).listen(8888);</span><br><span class="line">  console.log(&quot;Server has started.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure></p><p>现在可以通过请求的 URL 路径来区别不同请求了，所以我们可以使用路由来将请求以 URL 路径为基准映射到处理程序上</p><p>路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// router.js</span><br><span class="line">function route(pathname) &#123;</span><br><span class="line">  console.log(&quot;About to route a request for &quot; + pathname);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure></p><p>主页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var server = require(&quot;./server&quot;);</span><br><span class="line">var router = require(&quot;./router&quot;);</span><br><span class="line"> </span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure></p><hr><h4 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h4><ol><li>__filename 文件名</li><li>__dirname 目录</li><li>setTimeout(cb, ms)</li><li>clearTimeout(t)  t是定时器</li><li>setInterval(cb, ms) 重复的定时器</li><li>console <ol><li>log 如果有多个参数，以printf()的格式输出</li><li>info</li><li>error</li><li>warn 以上四种差别不大</li><li>dir(obj[, options]) 对一个对象检查</li><li>time(label) 输出时间，计时开始</li><li>timeEnd(label)</li><li>assert 判断是否为真，两个参数，第一个是真，才会输出第二个</li></ol></li><li>process 描述进程状态的对象<ol><li>exit 退出时触发</li><li>beforeExit 当 node 清空事件循环，并且没有其他安排时触发这个事件。</li><li>uncaughtException 一个异常冒泡回到事件循环时触发事件</li><li>Signal 收到信号触发</li><li>还有许多<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 输出当前目录</span><br><span class="line">console.log(&apos;当前目录: &apos; + process.cwd());</span><br><span class="line"></span><br><span class="line">// 输出当前版本</span><br><span class="line">console.log(&apos;当前版本: &apos; + process.version);</span><br><span class="line"></span><br><span class="line">// 输出内存使用情况</span><br><span class="line">console.log(process.memoryUsage());</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><h5 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h5><p>实现对象原型继承的函数</p><p><strong>仅仅继承在原型中定义的函数和属性，构造函数内部的不会继承</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在构造函数中定义</span><br><span class="line">function Base() &#123; </span><br><span class="line">  this.sayHello = function() &#123;console.log(&quot;Hello&quot;)&#125;;</span><br><span class="line">&#125; </span><br><span class="line">// 在原型定义</span><br><span class="line">Base.prototype.showName = function() &#123; </span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h5 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h5><p>将任何一个对象转换为字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">util.inspect(object,[showHidden],[depth],[colors])</span><br></pre></td></tr></table></figure></p><ol><li>showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。</li><li>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。 </li><li>如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。</li></ol><hr><h5 id="判断的-看名字就知道"><a href="#判断的-看名字就知道" class="headerlink" title="判断的 看名字就知道"></a>判断的 看名字就知道</h5><ol><li>util.isArray(object)</li><li>util.isRegExp(object)</li><li>isDate(object)</li><li>isError(object)</li></ol><hr><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>其实之前学Stream流时已经接触到fs，这里系统写下</p><p>所有fs方法均有同步异步半本，异步最后一个参数为回调函数</p><p>既然是nodejs，肯定以异步为主</p><p>创建 var fs = require(“fs”);</p><p>fs.open(path, flags[, mode], callback) </p><ol><li><p>flags: 文件打开的行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r 以读取模式打开文件。如果文件不存在抛出异常。</span><br><span class="line">r+  以读写模式打开文件。如果文件不存在抛出异常。</span><br><span class="line">rs  以同步的方式读取文件。</span><br><span class="line">rs+ 以同步的方式读取和写入文件。</span><br><span class="line">w 以写入模式打开文件，如果文件不存在则创建。</span><br><span class="line">wx  类似 &apos;w&apos;，但是如果文件路径存在，则文件写入失败。</span><br><span class="line">w+  以读写模式打开文件，如果文件不存在则创建。</span><br><span class="line">wx+ 类似 &apos;w+&apos;， 但是如果文件路径存在，则文件读写失败。</span><br><span class="line">a 以追加模式打开文件，如果文件不存在则创建。</span><br><span class="line">ax  类似 &apos;a&apos;， 但是如果文件路径存在，则文件追加失败。</span><br><span class="line">a+  以读取追加模式打开文件，如果文件不存在则创建。</span><br><span class="line">ax+ 类似 &apos;a+&apos;， 但是如果文件路径存在，则文件读取追加失败。</span><br></pre></td></tr></table></figure></li><li><p>mode 设置文件模式（权限），默认0666（可读可写）</p></li></ol><p>fs.stat(path, callback) 获取文件信息,fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。例如判断是否为文件：</p><ol><li>stats.isFile()  如果是文件返回 true，否则返回 false。</li><li>stats.isDirectory() 如果是目录返回 true，否则返回 false。</li></ol><p>fs.writeFile(file, data[, options], callback) 写入</p><ol><li>options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 ‘w’</li><li>callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。</li></ol><p>这里是一些实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//异步读取</span><br><span class="line">fs.readFile(&apos;input.txt&apos;, function (err, data) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(&quot;异步读取: &quot; + data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//打开文件</span><br><span class="line">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">  console.log(&quot;文件打开成功！&quot;);     </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//获取文件信息</span><br><span class="line">fs.stat(&apos;/Users/liuht/code/itbilu/demo/fs.js&apos;, function (err, stats) &#123;</span><br><span class="line">    console.log(stats.isFile());         //true</span><br><span class="line">    console.log(stats);</span><br><span class="line">    console.log(&quot;读取文件信息成功！&quot;);</span><br><span class="line">   </span><br><span class="line">   // 检测文件类型</span><br><span class="line">   console.log(&quot;是否为文件(isFile) ? &quot; + stats.isFile());</span><br><span class="line">   console.log(&quot;是否为目录(isDirectory) ? &quot; + stats.isDirectory());    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 写入文件</span><br><span class="line">fs.writeFile(&apos;input.txt&apos;, &apos;我是通 过fs.writeFile 写入文件的内容&apos;,  function(err) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(&quot;数据写入成功！&quot;);</span><br><span class="line">   console.log(&quot;--------我是分割线-------------&quot;)</span><br><span class="line">   console.log(&quot;读取写入的数据！&quot;);</span><br><span class="line">   fs.readFile(&apos;input.txt&apos;, function (err, data) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">         return console.error(err);</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(&quot;异步读取文件数据: &quot; + data.toString());</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 读取文件之后的明天学</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180321 今天站着不扶墙穿了裤子 很开心</title>
      <link href="/2018/03/21/20180321-%E4%BB%8A%E5%A4%A9%E7%AB%99%E7%9D%80%E4%B8%8D%E6%89%B6%E5%A2%99%E7%A9%BF%E4%BA%86%E8%A3%A4%E5%AD%90-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/21/20180321-%E4%BB%8A%E5%A4%A9%E7%AB%99%E7%9D%80%E4%B8%8D%E6%89%B6%E5%A2%99%E7%A9%BF%E4%BA%86%E8%A3%A4%E5%AD%90-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h4 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h4><p>早晨有早操，一二节体育课是<strong>排球</strong>，没有气的排球</p><p>我以为和上次上的排球一样是海绵的软的，没想到这门课少了个气字，成硬排球了，打了一节课，手肿了，贼疼，后来偷偷找了个树荫戳了会</p><p>老师说往篮筐里颠进三个就能休息，我颠了三个，第三个时老师吹哨集合了</p><p>然后英语口语，没讲课，老师给我们看了一个叫毒枭的，一个叫 This is us 的美剧，都很不错，有空看</p><p>This is us 讲的是一群生日相同的人发生的故事，每人的故事分开讲，有好几条线，最后所有的线汇合。有点像无问西东那个劲</p><p>中午睡觉下午测量学给老师个面子去听了，课上看了会《简约至上》，背了会六级单词，这星期看完《简约至上》写个读后感</p><p>许德华突然进来一趟，我俩相视一笑，他走了</p><p>然后和司机健身，单车依然很带劲，走的时候碰上傻了吧唧的班长了</p><p>晚饭照惯例吃的撑的要死</p><p>之后在办公室学nodejs(顺便继续吃零食)</p><p>交了六级报名费</p><h2 id="听学长讲，自己电脑上搭web服务器也可以把域名挂上去，但是没有公网IP，很难解析，需要用内网参透工具，总之极其麻烦，还得一直开着电脑"><a href="#听学长讲，自己电脑上搭web服务器也可以把域名挂上去，但是没有公网IP，很难解析，需要用内网参透工具，总之极其麻烦，还得一直开着电脑" class="headerlink" title="听学长讲，自己电脑上搭web服务器也可以把域名挂上去，但是没有公网IP，很难解析，需要用内网参透工具，总之极其麻烦，还得一直开着电脑"></a>听学长讲，自己电脑上搭web服务器也可以把域名挂上去，但是没有公网IP，很难解析，需要用内网参透工具，总之极其麻烦，还得一直开着电脑</h2><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><hr><h5 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h5><p>js本事只有字符串数据类型，没有二进制数据类型，所以定义了一个专门存放二进制数据类型的缓存区–Buffer</p><p>Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer 类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。</p><p>这个要注意字符编码</p><p>创建Buffer类的API</p><ol><li>Buffer.alloc(size[, fill[, encoding]])： 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li>Buffer.allocUnsafe(size)： 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li>Buffer.from(array)： 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li>Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li>Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例</li></ol><h5 id="写入缓存区"><a href="#写入缓存区" class="headerlink" title="写入缓存区"></a>写入缓存区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure><ol><li>string - 写入缓冲区的字符串。</li><li>offset - 缓冲区开始写入的索引值，默认为 0 。</li><li>length - 写入的字节数，默认为 buffer.length</li><li>encoding - 使用的编码。默认为 ‘utf8’ 。</li></ol><p>返回值: 返回实际写入的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">len = buf.write(&quot;www.runoob.com&quot;);</span><br><span class="line">console.log(&quot;写入字节数 : &quot;+  len);</span><br></pre></td></tr></table></figure></p><hr><h5 id="从缓存区读取数据"><a href="#从缓存区读取数据" class="headerlink" title="从缓存区读取数据"></a>从缓存区读取数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toString([encoding[, start[, end]]])</span><br></pre></td></tr></table></figure><p>返回值: 解码缓冲区数据并使用指定的编码返回字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(26);</span><br><span class="line">for (var i = 0 ; i &lt; 26 ; i++) &#123;</span><br><span class="line">  buf[i] = i + 97;</span><br><span class="line">&#125;</span><br><span class="line">console.log( buf.toString(&apos;ascii&apos;));       // 输出: abcdefghijklmnopqrstuvwxyz</span><br><span class="line">console.log( buf.toString(&apos;ascii&apos;,0,5));   // 输出: abcde</span><br><span class="line">console.log( buf.toString(&apos;utf8&apos;,0,5));    // 输出: abcde</span><br><span class="line">console.log( buf.toString(undefined,0,5)); // 使用 &apos;utf8&apos; 编码, 并输出: abcde</span><br></pre></td></tr></table></figure><hr><h5 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Buffer.concat(list[, totalLength])</span><br><span class="line">var buffer3 = Buffer.concat([buffer1,buffer2]);</span><br></pre></td></tr></table></figure><hr><h5 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.compare(otherBuffer);</span><br></pre></td></tr></table></figure><p>返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。</p><hr><h5 id="拷贝缓冲区"><a href="#拷贝缓冲区" class="headerlink" title="拷贝缓冲区"></a>拷贝缓冲区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</span><br></pre></td></tr></table></figure><hr><h5 id="缓冲区裁剪"><a href="#缓冲区裁剪" class="headerlink" title="缓冲区裁剪"></a>缓冲区裁剪</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.slice([start[, end]])</span><br></pre></td></tr></table></figure><hr><h5 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.length</span><br></pre></td></tr></table></figure><hr><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><hr><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><p>data - 当有数据可读时触发。</p><p>end - 没有更多的数据可读时触发。</p><p>error - 在接收和写入过程中发生错误时触发。</p><p>finish - 所有数据已被写入到底层系统时触发。</p><h5 id="从流中读取"><a href="#从流中读取" class="headerlink" title="从流中读取"></a>从流中读取</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var data = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">// 创建可读流</span><br><span class="line">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class="line"></span><br><span class="line">// 设置编码为 utf8。</span><br><span class="line">readerStream.setEncoding(&apos;UTF8&apos;);</span><br><span class="line"></span><br><span class="line">// 处理流事件 --&gt; data, end, and error</span><br><span class="line">readerStream.on(&apos;data&apos;, function(chunk) &#123;</span><br><span class="line">   data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readerStream.on(&apos;end&apos;,function()&#123;</span><br><span class="line">   console.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class="line">   console.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure><hr><h5 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var data = &apos;菜鸟教程官网地址：www.runoob.com&apos;;</span><br><span class="line"></span><br><span class="line">// 创建一个可以写入的流，写入到文件 output.txt 中</span><br><span class="line">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class="line"></span><br><span class="line">// 使用 utf8 编码写入数据</span><br><span class="line">writerStream.write(data,&apos;UTF8&apos;);</span><br><span class="line"></span><br><span class="line">// 标记文件末尾</span><br><span class="line">writerStream.end();</span><br><span class="line"></span><br><span class="line">// 处理流事件 --&gt; data, end, and error</span><br><span class="line">writerStream.on(&apos;finish&apos;, function() &#123;</span><br><span class="line">    console.log(&quot;写入完成。&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">writerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class="line">   console.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure><hr><h5 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">// 创建一个可读流</span><br><span class="line">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class="line"></span><br><span class="line">// 创建一个可写流</span><br><span class="line">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class="line"></span><br><span class="line">// 管道读写操作</span><br><span class="line">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span><br><span class="line">readerStream.pipe(writerStream);</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure><hr><h5 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var zlib = require(&apos;zlib&apos;);</span><br><span class="line"></span><br><span class="line">// 压缩 input.txt 文件为 input.txt.gz</span><br><span class="line">fs.createReadStream(&apos;input.txt&apos;)</span><br><span class="line">  .pipe(zlib.createGzip())</span><br><span class="line">  .pipe(fs.createWriteStream(&apos;input.txt.gz&apos;));</span><br><span class="line">  </span><br><span class="line">console.log(&quot;文件压缩完成。&quot;);</span><br><span class="line"></span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var zlib = require(&apos;zlib&apos;);</span><br><span class="line"></span><br><span class="line">// 解压 input.txt.gz 文件为 input.txt</span><br><span class="line">fs.createReadStream(&apos;input.txt.gz&apos;)</span><br><span class="line">  .pipe(zlib.createGunzip())</span><br><span class="line">  .pipe(fs.createWriteStream(&apos;input.txt&apos;));</span><br><span class="line">  </span><br><span class="line">console.log(&quot;文件解压完成。&quot;);</span><br></pre></td></tr></table></figure><p><strong>注意链式流不能一起用，因为是异步的，同时写和读会出错</strong></p><p><strong>那我现在又这么一个需求，我想把input里面的内容写到outInput里面去，但是上面的方法都是把文档里面的内容重置了，我只想添加，而且保留原内容怎么办呢，可以在可读流创建完毕的回调函数里面进行操作</strong></p>]]></content>
      
      
        <tags>
            
            <tag> web-front </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180320 今天学node.js 很开心</title>
      <link href="/2018/03/20/20180320-%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%AD%A6node-js-%E5%BE%88%E5%BC%80%E5%BF%83/"/>
      <url>/2018/03/20/20180320-%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%AD%A6node-js-%E5%BE%88%E5%BC%80%E5%BF%83/</url>
      <content type="html"><![CDATA[<h4 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h4><p>做天室友疯狂奶早操，把今天早操奶没了哈哈哈</p><p>上午毛概，之后郭明强的嵌入式仍然不知道在讲什么玩意，其他人也不知道，看起来他自己也不知道</p><p>所以我一直在搞博客，据说GitHub Pages是静态的，那我能不能知道有办法知道在某一时刻某人访问了这个网页  以后再说</p><p>先把模块加好，标签和footer</p><p>然后设置个字体</p><p>以及友情链接</p><p>中午吃了好多</p><p>下午睡到三点半，之后去教务科交了学务指导反馈，一直在点石办公室呆到现在。</p><hr><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>锅不知道是什么但是很多，让我先学Vue和Node.js</p><p>想着框架用jQuery也能应付应付，不如先学个服务端的东西</p><hr><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>简单的说 Node.js 就是运行在服务端的 JavaScript</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好</p><hr><h5 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h5><ol><li><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块</p></li><li><p>创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器</p></li><li><p>接收请求与响应请求：服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据</p></li></ol><h5 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h5><p>安了Nodejs也就一起安了NPM，它允许用户从NPM服务器下载别人写的第三方包到本地使用，或者下载别人的命令行程序，或者把自己的包或命令行上床到NPM服务器。</p><p>安装分两种，本地和全局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express          # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure><p>本地安装</p><ol><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>可以通过 require() 来引入本地安装的包。</li></ol><p>全局安装</p><ol><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ol><p>如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。</p><hr><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><p>package.json 位于模块的目录下，用于定义包的属性。</p><hr><h5 id="REPL-交互式解释器"><a href="#REPL-交互式解释器" class="headerlink" title="REPL(交互式解释器)"></a>REPL(交互式解释器)</h5><p>说白了就是个终端，输入命令，接受系统响应，node自带的，在终端输入node即可打开。</p><p>几个重中之重</p><ol><li>control+C/.exit 两次退出</li><li>_获取上个表达式运算结果</li><li>多行 … {开始 }结束</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; x = 10</span><br><span class="line">10</span><br><span class="line">&gt; var y = 10</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure></li></ol><p>别的就没了，很简单</p><hr><h5 id="回调函数-事件循环"><a href="#回调函数-事件循环" class="headerlink" title="回调函数/事件循环"></a>回调函数/事件循环</h5><p><strong>Node.js异步编程的直接体现就是回调</strong></p><p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p><p>它使用事件驱动模型，web server 接受到请求时，它不会直接处理，它只会关掉请求，把请求放到处理队列，再去接受下一个请求。</p><p>当达到队列开头，处理后这个结果被返回给用户。</p><p>这个模型非常高效，因为webserver一直接收请求而不等待任何读写，这也被称之为非阻塞式IO或者事件驱动IO</p><p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。</p><p>整个事件驱动流程就是这么实现的，类似观察者模式</p><p>通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 引入 events 模块</span><br><span class="line">var events = require(&apos;events&apos;);</span><br><span class="line">// 创建 eventEmitter 对象</span><br><span class="line">var eventEmitter = new events.EventEmitter();</span><br><span class="line">以下程序绑定事件处理程序：</span><br><span class="line"></span><br><span class="line">// 绑定事件及事件的处理程序</span><br><span class="line">eventEmitter.on(&apos;eventName&apos;, eventHandler);</span><br><span class="line">我们可以通过程序触发事件：</span><br><span class="line"></span><br><span class="line">// 触发事件</span><br><span class="line">eventEmitter.emit(&apos;eventName&apos;);</span><br></pre></td></tr></table></figure><p>通过嵌套深入了解</p><p>其实就像外卖店，接收和发生是分开的，可以不停接订单，后面厨师慢慢做。如果做好了才接下一个订单，效率会非常慢</p><hr><h5 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h5><p>EventEmitter 支持多个事件监听器，当事件触发时，注册到这个事件的事件监听器被一次调用，时间参数作为回调函数参数传递</p><p>它提供了多种方法</p><ol><li>addListener(event, listener); 加到监听器数组尾部</li><li>on(event, listener); 和上面的差不多</li><li>once(event, listener); 一次性监听器</li><li>removeListener(event, listener); 移除</li><li>removeAllListeners([event]); 移除所有的所有，如果指定事件，则移除指定事件的所有监听器</li><li>emit(event, [arg1], [arg2], …) 安顺序执行</li><li><strong>类方法 listenerCount(emitter, event);</strong> 返回指定事件的监听器数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var eventListeners = require(&apos;events&apos;).EventEmitter.listenerCount(eventEmitter,&apos;connection&apos;);</span><br><span class="line">console.log(eventListeners + &quot; 个监听器监听连接事件。&quot;);</span><br></pre></td></tr></table></figure></li></ol><hr><p>error事件</p><p>当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。</p><p>一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。</p><hr><p>继承 EventEmitter<br>大多是时候不会直接用，而是继承，包括fs/net/http，只要支持事件响应，都是它的子类</p>]]></content>
      
      
        <tags>
            
            <tag> web-front </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180319 今天早晨被辅导员叫去喝茶了 很开心</title>
      <link href="/2018/03/19/20180319%E5%96%9D%E8%8C%B6/"/>
      <url>/2018/03/19/20180319%E5%96%9D%E8%8C%B6/</url>
      <content type="html"><![CDATA[<h4 id="20180319-今天早晨被辅导员叫去喝茶了-很开心"><a href="#20180319-今天早晨被辅导员叫去喝茶了-很开心" class="headerlink" title="20180319 今天早晨被辅导员叫去喝茶了 很开心"></a>20180319 今天早晨被辅导员叫去喝茶了 很开心</h4><hr><h5 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h5><p>多亏了我，我们寝5人没出早操</p><p>导致一连串的反应</p><p>包括一群人被叫到辅导员办公室站着</p><p>剩下的不便细说但是哈哈哈哈哈哈哈</p><p>上午算法导论很困，张发勇富有磁性的声音贼催眠，下午测量学 <strong>终于</strong>选定了博客主题，之后和司机去健身，吃饭，图书馆敲代码，直到现在</p><hr><h5 id="首次尝试webStorm"><a href="#首次尝试webStorm" class="headerlink" title="首次尝试webStorm"></a>首次尝试webStorm</h5><p>用学生邮箱在官网免费注册</p><p>IDE功能真的强大一些，何况是世界第一前端IDE</p><p>首先，sublime不提供替代字体，如果字体不支持这些文字，则会用默认字体，比如宋体显示。但webstorm可以有替代字体</p><p>我把所有字体都换成了曲流拐弯的草体，虽然不中用但是看着很爽</p><p>把快捷键初步设置，设置成了sublime的标准</p><p>以后前端用webstorm，sublime就用来写写md和杂七杂八的文档好了</p><hr><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><p>学了jQuery后越发感觉进行项目的阻碍是设计，明明能想到应该是什么风格但是写不出来，所以重新学习CSS。</p><p>写了进度条、水平/垂直导航栏。</p><hr><h4 id="CSS知识点"><a href="#CSS知识点" class="headerlink" title="CSS知识点"></a>CSS知识点</h4><hr><h5 id="List-Style"><a href="#List-Style" class="headerlink" title="List-Style"></a>List-Style</h5><p>List-Style是ul的属性之一，用于设置不同的列表样式。<br>分三种</p><p>List-Style-type 每行前面的标记</p><ol><li>none  无标记。</li><li>disc  默认。标记是实心圆。</li><li>circle  标记是空心圆。</li><li>square  标记是实心方块。</li><li>decimal 标记是数字。</li></ol><p>List-Style-Position 位置</p><p>outside inside inherit(从父元素继承)，区别其实不大</p><p>list-style-image 图像 用图像代替前面的标记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list-style-image:url(&quot;/i/arrow.gif&quot;);</span><br></pre></td></tr></table></figure></p><p>简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ul</span><br><span class="line">  &#123;</span><br><span class="line">  list-style:square inside url(&apos;/i/arrow.gif&apos;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="text-decoration-文本修饰"><a href="#text-decoration-文本修饰" class="headerlink" title="text-decoration 文本修饰"></a>text-decoration 文本修饰</h5><p>可以用这个来把<a>的下划线去掉</a></p><ol><li>none  默认。定义标准的文本。</li><li>underline 定义文本下的一条线。</li><li>overline  定义文本上的一条线。</li><li>line-through  定义穿过文本下的一条线。</li><li>blink 定义闪烁的文本。</li><li>inherit 规定应该从父元素继承 text-decoration 属性的值。</li></ol><hr><h5 id="text-transform-控制文本大小写"><a href="#text-transform-控制文本大小写" class="headerlink" title="text-transform 控制文本大小写"></a>text-transform 控制文本大小写</h5><p>none  默认。定义带有小写字母和大写字母的标准的文本。<br>capitalize  文本中的每个单词以大写字母开头。<br>uppercase 定义仅有大写字母。<br>lowercase 定义无大写字母，仅有小写字母。<br>inherit 不用多说</p><hr><h5 id="overflow-溢出的内容如何处理"><a href="#overflow-溢出的内容如何处理" class="headerlink" title="overflow 溢出的内容如何处理"></a>overflow 溢出的内容如何处理</h5><p>visible 默认值。内容不会被修剪，会呈现在元素框之外。<br>hidden  内容会被修剪，并且其余内容是不可见的。<br>scroll  内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。<br>auto  如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。<br>inherit</p><hr><h5 id="img标签中的alt"><a href="#img标签中的alt" class="headerlink" title="img标签中的alt"></a>img标签中的alt</h5><p>替代文本，如果图片无法正常显示，则显示替代文本</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/16/hello-world/"/>
      <url>/2018/03/16/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>用GitHub pages免费拿了个域名，用hexo整的页面，用的是用烂了的NEXT主题，以后会换</p><p>所以这就是我的博客了</p><p>什么都有可能往上扔，包括技术，日常的流水账，有趣的事，有意思的图和视频，喜欢的音乐，没准还有情感上的（当然不会随随便便让你找到）</p><p>彩蛋啥的，现在还没有，会有的，可能会加上个小游戏，我是说可能</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>20180302 点石产品报告</title>
      <link href="/2018/03/02/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180302/"/>
      <url>/2018/03/02/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180302/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><hr><p>jQuery事件绑定和动画</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><hr><p>文档装载完成后，如果打算为元素绑定时间来完成某些操作，可以用bind()方法来对匹配元素进行特定的时间绑定</p><p>bind( type, [data], fn);</p><p>三个参数，第一个是事件类型，包括：focus/load/click/dblclick/mouse…/keydwon/keypress/keyup/error等，也可以是自定义。</p><p>第二个是可选参数，作为event.data属性值传递给时间对象的额外数据对象。</p><p>第三个是用来绑定的处理函数。</p><p>示例：bind(“click”, function() {});</p><p>如果要多个效果，可以用if else判断使用哪个效果<br>if($(this).next(“div.content”).hide()){};</p><p>简写：$(“#panel”).mouseover(function(){})</p><p>合成事件：hover(enter, leave)，类似于光标悬停事件</p><p>toggle(fn1, fn2, …fnN)鼠标连点事件，轮番调用</p><p>事件冒泡：如果多个事件嵌套，会按照DOM层次结构从底向上至顶端。</p><p>事件冒泡引发的问题：如果只想触发最底层的事件怎么办？</p><p>事件对象：在程序中使用事件对象非常简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;element&quot;).bind(&quot;click&quot;,function(event) &#123;&#125;)  //event: 事件对象</span><br></pre></td></tr></table></figure><p>这样，单击到element时，事件对象就被创建了，这个事件对象只有事件处理函数时才能访问到，执行完成后，事件对象就被销毁。</p><p>停止事件冒泡，jQuery中的stopPropagation()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;span&apos;).bind(&quot;click&quot;, function(event) &#123;</span><br><span class="line">var txt = $(&apos;#msg&apos;).html() + &quot;内层span元素被点击&quot;;</span><br><span class="line">$(&apos;#msg&apos;).html(txt);</span><br><span class="line">event.stopPropagation();//停止事件冒泡</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><p>阻止默认行为，包括超链接跳转，单击提交后表单提交等</p><p>if(username==””) {event.preventDefault();} //停止提交表单</p><p>可以简写为return false; 这是event.preventDefault()和event.stopPropagation();加起来的简写</p><h2 id="事件捕获：jQuery不支持事件捕获，用原生JavaScript"><a href="#事件捕获：jQuery不支持事件捕获，用原生JavaScript" class="headerlink" title="事件捕获：jQuery不支持事件捕获，用原生JavaScript"></a>事件捕获：jQuery不支持事件捕获，用原生JavaScript</h2><p>事件对象的属性</p><ol><li>event.type() 获取事件类型</li><li>event.preventDefault()  阻止默认事件的发生</li><li>event.stopPropagation()  阻止事件冒泡</li><li><p>event.target()  获取触发时间的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(event.target.href); //获取触发事件的&lt;a&gt;元素的fref属性</span><br></pre></td></tr></table></figure></li><li><p>event.relatedTarget(); 相关元素</p></li><li>event.pageX()/event.pageY()获取到光标x、y</li><li>event.which() 在鼠标单击事件中，获取鼠标左中右键，分别返回123</li><li>event.metaKey() 获取键盘事件中的ctrl</li><li>event.originalEvent() 指向原始的事件对象</li></ol><hr><p>移除事件</p><p>$(‘#btn’).unbind(“click”); 不写click就删掉所有的<br>unbind(type, data)  如果把绑定时传递的处理函数作为第二个参数，则只有这个特定的事件处理函数会被删掉。</p><p>移除某个指定事件</p><p>首先要为这些匿名处理函数指定一个变量<br>$(‘#btn’).bind(“click”, myFun1 = function(){});</p><p>$(‘#btn’).unbind(“click”, myFun1);</p><p>需要只触发一次的：</p><h2 id="one-type-data-fn"><a href="#one-type-data-fn" class="headerlink" title="one(type, [data], fn);"></a>one(type, [data], fn);</h2><p>模拟操作 $(‘$btn’).trigger(“click”);</p><p>简化 $(‘$btn’).click();</p><p>也可以触发自定义事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#btn&apos;).bind(&quot;myClick&quot;, function() &#123;&#125;)</span><br><span class="line">$(&apos;#btn&apos;).trigger(&quot;myClick&quot;);</span><br></pre></td></tr></table></figure></p><p>传递数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#btn&apos;).bind(&quot;myClick&quot;, function(event, message1, message2) &#123;&#125;</span><br><span class="line">$(&apos;#btn&apos;).trigger(&quot;myClick&quot;, [&quot;1&quot;, &quot;2&quot;]);</span><br></pre></td></tr></table></figure></p><hr><p>执行默认操作</p><p>trigger()触发后，会执行浏览器的默认操作，不过不想，用triggerHandler()，这个值触发绑定的。</p><hr><p>绑定多个事件类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind(&quot;mouseover mouseout&quot;, function()&#123;&#125;)</span><br></pre></td></tr></table></figure></p><hr><p>添加事件命名空间，便于管理</p><p>bind(“click.plugin”, function(){});<br>unbind(“.plugin”);</p><p>！的作用是匹配所有不包含在命名空间中的click方法。<br>trigger(“click!”); </p><h4 id="jQuery中的动画"><a href="#jQuery中的动画" class="headerlink" title="jQuery中的动画"></a>jQuery中的动画</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show()/hide()</span><br><span class="line"></span><br><span class="line">element.css(&quot;display&quot;, &quot;none&quot;) == element.hide()</span><br><span class="line">$(&quot;element&quot;).show(&quot;slow&quot;);  600毫秒内慢慢显示</span><br><span class="line">fast 200 normal 400 </span><br><span class="line">$(&quot;element&quot;).hide(1000);</span><br></pre></td></tr></table></figure><p>会缓慢减少/增加内容高度、宽度、不透明度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fadeIn()/fadeOut()</span><br><span class="line">和上两个不同，这个只改变透明度</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slideUp()/slideDown()</span><br><span class="line">只改变高度</span><br></pre></td></tr></table></figure><p>自定义动画方法 animate()</p><p>animate(params, speed, callback);<br>params: 包含样式属性及其值的映射{property1:”value1”, property2:”value2”, …}<br>speed: 速度参数，可选<br>callback: 动画完成时执行的函数</p><p>自定义简单动画</p><p>见代码</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180301 点石产品报告</title>
      <link href="/2018/03/01/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180301/"/>
      <url>/2018/03/01/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180301/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><hr><p>校园卡充值页面的制作与相关学习</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><hr><p>第一次接触到正经的项目，尽管是一个很小很小的工程，但学到很多。</p><p>首先是验证用户名和密码，查找余额时使用的正则表达式，从网上把正则表达式常用的格式，虽然自己只能写出来很简单的，但能大概看懂意思。</p><ul><li>简单记录下用途<ol><li>测试字符串内的模式。例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li><li>替换文本。可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li><li>基于模式匹配从字符串中提取子字符串。可以查找文档内或输入域内特定的文本。</li></ol></li></ul><p>具体语法没必要写在这，至少现在对它的需求不高，需要时再搜。</p><p>然后是weUI，我一直不知道有这样牛逼的一个库，之前学css时都是自己摸爬滚打，一个一个div框出来，也能比较整齐但是很繁琐。weUI用起来真的很爽。学会了它的基础组件(按钮文本框选择器等)用法。sui应该也是类似。</p><p>jQuery的weUI教程与下载：<a href="http://jqweui.com" target="_blank" rel="noopener">http://jqweui.com</a></p><p>还有ajax，虽然早就知道，但这是第一次见。</p><p>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。<br>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。</p><p>以及相关的XMLHttpRequest。</p><p>简单记录下常用的：</p><p>data<br>类型：String<br>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p><p>type<br>类型：String<br>默认值: “GET”)。请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</p><p>url<br>类型：String<br>默认值: 当前页地址。发送请求的地址。</p><p>username<br>类型：String<br>用于响应 HTTP 访问认证请求的用户名。</p><p>error<br>类型：Function<br>默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。<br>有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。<br>如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是 “timeout”, “error”, “notmodified” 和 “parsererror”。<br>这是一个 Ajax 事件。</p><p>success<br>类型：Function<br>请求成功后的回调函数。<br>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。<br>这是一个 Ajax 事件。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><hr><p>一上手感到什么都不会，但这也是高效率学习的一种方式，拿着本书看不知道孰重孰轻，这样通过项目来学习虽然学的浅，但是将方向明确了，知道了哪里是重点，是做项目肯定用到的。想要往深学也会明白方向。</p><p>其实没写下来多少代码，正则表达式、ajax的内容要我现在写我也只能照着改，今天还没写光查资料了，比如这一堆window.location.search.substr(1).match(reg)都要查，但我觉得照着改是有必要的，也是加深理解的方式。</p><p>还是那样，理论的知道了，不知道的也知道从哪查了，多积累经验。</p><p>其实上个学期没怎么动，这个假期我才刚开始认真学编程，尽量保持每天三到五小时学习，但是过年也落下一段时间。下个学期需要专注提升技术，重点是培养习惯。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180226 点石产品报告</title>
      <link href="/2018/02/26/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180226/"/>
      <url>/2018/02/26/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180226/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>经过宅哥指点，我应该通过产品向的技能来提升前端水平，即产品设计，看了看推荐的书单，简约设计还算不错，去年十月也推荐我们读来着，下了本电子书马马虎虎过了一遍，感觉适合我，买了纸质书认真读。</p><p>下面是它的概要，我半抄半改的。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><ul><li><p>首先人们喜欢简单、值得信赖、适应性强的产品。所以我们才会费尽心力去设计简单的产品。人们喜欢简单的产品原因是：</p><ol><li>产品的功能越多，就越难发现真正对用户有价值的新功能。</li><li>因为增加的复杂性导致他们很难找到自己真正需要的功能。而且，一想到为那么多没用的功能买单，他们就高兴不起来。<br>但是用户简单，并不意味着我们的技术或者管理简单。简单的技术或者管理，不一定就能创造简单的用户体验。看看google就知道了，他们为了使搜索变得简单，但是需要雇佣几千人在背后进行复杂的技术。所以简单的设计一点也不简单。</li></ol></li><li><p>如何进行简单设计? 首先，我们必须认识到我们是为主流用户设计简单的体验，而不是专家型用户。用户分三种</p><ol><li>专家型用户：专家型用户愿意探索你的产品或服务，这类用户占总体的少数。</li><li>随意性用户：随意性用户可能使用过类似的产品或服务，有兴趣使用更为复杂的产品，但是不愿意接触全新的产品，除非新功能足够简单。这类用户也很少。</li><li>主流用户：主流用户是最大地群体。他们使用产品的目的是完成任务，他们永远也不会产生学会所有功能的想法。“我的手机只要能打电话、发短信就行了”。</li></ol></li><li><p>上面三种用户，我们应该忽略专家型用户，专家不是典型用户，他们最求主流用户根本不在乎的功能。他们的意见会使产品越来越复杂。我们应该为主流互用去设计产品。</p></li></ul><p>二、我们需要走出办公室，到软件的使用环境中观察用户，理解用户。</p><p>三、我们将从用户那搜集的素材，整理成故事，用它来描述用户的体检。</p><ol><li>可信的环境：时间、地点。</li><li>可信的角色：谁、为什么。</li><li>流畅的情节：什么、怎么样。</li></ol><p>四、从故事中寻找设计得突破点，并列出设计要点。</p><p>五、把这些设计要点按顺序排列出来，哪一个因素影响最大。哪方面容易改变。</p><p>六、验证你的见解<br>简单设计的四个策略：</p><ol><li>删除</li><li>组织</li><li>隐藏</li><li>转移</li></ol><p>理解四个策略，设计一个DVD遥控器。</p><ol><li>删除：去掉所以不必要的按钮，直到不能再减。</li><li>组织：按有意义的标准将按钮划分成组。</li><li>隐藏：把那些不是最重要的按钮安排在活动仓盖之下，避免用户的注意力。</li><li>转移：只在遥控器上保留最基本的功能按钮，将其他控制转移到电视屏幕上的菜单力，从而将遥控器的复杂性转移到电视上。</li></ol><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>删除不必要的，组织要提供给用户的，隐藏非核心的，将复杂性转移到适合它的地方。</p><p>对我们来说，简单的用户体验不简单，而是把简单留给用户，把复杂留给自己，我想这是这本书最重要的原则了。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180225 点石产品报告</title>
      <link href="/2018/02/25/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180225/"/>
      <url>/2018/02/25/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180225/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>按着《锋利的jQuery》学，进度三分之一，完成了jQuery的选择器与DOM操作和表单，正在学事件和动画。</p><p>学过的代码基本自己敲了一遍。</p><p>接下来的目标是将2048和太空保龄球游戏自己用jQuery框架重写，提高应用熟练度。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>这里对学过的jQuery内容做一个小总结。</p><p>首先是JavaScript，它有三个弊端</p><ol><li>复杂的文档对象模型（DOM）</li><li>不一致的浏览器的实现</li><li>缺乏便捷的开发、调试工具</li></ol><p>正当JavaScript跌入低谷时，Ajax(异步的JavaScript和XML)诞生了。Google的一系列新型web应用让人们意识到Ajax的强大</p><p>JavaScript的几个库的对比</p><ol><li>prototype，最早成型的JS库之一，内置对象扩展，现在还有不少项目在用prototype，但结构松散。</li><li>Dojo，强大之处在于有非常多其他js库没有提供的功能，适合企业级应用，得到了IBM、SUN等大公司支持，缺点也明显，学习曲线抖，API不稳定。</li><li>YUI，Yahoo开发的，规范，DOM操作和Ajax应用封装的很丰富，还包含了几个核心CSS文件</li><li>MooTools，轻量、简介、模块化和面向对象。语法和prototype几乎一样，但功能、拓展性和兼容性更强。核心代码就8KB，完整版不过160KB。</li><li>jQuery，轻量，强大的选择器、出色的DOM操作、可靠地事件处理、完善的兼容性、链式操作都是它的优点，它的关注度在逐渐上升。创建于2006年。</li></ol><p>引入jQuery的方法不多说了</p><p>$是jQuery的一个简写形式，为了保证DOM加载完成后再执行jQuery操作，开头用$(document).ready(function() {主代码})</p><p>很像JS的window.onload方法。</p><ul><li><p>jQuery对象和DOM对象，很简单，注意一般jQuery对象前加个$。相互转化时，jQuery转化为DOM要以数组形式（$cr.get.(0)），DOM转化为jQuery时用document.getElementById(“cr”)得到DOM对象，再var $cr=$(cr)</p></li><li><p>选择器，首先我已经了解到了CSS选择器，jQuery的选择器几乎一样。</p><ol><li>基本选择器：#id，.class，element，*，可以用逗号隔开一起返回。</li><li>层次选择器：ancestor decendant(后代), parent &gt; child(子代), prev + next (选紧接在prev元素后的next元素)，prev ~ siblings(选prev之后的所有siblings元素)</li><li>过滤选择器：:first, :last, :not(selector), :even索引偶, :odd索引奇, :eq(index)索引等于, :gt(index)索引大于, lt(index)索引小于, header 所有标题, animated 有动画的</li><li>属性过滤选择器：[attribute], [attribute=value], !=, ^=以value开始, $=以value结束, *=含有,[][][]取交集</li><li>子元素过滤选择器：:nth-child(index/even/odd/equation)从1算起, :first-child, :last-child, only-child只选唯一的子元素</li><li>表单对象属性过滤选择器：:enabled, :disabled, :checked, :selected</li><li>表单选择器：:input/text/…种类名称/file/hidden不可见</li></ol></li></ul><hr><ul><li><p>DOM操作分类(js)</p><ol><li>DOM Core 获取表单对象 document.getElementsByTagName(“form”)，获取某元素src 属性 element.getAttribute(“src”)</li><li>HTML_DOM 获取表单对象 document.forms，获取某元素src属性 element.forms。某些对象和属性既可以用Core实现，也可以用HTML_DOM实现</li><li>CSS_DOM element.style.color = “red”</li></ol></li><li><p>jQuery 中的DOM操作，我在代码里做了注释，可读性还行，所以直接搬过来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">//查找元素节点</span><br><span class="line">var $li = $(&quot;ul li:eq(1)&quot;);</span><br><span class="line">var li_txt = $li.text();</span><br><span class="line">alert(li_txt);</span><br><span class="line">//查找属性节点</span><br><span class="line">var $para = $(&quot;p&quot;);</span><br><span class="line">var p_txt = $para.attr(&quot;title&quot;); //查找p元素节点属性tittle</span><br><span class="line">alert(p_txt);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">//创建元素节点和文本节点和属性节点</span><br><span class="line">var $li_1 = $(&quot;&lt;li title=&apos;香蕉&apos;&gt;香蕉&lt;/li&gt;&quot;);  //创建第一个&lt;li&gt;元素</span><br><span class="line">var $li_2 = $(&quot;&lt;li title=&apos;雪梨&apos;&gt;雪梨&lt;/li&gt;&quot;);</span><br><span class="line"></span><br><span class="line">$(&quot;ul&quot;).append($li_1);//添加到&lt;ul&gt;节点中，使之能在网页中显示</span><br><span class="line">$(&quot;ul&quot;).append($li_2);//可以采取链式写法</span><br><span class="line">//$(&quot;ul&quot;).append($li_1).append($li_2);</span><br><span class="line">*/</span><br><span class="line">var $li_1 = $(&quot;&lt;li title=&apos;香蕉&apos;&gt;香蕉&lt;/li&gt;&quot;);</span><br><span class="line">var $li_2 = $(&quot;&lt;li title=&apos;雪梨&apos;&gt;雪梨&lt;/li&gt;&quot;);</span><br><span class="line">var $li_3 = $(&quot;&lt;li title=&apos;其它&apos;&gt;其它&lt;/li&gt;&quot;);</span><br><span class="line">var $parent = $(&quot;ul&quot;);</span><br><span class="line">var $two_li = $(&quot;ul li:eq(1)&quot;);</span><br><span class="line">$parent.append($li_1); //放到最后边</span><br><span class="line">$parent.prepend($li_2); //放到最前面</span><br><span class="line">$li_3.insertAfter($two_li);</span><br><span class="line"></span><br><span class="line">//删除节点</span><br><span class="line">$(&quot;ul li:eq(1)&quot;).remove();  //返回值是一个已经被删除的节点，可以继续用</span><br><span class="line">var $li = $(&quot;ul li:eq(1)&quot;).remove();</span><br><span class="line">$li.appendTo(&quot;ul&quot;);</span><br><span class="line">$parent.append($(&quot;ul li:eq(1)&quot;));</span><br><span class="line"></span><br><span class="line">//清空节点内容</span><br><span class="line">$(&quot;ul li:eq(1)&quot;).empty();</span><br><span class="line"></span><br><span class="line">//复制节点</span><br><span class="line">$(&quot;ul li&quot;).click(function() &#123;</span><br><span class="line">//注意参数true，如果有true，则复制时同事复制绑定的事件</span><br><span class="line">$(this).clone(true).appendTo(&quot;ul&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//替换节点</span><br><span class="line">//$(&quot;p&quot;).replaceWith(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;);</span><br><span class="line">//$(&quot;&lt;strong&gt;你最不喜欢的水果是?&lt;/strong&gt;&quot;).replaceAll(&quot;p&quot;);</span><br><span class="line"></span><br><span class="line">//包裹节点</span><br><span class="line">$(&quot;strong&quot;).wrap(&quot;&lt;b&gt;&lt;/b&gt;&quot;);//用b标签包裹起来</span><br><span class="line">//wrapAll()是将所有选择的节点包在一个里，而wrap是分别包</span><br><span class="line"></span><br><span class="line">//设置属性</span><br><span class="line">$(&quot;li&quot;).attr(&quot;title&quot;, &quot;my title&quot;);</span><br><span class="line">$(&quot;ul&quot;).attr(&#123;&quot;title&quot;: &quot;your title&quot;, &quot;name&quot;: &quot;your name&quot;&#125;);</span><br><span class="line"></span><br><span class="line">//删除属性</span><br><span class="line">$(&quot;ul&quot;).removeAttr(&quot;title&quot;);</span><br><span class="line"></span><br><span class="line">//获取样式和设置样式</span><br><span class="line">var p_class = $(&quot;p&quot;).attr(&quot;class&quot;); //获取</span><br><span class="line">$(&quot;p&quot;).attr(&quot;class&quot;, &quot;high&quot;);</span><br><span class="line"></span><br><span class="line">//追加class类</span><br><span class="line">$(&quot;input&quot;).click(function() &#123;</span><br><span class="line">//$(&quot;p&quot;).addClass(&quot;another&quot;);</span><br><span class="line">$(&quot;p&quot;).toggleClass(&quot;another&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//移除class</span><br><span class="line">//$(&quot;p&quot;).removeClass(&quot;high&quot;); </span><br><span class="line">//或者链式，或者removeClass(&quot;high another&quot;);</span><br><span class="line">//如果没有参数，则移除所有</span><br><span class="line"></span><br><span class="line">//判断是否有样式</span><br><span class="line">$(&quot;p&quot;).hasClass(&quot;another&quot;);</span><br><span class="line">$(&quot;p&quot;).is(&quot;.another&quot;);</span><br><span class="line"></span><br><span class="line">//设置和获取HTML、文本和值</span><br><span class="line">var p_html = $(&quot;p&quot;).html();</span><br><span class="line">alert(p_html);</span><br><span class="line">$(&quot;p&quot;).html(&quot;&lt;strong&gt;你最喜欢的水果是？&lt;/strong&gt;&quot;);//设置p元素中的HTML代码</span><br><span class="line"></span><br><span class="line">var p_text = $(&quot;p&quot;).text();//获取p元素的文本内容</span><br><span class="line">alert(p_text);//打印</span><br><span class="line">$(&quot;p&quot;).text(&quot;你最讨厌的水果是？&quot;); //设置文本</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">用val选择</span><br><span class="line"></span><br><span class="line">$(&quot;#single&quot;).val(&quot;选择2号&quot;);</span><br><span class="line">$(&quot;#multiple&quot;).val([&quot;选择2号&quot;, &quot;选择3号&quot;]);</span><br><span class="line">$(&quot;:checkbox&quot;).val([&quot;check2&quot;, &quot;check3&quot;]);</span><br><span class="line">$(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span><br><span class="line">// 也可以使用attr()实现</span><br><span class="line">/*</span><br><span class="line">$(&quot;#single option:eq(1)&quot;).attr(&quot;selected&quot;, true);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/* 遍历</span><br><span class="line"> * children() 取得所有子元素，但不包括后代元素</span><br><span class="line"> * next() 取得匹配元素后面紧邻的同辈元素</span><br><span class="line"> * prev() 取得匹配元素前面紧邻的同辈元素</span><br><span class="line"> * siblings() 取得前后所有</span><br><span class="line"> * closeset() 取得最近的匹配元素，首先是自己，然后是向上查找父元素，逐级向上，如果没有就返回个空的</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> // 设置样式</span><br><span class="line"> $(&quot;p&quot;).css(&quot;color&quot;);//获取p元素的样式颜色</span><br><span class="line"> $(&quot;p&quot;).css(&quot;color&quot;, &quot;red&quot;);  //设置</span><br><span class="line"> $(&quot;p&quot;).css(&#123;&quot;fontSize&quot;: &quot;30px&quot;, &quot;backgroundColor&quot;: &quot;#888888&quot;&#125;);</span><br><span class="line"> $(&quot;p&quot;).css(&quot;opacity&quot;, &quot;0.5&quot;);  //透明度</span><br><span class="line"> $(&quot;p&quot;).css(&quot;height&quot;); //高度</span><br><span class="line"> $(&quot;p&quot;).height();//获取p元素的高度</span><br><span class="line"> $(&quot;p&quot;).height(100);//设置</span><br><span class="line"> $(&quot;p&quot;).height(&quot;10em&quot;)//如果带单位，要用字符串</span><br><span class="line"> //width同理</span><br><span class="line"> var offset = $(&quot;p&quot;).offset();//元素在当前视窗的相对偏移</span><br><span class="line"> var left = offset.left;//左偏移</span><br><span class="line"> var top = offset.top;//右偏移</span><br><span class="line"></span><br><span class="line"> //相对于最近的祖父节点的相对偏移</span><br><span class="line"> var position = $(&quot;p&quot;).position();</span><br><span class="line"> var left = position.left;</span><br><span class="line"> var top = position.top;</span><br><span class="line"></span><br><span class="line"> var $p = $(&quot;p&quot;);</span><br><span class="line"> var scrollTop = $p.scrollTop; //获取元素的滚动条距顶端的距离</span><br><span class="line"> var scrollLeft = $p.scrollLeft; //左边</span><br><span class="line"></span><br><span class="line"> $(&quot;textarea&quot;).scrollTop(300);  //元素的垂直滚动条滚到指定位置</span><br><span class="line"></span><br><span class="line">利用val设置账号密码的灰色提示信息</span><br><span class="line"> $(&quot;#address&quot;).focus(function() &#123;</span><br><span class="line">var txt_value = $(this).val();  //获取地址文本框的值</span><br><span class="line">if(txt_value==&quot;请输入邮箱地址&quot;) &#123;</span><br><span class="line">$(this).val(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&quot;#address&quot;).blur(function() &#123;</span><br><span class="line">var txt_value = $(this).val();</span><br><span class="line">if(txt_value==&quot;&quot;) &#123;</span><br><span class="line">$(this).val(this.defaultValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//也可以使用defaultValue</span><br></pre></td></tr></table></figure></li></ul><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>相对于之前学的Java和C，没有自动补全是一个难点，需要大量经验来提高熟练度，掌握常用的API，能够形容它，至少知道如果要搜，应该怎么搜到。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180224 点石产品报告</title>
      <link href="/2018/02/24/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180224/"/>
      <url>/2018/02/24/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180224/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>反思自我，重新规划前端学习路线，Vue框架对于现在的我来说有些困难，这几天又是看视频又是看官网，看的云里雾里，不能说没看懂，但完全有更高效率的途径。应该从jQuery重新学起，在学习的同时通过实例来提高 HTML/CSS 的熟练度，练习页面布局设计基础。</p><p>现在的目标：将之前的2048游戏用jQuery框架重写，之后进行移动端适配，在掌握好jQuery之后，学习HTML5的内容，比如说canvas。以上要花不少时间。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>jQuery的优点：轻量，强大的选择器，出色的DOM操作的封装，可靠地事件处理机制，完善的Ajax，不污染顶级变量，出色的浏览器兼容性，链式操作方式，隐式迭代，行为层与结构层的分离，丰富的插件支持，完善的文档，开源。</p><p>jQuery的概念和历史。2003年开始，2013年突飞猛进。</p><p>jQuery选择器的使用。</p><p>基本选择器，层次选择器，过滤选择器。</p><p>在公众号上添加校园二手交易平台模块的可行性分析与设计：</p><p>我们的目标用户是 <strong>有一定量二手交易需求的地大学生</strong>。</p><ol><li>我的想法是，只提供信息浏览功能，信息包括商品图片，商品描述，价钱，本人联系方式，备注。买主如果看中，可以通过联系方式私下交涉，我们没必要给他们搭个联络平台。同时也模块上不涉及金钱，只是标注多少钱，买卖私下自行解决。</li><li>这么看功能不多，就是点进页面，分两个大按钮，一个是“我想买”，一个是“我想卖”，前者跳转商品信息浏览页面，页面包括列举的商品和搜索功能，后者跳转商品信息发布页面。</li><li>考虑到我们的能力和人们平时的习惯，大部分人是在小众的平台上得到想认识的人的联系方式后加微信qq联系，交易也没有比支付宝和微信更靠谱的，再加上讨价还价，价钱多半会修改，所以我们不需要这些交易和社交功能。</li><li><p>可行性：竞品这边，二手交易平台，地大有群，但是人们只能随缘浏览商品，一旦信息被刷上去，就不会有人看到，根本无法系统的对比。我们的优势是更加整齐规划的罗列，再加上校园公众号的威信。咸鱼这边，它对我们来说更像是个工具，有个短语叫“可走咸鱼”，也就是说买主卖主很少是通过咸鱼认识，大部分人能当面交易不会邮寄，能在附近找到买主就不会上咸鱼，发布二手信息一般是在所有二手交易平台同时发布。</p></li><li><p>如果有人是咸鱼的死忠粉，我在二手群也关注了很久了，这种人通常是群里和咸鱼同步发布，看哪边先成。而且咸鱼联系和寄货很麻烦。</p></li><li><p>我们主要是从二手群里引流，再加上那些嫌麻烦或者比较内向的不想在群里发布信息却又二手交易需求的用户。</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180222 点石产品报告</title>
      <link href="/2018/02/22/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180222/"/>
      <url>/2018/02/22/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180222/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>商业逻辑。</p><p>项目经理和产品经理的关系。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>三类商业逻辑</p><ol><li>商业逻辑是直接面向客户出售某种商品或者服务。</li><li>商业逻辑是为用户免费提供一部分产品或服务，然后通过另一部分付费的增值服务获得盈利。</li><li>商业逻辑是通过为用户提供产品或服务，慢慢积累起海量的访问流量或数据，然后引入第三方来变现。</li></ol><p>用户黏性</p><p>用户黏性就是用户对你产品的忠实度。什么样的设计能让用户有黏性呢？就是产品设计的逻辑要嵌入到用户的日常行为里。例如，小米在手环里面加进去一个自动解锁的功能。把手环变成一个ID，带着手环开手机不需要输密码就可以自动解锁。这样忽然有一天你把手环忘在家里，不得不又恢复了输入手机密码的状态，你会不会觉得非常不适应？这样用户就开始有了黏性。</p><p>在这个逻辑里，用户行为最好是高频和有固定频次的。BAT们的产品就有很多增加黏性的设计，支付宝的信用卡还款、生活缴费功能就是此类逻辑。说完用户黏性，我们再来说说直播电商。</p><p>自动解锁</p><p>直播是2016年的一个大风口，2017年中国直播市场规模达到了50亿美金。直播也发展到不再是单纯生产内容的工具，而成为与具体业务结合的业务工具，广泛应用于电商、教育、财经等领域。说直播电商逻辑之前，你需要了解：认知闭合需求。</p><p>认知闭合</p><p>认知闭合需求是心理学的概念。意思是说，当人们面对一个模糊的问题时，给问题找一个明确答案的欲望。比如，古代人不知道为什么下雨，下雨这个问题没有闭合，就让人很难受。所以古代人就用雷公、电母、龙王解释下雨的原因，虽然没什么根据，但满足了认知闭合需求。</p><p>在高认知闭合下，我们会想要赶紧有一个合理的答案，这时候就不愿意接受复杂的信息和新观点。这和直播电商有什么关系呢？</p><p>举个例子，你在淘宝买电动车，买电动车是你的心理任务，所以你就要为了完成这个任务做决策。假如淘宝上正在卖一款新型的电动车，虽然你很心动，但你可能还是会选择传统的电动车。因为传统的电动车满大街都是，别人都在用，可以让你的认知迅速闭合。但新型电动车有很多复杂的功能，需要你做很多判断，在你需要尽快做决定的时候，你很可能就不会选新产品。</p><p>但如果你正在很悠闲地看一个介绍新型电动车的视频，跟着视频了解了这个电动车，你就能接受复杂的信息，最终完成购买。所以，直播电商因为降低了“认知闭合需求”，让人更容易接受复杂的信息，让那些复杂并且难以比较的产品，能相对容易地卖出去。</p><p>说完直播电商，我们再来谈谈最近火爆的直播答题以及背后的逻辑：流量逻辑。</p><p>流量逻辑</p><p>流量逻辑决定生意规模的边界，互联网行业就是圈人的行业。无论是线上生意还是线下生意，我们都离不开“获客”这个最核心的基本逻辑。单个用户的获取成本是多少？是15块钱还是50块钱？找到新兴渠道的流量红利，判断渠道的流量边界。这就是流量逻辑。拿直播答题来讲，就是直播答题这个渠道的流量成本远远小于其他获客渠道，比起今日头条CPC每个用户100块的激活成本和视频网站300块的激活成本，直播答题的获客成本要小的多。</p><p>在直播答题类的产品里，钱直接给到用户，成就了高效率和低成本。而用户的时间是有限的，答题抢占了用户时间，他们就不会去用微信、打《王者荣耀》了。所以BAT巨头也会进入到直播答题这个领域。获客成本会越来越高，直到达到获客成本和客户终身价值的边界。</p><p>有同学会问流量都在百度、阿里、腾讯和美团手里，我该怎么办？好，下面我们再来谈谈入口逻辑。</p><p>入口逻辑</p><p>在互联网时代，几乎每个入口都会引起争夺。做个设想:你到任何地方去，必须要从第一个入口进去，进了门以后，楼里面有各个房间，每个进入房间的只有几个人，但是所有人都要从大楼的门口进入。可想而知，这个楼里每个房间的重要性都不及第一个入口。</p><p>在互联网初期，随着互联网内容的膨胀，就产生了互联网内容入口。一开始只是用简单的目录方式呈现，也就是雅虎。后来内容太多，只有用搜索做入口，就诞生了巨大的互联网企业谷歌。</p><p>中国也类似，搜索入口是百度，内容入口是新浪。Web2.0时代，互动社交的兴起，社交应用的蓬勃发展，又形成了社交入口，塑造了美国Facebook和中国的腾讯。在未来的人工智能时代，智能音箱、可穿戴设备、智能家居必然成为巨头们争夺的入口。因为入口是市场里的稀缺资源，占领了这个资源，你就能实现市场份额这个战略目标。</p><p>讲完入口，我们再来说说单点突破，我们知道腾讯重构了很多产品，邮箱、音乐、播放软件等，这些产品本来就有，腾讯作为后来者打败酷我、暴风影音等竞争对手的商业逻辑就是单点突破。</p><p>单点突破</p><p>单点突破就是选择一件值得做的事情，只做一件事、做好这件事，做透这件事，做到别人不想象。任何产品都有核心功能，宗旨就是能帮助到用户，解决用户某一方面的需求，比如节省时间、解决问题、提升效率等等。而这个核心功能可能来自于一个小小的需求点，这个点很单一，很刚需。</p><p>QQ影音就是聚焦了所有的机器都能播放，解决了播放能力、占用内存的问题，进行单点突破——“我这个破机器，只有QQ影音能放”，就这一句话，单点突破了，口碑出来了，用户就知道你行。</p><p>讲完腾讯，回头我们再来讲讲阿里，讲讲电商。谈电商势必谈品类逻辑。</p><p>品类逻辑</p><p>先普及一个名词，SKU=Stock Keeping Unit，指代电商行业里商业/产品的最小单位，简单起见，可以将SKU理解为商品或课程。</p><p>电商行业的SKU大致分为4种：</p><p>Traffic Builder （流量型SKU）：该类SKU是给网站带来流量Traffic的。其普遍存在的形式，是一些低价的、购买决策周期较短、有高频购买场景的优惠类型商品。比如：可乐，抽纸、洗漱等快消品。该类SKU的核心作用就是吸引大规模的用户流量。<br>Margin Builder （利润型SKU）：该类SKU是贡献利润的，售卖的利润率比较高。<br>GMV Builder （交易额SKU）：该类SKU是为网站贡献GMV交易额的，可以让网站交易额看起来很大，但是利润率可能不高，比如，iPhone X，网站成交一台交易流水GMV是9K，但是实际利润率可能不如可乐、零食来的高。<br>Core SKU （核心品类SKU）：这类SKU是网站的核心优势品类产品，是区别于其他网站的核心竞争力要素。比如，京东早期的核心品类是3C电子，淘宝早期的核心品类是服装。该类SKU是电商网站竞争力的核心。<br>品类战略的逻辑，首先通过 Traffic SKU，吸引大量的流量，然后通过Core SKU建立用户的第一心智，比如买3C到京东，形成用户留存和转化，最后将流量引导至 Margin SKU做深度的商业变现，赚取利润。早期为了获取流量，Traffic SKU往往是需要牺牲利润甚至是赔钱的，京东做图书来打当当就是这个逻辑。</p><p>网络效应</p><p>网络效应就是用户越多，价值越大。有些产品，用户越多，使用价值越大，这就是具有网络效应的产品。例如：语言、货币、电脑操作系统，都是具有网络效应的物品。</p><p>那什么叫网络效应呢？一瓶矿泉水你觉得它值1块钱，那么，当这瓶矿泉水的销量是100瓶的时候，你觉得他值1块钱；当这瓶水的销量涨到1万瓶的时候，这瓶水对你的价值还是1块钱。也就是说一种产品的价值，跟它的用户数量没有关系，那么我们说这种产品不具备网络效应。</p><p>但是倒过来，电话，如果你拥有世界上唯一的一台电话，这台电话对你来说有什么意义吗？那只不过是个玩具。如果世界上有十个人有电话，这电话的价值涨了不少；如果有1000个人有电话呢？1万个人有电话呢？100万人有电话呢？这电话对你的价值就大增了。换句话说，你对电话的估值，随着电话用户的数量增大而增大，那么这种产品我们就说它具有网络效应。</p><p>对于社交产品来说，多一个用户的关系链，就会带来用户数的几何增长。一旦用户增长突破一个临界点之后，会最终进入“赢家通吃”的状态。微信随着客户群体的扩大，平台上的可消费内容增加，平台的价值增加，平台的估值就增加。因而机构给承载了人们之间信息交换的的微信估值8000亿。</p><p>微信、Facebook都是非常典型的需求端的网络效应，用户会主动传播，帮助企业接近零成本的获取新用户，用户越多就会吸引更多的人加入这个网络，这个网络的价值自然就越来越大。</p><p>除了社交，不受地域或区域限制的产品也具备网络效应，像Google的模式就是跨区域的，既可以给美国人民提供搜索服务，也可以给巴西人民提供搜索服务。AirBnb也是，它也是跨区域的，越多的房东加入到Airbnb里，就可以让全世界使用Airbnb的租房者都有更多的选择。反过来，更多的租房者加入到Airbnb之后，也能给全球Airbnb的房东带来更多潜在的收入。当一个上海的年轻人要去伦敦房东的房子住的时候，Airbnb不但一下获得了两个很好的用户，他们还给所有在Airbnb这个网络里面的人带来了未来的福利。很多Airbnb的租客回到自己的家后，可能就摇身一变成了房东了。这种练买家卖家都能随时切换的网络效率是非常高的。</p><p>讲完网络效应，我们再讲讲规模效应。</p><p>规模效应</p><p>规模效应又叫密度效应，就是越多用户使用产品，产品的服务成本就越低，从而使更多的人能负担起产品，也就有了更多的用户。</p><p>密度效应也是饿了么这些企业对抗BAT们的大杀器。早年阿里进入外卖业务时，饿了么非常紧张。因为淘宝、支付宝流量很大，只要开一个口子，就会有很多订单。但实际情况口碑外卖的订单总量不小，但是缺乏密度，比如一个餐厅每天只有一两单外卖。</p><p>因为缺乏密度，商家也就不当回事。饿了么们就是把密度做起来，这样一笔交易里面物流费用和广告成本就会压缩到最低。打个比方，饿了么的配送员在一栋楼里面送10碗面，两块钱一单就行；但要让他在整个浦东送10碗面，没8块钱一单绝对干不了。这就是密度效应。</p><p>规模效应也有劣势，就是不能像网络效应那样形成垄断，因为如果在需求端没有网络效应，供给端的规模效应再强大，用户的转移成本依然很低。这也是为什么美团打车依然可以向滴滴发起挑战的原因。</p><p>生态链</p><p>生态链可以说是互联网的新物种。纵观中国互联网发展史，可以明显发现，本土互联网企业的崛起，机会都是先引入国外商业模式，然后通过强化本地化特点来构筑自己的壁垒。这时候出现的小米生态链公司就是这种新物种，它走的是相反的路线：依托中国的内在优势诞生，创造了可以向世界扩散的全新商业模式。</p><p>这种商业模式的理论基础是：在万物互联的物联网（IOT）阶段。未来的某天，我们身边所有的设备都可以联网，都可以通过手机进行控制。小米决定通过投资+孵化的方式来抓住时代趋势。即系统性提升效率。</p><p>在产品端，生态链公司在选品上能与小米其他产品形成协同，为生态增值；目标用户为小米粉丝群体、受众广泛、将能利用规模经济降低成本的创新产品纳入小米生态链。这些产品与现有生态链产品关联紧密，具备未来和系统进行互联的想象空间，可以贡献数据。而生态链公司制造出的多品类产品，相比于传统公司，更好的实现了数据交换和互联互通，是基于物联网的产品。</p><p>在渠道端，小米的这些产品组合通过线上的小米商城和线下的小米之家为主的渠道零售。这些销售渠道的特点是，“几乎零渠道成本、零广告成本，非常高效”。</p><p>小米生态链模式的未来就是建立一个基于物联网的，除自由市场电商（淘宝）、百货店电商（京东）之外的第三种电商业态——遥控器电商。</p><p>降维攻击</p><p>简单解释就是：你挣的钱我不挣，我能挣到的钱你挣不到。具体实现路径：通过为用户提供产品或服务，慢慢积累起海量的访问流量或数据，然后引入第三方来变现。这种互联网的创新方式就是：列强如果做了就得灭亡自己。早年周鸿祎做免费杀毒软件就是如此，杀毒软件巨头如果跟着去做免费杀毒，相当于自己的利润全都没有了，但如果不做，只能等着被360不断侵蚀市场份额。</p><p>这就是互联网企业对传统企业的降维攻击。具体实现逻辑有点复杂，我来讲一下。要实现降维攻击，就要抓住三条主线：主干链条、节点属性和过程衍生。这是什么意思呢？</p><p>我们知道，传统的企业，只有产品这一个维度。不管获得顾客还是盈利，都得靠产品本身。但是，互联网模式就不一样，互联网企业能从一个维度扩展到三个维度，主干链条、节点属性和过程衍生。</p><p>主干链条。互联网企业爱说一句话，叫羊毛出在狗身上，猪来买单。这话的意思是，互联网公司一般是做一个产品，产品获得了流量，聚集起来一批用户，但挣钱的地方不在这里，在别的地方。比如小米，先做手机，得到了很大的流量，和庞大的用户群，然后通过后面的路由器、手环等智能硬件、手机周边产品挣钱。所以，互联网企业的模式，总结起来就是一个主干链条，从流量产品到利益相关者，再到盈利产品。</p><p>这是第一个，主干链条维度。接下来我们再说说第二个，节点属性维度。</p><p>节点属性。“流量产品-&gt;利益相关者-&gt;盈利产品”这是一个主干链条，这个链条上的任何一个节点都可以划分出很多不同的属性，而每个新的属性呢，都有可能成为新的商业模式，形成新的维度。</p><p>比如说，针对流量产品来说，它的节点可以是外观、功能、价格、服务、体验。每个节点还可以再细分，比如，外观就有长、宽、高、触觉、颜色等；举个实际的例子，小米路由器是怎么热销起来的？它就是拓展了体验的维度，允许你自己安装。这个属性引起了一大群技术宅的PK，小米路由器就比单纯外观好看的产品高一个维度。</p><p>再比如，对于游戏用户来说，按照经济实力、游戏技能这两个维度的高低就可以分为四类：有钱但玩的不够好；有钱而且玩的非常好；没什么钱而且技能一般；没什么钱但玩的很好。在这里面，开发游戏的公司就瞄准了占主流的两种用户：一种有钱但玩的不好，另一种虽然没什么钱但玩的很好。对有钱玩不好的，给他们设计道具；对于没钱但玩的好的，给他们设计更有挑战的升级模式。这样一来，通过建立道具交易市场，就能够形成游戏业的互联网模式。从这个角度看，更精细其实就是占领了更高维，可以对对手发动降维攻击。</p><p>最后讲下第三个，过程衍生维度。</p><p>过程衍生。其实就是前面两个维度交叉延伸，生出的新维度。举个例子，阿里巴巴，从交易平台做起，然后不断建构起支付、物流、互联网金融等等商业合作关系，这其实就是通过不同维度的交叉，发现了一个新的维度。</p><p>巨头之间也经常相互之间玩降维攻击。<br>百度是搜索领域的绝对老大，但搜狗和360，硬是从百度嘴里抢走了一快市场，为什么？因为百度再牛也只是个网页，用户打开百度页面，得先打开浏览器吧，搜狗和360都做了浏览器，处在更高维，所以通过浏览器推荐自家的搜索服务，就能分走百度一快市场。现在，从移动互联网时代向人工智能时代过渡，智能音箱行业出现百箱大战，也是巨头怕别人从高维抢用户。</p><hr><p>首先，从知识领域来说，项目经理要求技术背景，这是必须的，一般团队的项目经理由非常有项目经验的RD担当，他的职责在于将目标转化为可量化可实现的项目计划，偏重于执行层面。而产品经理的知识领域较泛，且不一定非要求懂技术。</p><p>其次，从责任周期来说，项目经理职责有始有终，他可以负责完一个项目后，再无缝切换到另外一个项目，而产品经理基本不能，产品经理随着产品一同成长，产品的成长更迭伴随着无数的项目。</p><p>第三、侧重点不同，项目经理关键词：项目、排期、人月；产品经理关键词：需求、用户、产品。最后，假如把产品比作一个小孩，那么产品经理就是这个小孩的的妈，而项目经理是这个小孩成长过程的一个老师，老师可以教不同的小孩，小学老师可以把小孩从一年级培养到六年级，小孩结业，老师又换教另外一批学生。</p><p>这样就明白了产品经理和项目经历的关系，老师可以换，而小孩的妈能随便换吗？</p><p>最后补充一点，在大公司，产品经理和项目经理分工是非常明确的，但在初创公司和一些中小型公司产品经理和项目经理通常是一个人，节约人力和沟通成本。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>我想我更适合做项目经理，产品其实比较偏向意识和设计，而项目更偏向于管理，对于我来说，项目经理更合我口味，当然产品和项目本身就是比较接近的两个行业，有时还会合并成一个，所以现在学习些产品的内容是很有好处的。</p><p>至于项目管理的学习，先找着文章，看看网课，这个不急，毕竟一般项目经理要求技术出身，先学好前端才是要紧的。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180218 点石产品报告</title>
      <link href="/2018/02/18/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180218/"/>
      <url>/2018/02/18/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180218/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>区块链、比特币的初步理解</p><p>vue大量练习，包括鼠标点击事件，键盘事件，动态绑定CSS样式，组件化应用构建，计算属性。</p><p>思维还是比较混乱，需要找实例试着完成。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>区块链是什么？</p><p>一句话，区块链是一种 特殊的 分布式数据库 。</p><p>这几个字你可能都认识但未必真正理解。比如，数据库是什么？它具备什么样的特性？分布式数据库又是什么意思？区块链特殊在哪里？别急，请往下看。</p><p>数据库是什么？</p><p>简单来说，数据库是一个存储数据的“仓库”，既然是仓库，那么它就必须有进货（新增）、出货（删除）这两项基本功能。</p><p>为了满足日常需求，比如需要查找某种货品，统计其数量，或者某种货品摆错了位置等等，因此还需要“查询”和“修改”功能。</p><p>这就是数据库的最基本的四项操作“增删改查”。</p><p>“分布式”数据库又是什么？</p><p>分布式即“分开”部署数据库 。这里的分开有两层含义，物理的分开和逻辑的分开。</p><p>物理的分开 很好理解，可以简单理解为数据存储在不同的主机上，在物理上是相互独立的。</p><p>为什么会产生这样的需求呢？因为在互联网全球化的大背景下，跨国性互联网公司已经屡见不鲜，而在本国本地部署服务器在改善用户体验上至关重要。</p><p>举个例子，比如前段时间苹果将iCloud服务从香港转移到云上贵州，好处之一就是访问速度的加快。</p><p>逻辑的分开 稍微难懂一些，笔者举一个简单的例子。比如说淘宝，同一个账户可能既是买家，又是卖家，买家身份产生的订单和卖家身份产生的订单在逻辑上是可以分离的。</p><p>由于淘宝的订单量巨大，一台机器无法存储所有订单，于是淘宝某程序员灵机一动，将买家订单和卖家订单分别存储在两台机器上。这个完美的解决方案在不失逻辑整体性的前提下，既克服了技术困难，又满足了业务需求，两全其美，当年该程序员拿了36个月年终奖金（本故事纯属虚构）。</p><p>分布式数据库虽然可能部署在多个地区，逻辑也可能被拆分，但是归根到底，它是一个化整为零的整体。</p><p>所以，分布式数据库可以简单地理解为，将一个数据库按照一定规则部署到多台服务器，对内可以是零散的，但对外必须是一个整体。</p><p>区块链特殊在哪里？</p><p>说了这么多，相信您对数据库和分布式数据库有了一些基本认知，那么区块链到底特殊在哪里呢？</p><p>在具体讲区块链之前，还需要对区块链的结构有一个基本理解，也是非常之简单。</p><p>区块链，顾名思义就是 由“区块”组成的链 。</p><p>其结构是一条长长的，首尾不相连的链条，类似下图。</p><p>图中每一个圆珠可看作一个区块，区块内则是记录的数据。</p><p>由于区块链是和比特币一同兴起，因此区块链还有一个不是特别严谨的别名——“分布式账本技术”。</p><p>之所以被称为账本，举个例子，“比特币区块链”所记录的内容都是这样的</p><p>B 转给 A 0.5比特币</p><p>A 转给 B 1比特币</p><p>C 转给 D 2比特币</p><p>C 转给 E 1比特币</p><p>X 被奖励50比特币</p><p>诸如此类千篇一律，像极了一篇流水帐。</p><p>有了这些基本概念，接下来我们再看看它的特殊性。</p><ol><li>数据人人可查</li></ol><p>是的，一般的数据库都是有账号密码才能访问的，可区块链不一样。</p><p>任何人可以查询任意区块的信息。比如这里就是“比特币区块链”的第50万个区块信息。</p><p>区块的信息一目了然，所记录的交易信息也完整具体，没有一丝隐瞒。</p><p>不过与传统交易不同的是，我们不知道绿色框线宽选的“比特币钱包指纹”背后的持有者是谁，是一条狗也说不定。</p><ol><li>数据人人可写（去中心化）</li></ol><p>又是一个无比熟悉的词汇。也许你知道，区块链是无管理员的，无中心的，但是很少有人去介绍它的具体运作方式。</p><p>是的，区块链理论上是人人可写的。但写入的前提是要拥有足够的“计算能力”去从无穷无尽的数字海洋中 穷举 出那个符合要求的数字。</p><p>计算数字的过程叫做挖矿，其从业者被称为矿工。</p><p>“比特币区块链”的设计者中本聪在顶层设计上保证了大概每10分钟才能产生一个新的区块，而一个区块的大小被限制为1MB（1024KB，512*1024个汉字）。</p><p>也就是说，不管全球有多少比特币的交易需求，就只能记录1MB大小的账。</p><p>这样的数据量对于一家超市来说可能都难以满足。</p><p>而且更要命的是，由于区块链的人人可写，那么如果两个矿工同时写入就会产生一个链分叉的问题。</p><p>那么，谁写入的数据是真正的区块呢？由于去中心化没有统一的管理员，现在的规则是这样，哪条分支先达到6个区块 （称为”六次确认”） 就是正宗的主链，而其它的区块链将被无情舍弃。按照10分钟一个区块计算，一小时才能确认。</p><p>可以看到，即便倾全球的计算能力，交易速率也只能达到每秒钟2次多交易。</p><ol><li>数据人人备份</li></ol><p>前面说过区块链是分布式的，而区块链的设计方式简单粗暴，每个人都有所有人交易的备份。</p><p>举个例子，你有一张信用卡，月底的时候想看看自己的账单，结果银行把全球的账单都发给你了。</p><p>也许你问，干嘛要把别人的账单也发给我？我只需要自己的呀！</p><p>初次听闻确实有点荒谬，有点反人类。</p><p>但数据人人备份才是区块链去中心化的根基。试想一下，如果银行的交易系统发生故障，把你的账户金额清空了，如果银行自身无法查出真相，估计你只能血本无归，因为能证明自己账户曾经有钱的人只有你自己。</p><p>中心化的好处在于有一个统一的中心，替我们承担了很多不必要的管理工作。对个体而言有诸多便利，可要知道，由于居中的管理者依然是有血有肉有欲望的人，所以难免会有垄断后的各种弊病。</p><p>目前看来，中本聪去中心化的初衷是实现了的。从“2009-01-09 10:54:25”创世区块产生，到现在九年多的时间，这个系统在全球人的参与下平稳运行。</p><p>最后</p><p>你也许听说过，区块链一旦被确认写入，就无法再修改。</p><p>虽然这九年的时间，从来没有人反映自己的区块被修改了，但并不意味着一定不行。</p><p>一个区块所在的链是否为主链，是由“算力”投票决定的。</p><p>假如一个矿工拥有全网51%以上算力，那么他将会有一家独大的可能。也就是说，他生成的区块，无论记录的数据多么荒谬，在规则上，其他人必须被迫承认其正统地位。</p><p>中本聪的设计初衷是去中心化，可最终却可能 得到 一个中心化地位无法撼动的怪物。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>比特币是建立在区块链的基础上的，可是比特币比区块链更早被广为人知，可能是因为人们更容易理解具体的概念。</p><p>区块链除了比特币以外的应用？</p><p>使用Vue框架后，明显变得简洁，有序，但是需要理解的更深，我估计还得有十天才能理解透彻的之前写的2048套进vue里面。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180217 点石产品报告</title>
      <link href="/2018/02/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180217/"/>
      <url>/2018/02/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180217/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>阿里的集五福和腾讯的红包之间的对比与联系。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>今年阿里再拿15亿制造声势，除了通过AR扫福字、蚂蚁庄园和蚂蚁森林活动、朋友间转赠福卡等形式集五福瓜分5亿之外；还有“一字千金、红包传心”活动，通过选“帅、美、福、酷、瘦”五字送福；并与央视春晚达成合作，在春节期间发放总额超过10亿的现金红包……阿里的确在春节红包发放史上创下了声势最浩大的记录。</p><p>而腾讯则发布春节期间的QQ走运红包两大玩法以及《2017中国人运动报告》，用2亿推动社交强互动和健康走步，通过步行+红包的方式倡导健康春节并送上健康祝福；除此之外，还针对用户个人红包上线“联名限量款红包”，用户可通过四大时尚品牌定制专属个人红包……腾讯QQ作为人手必备的社交应用，在渗透多领域用户的能力上毋庸置疑。</p><p>然，孰胜孰负却难用钱数裁夺。</p><p>红包成春节必备，内中潜藏社交刚需</p><p>近几年，互联网红包兴起，除了日常你来我往的消费转账，还有很大一部分来自于朋友、亲人间感情的维系，而这些感情上的“交易”更是在春节这个中国人的传统团圆聚友时节里得到了最大程度的激发，春节抢红包成了必备项目。</p><p>其实，中国传统春节本就包含发红包这一活动，如今，互联网的普及让红包从线下转移到了线上，但其所承载的情谊不仅没有变少，反而更加丰富了。现在的春节红包不再是仅限于亲友间一代人对下一代人的鼓励和肯定，更多的成了好友、同事间的问候与祝福。</p><p>其一，红包被用来与久未联系、甚至多年未见的朋友们表白情谊。对中国人来说，春节是最重要的传统节日，回家与亲人团圆、除旧迎新，一切忧愁与烦恼都在新年伊始消散，对新一年的祝福也从此开始。红包正是这些感情的载体，没有煽情的话去尬聊，一个春节红包就可以代表很多。</p><p>其二，与相处了一年的同事朋友无需多言，用红包加深祝福。同事、上下级关系处理起来并不容易，但却是每个人在一年中酸甜苦辣都一同尝遍的伙伴，是为了同一目标而奋斗、并肩作战的战友，同事之间的红包祝福简单直接，无需过多言语。</p><p>其三，与亲人之间开不了口去表达心意，红包成了感情载体。如今，在外漂泊的人越来越多，在含蓄内敛的中国人身上，一年未见的炙热感情并不会倾泻而出，我们会选择委婉曲折的方式去表达，红包就是其中之一。将自己一年的奋斗成果凝聚成最明了的心意，以此向亲人传递难言的感情……</p><p>可以看出，对于中国人来说，从张张崭新的钞票红包，到如今互联网红包传情达意，红包的来往之中暗含着中国人的社交刚需。</p><p>巨头火拼红包战场，用户取舍重走心</p><p>如今春节红包战场上两大巨头火拼，各自为王。阿里豪斥15亿造势，QQ则用2亿加深用户交流，一个是商业拉量，一个则更贴近生活，而谁的影响力更大，胜负仍然掌握在用户手中。</p><p>一方面，临近春节，集五福的浪潮越卷越大，这是支付宝15亿的诱惑所致。然而对于不擅于做社交的阿里来说，集五福如今仅限于熟人间的来往，用户除了自己扫福，就是向熟悉的人索要福卡，而福卡在大多数用户交流中所起到的作用微乎甚微，甚至向不熟悉的人索要会引起反感的例子不在少数。</p><p>在此背景下，15亿红包所承载的感情却变了质，红包所具备的交流意义已经由拉近彼此关系演变为赤裸裸的瓜分红包。社交涵义在单薄的分享点击操作下变得薄弱，附带感情价值变少，红包的金额则成了主要关注点。对于支付宝来说，刺激更多年轻人关系链的成长应当成为新的关注点，而非年年通过集福卡这种有待更多创新的形式，渐渐让福卡的作用变了质。</p><p>另一方面，反观2亿QQ走运红包，通过整个2017年的步数回顾引出红包主题，再通过计入春节步数推动健康生活，走运红包所承载的价值与前者相比高下立见。再看个人限量版红包打造，让本就受众广泛的QQ红包拥有了更为下沉、更贴近生活的活动渠道和方式，满足了当代年轻用户个性化的呈现需求。</p><p>QQ本身作为一大全民社交应用，其覆盖着用户更多形态的社交链，而红包本身所包含的实际价值与附带情感价值，更容易在弱性的社交链中起到强互动的作用，直接推进用户社交需求的满足。再加上春节期间对健康的生活方式的引导，更让走运红包蒙上了一层正能量的、积极的色彩。</p><p>总的来说，两巨头火拼本就势均力敌，但不论金额多寡，春节红包所承载的社交特性在其中起到了关键性的作用。</p><p>用户需求将成未来春节红包影响力导向</p><p>其实，如今各行各业都更加注重用户体验和需求，从以前线下的商户导向，到如今以用户为导向，这标志着个人需求已经成为企业发展新的风向标。简单来说，得用户者得民心，得用户者得天下。</p><p>同样在春节红包发放上，用户需求也将是唯一且最为重要的发展导向，得用户内心最真实需求者，才能成为红包大战的长久赢家。同理，QQ走运红包和个人“联名限量款红包”的推出：</p><p>一来满足了用户在春节期间的刚性社交需求，通过个性化红包形态在不同社交关系链中的流通，满足了用户对不同强弱程度的社交互动需求。</p><p>二来，用2017年的步数统计激发健康生活趋势，再鼓励春节期间走动记步的模式引导健康生活，QQ走运红包拥有了更为丰富积极的内涵。</p><p>三来，尊重传统习俗和用户个人需求意愿，让春节快乐的氛围之余还增添了更多健康和真诚的味道，丰富了春节红包的意义和价值。</p><p>如今再看15亿与2亿的差别，则能立见高下。在QQ走运红包的走心推行下，互联网业内也出现了新的行业标杆，春节红包发放将在QQ红包的基础之上变得更讲究、更走心、更有深意。</p><p>总的来说，时时以用户需求为导向的企业，也会是最得民心的企业。未来，用户需求将成一切企业得民心的出发点。15亿与2亿的分别，也向我们展示了一场不一样的竞争打法，金额多寡并非决定性因素，用户需求终是企业发展风向标。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>文章中也有窃取额的地方，比如提到阿里缺乏创新，其实用手挡住的脸扫福字就是一个不错的创新，这种照片只能别人替你拍，从而增加了社交性，逐渐让扫五福成为了一种生活方式，将扫五福和过年紧密的联合在一起。</p><p>相对来说，腾讯的红包，主要平台是QQ，而中老年人是最在意红包的，他们是扫五福和抢红包，总之各种“白嫖”的主要用户，但他们主要使用的是微信，QQ更偏向于年轻人，所以我认为这个效果不是很理想。</p><p>在qq登录的原因是QQ已经有了不少类似的活动案例，也有QQ运动这么个载体，而微信一向是以“简单明了”为重点的风格，这种红包活动自然不适合在微信上进行，也是很无奈。</p><p>我想微信可以试着把红包植入到小程序里，等明年专门推出一个红包小程序，功能包括根据某种条件给你发红包（比如今年是步数）和定期定点限量红包。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180216 点石产品报告</title>
      <link href="/2018/02/16/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180216/"/>
      <url>/2018/02/16/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180216/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>抖音案例学习</p><p>突然了解到吴亦凡现在是抖音的首席运营官，这是今年2月1号的事。</p><p>从热度上来看，抖音现在与快手抗衡和美拍，”北快手，南抖音”已经是当前的现象。</p><p>而且由于抖音是后起之秀，仅500多天能达到现在的高度，这个案例非常值得学习。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>自影像技术诞生以来，全世界范围内最受欢迎的短视频就是MV（music video），音乐短视频，是所有短视频里最头部的部分。但是MV拍摄困难，能随机对着镜头装模作样演一下的人不少，能随时随地对着镜头说一段唱一段的人不多，对嘴表演模式创造性的解决了这个问题，通过音频台词，剧本我都给你写好了，你只要表演，而且音频时长控制在15秒，降低了表达成本，增加了内容趣味，恰巧因为这个低成本内容也变得易扩散。同时，在碎片化的时代人们更愿意接收短而具备娱乐性的东西。</p><p>抖音是一款音乐创意短视频社交软件，是一个专注年轻人的15秒音乐短视频社区。用户可以通过这款软件选择歌曲，拍摄15秒的音乐短视频，形成自己的作品并支持一键发布到社区，可以获得他人的点赞、评论和分享。</p><p>在这个娱乐至死和娱乐至上的社会，面对庞大的新生代、二次元人群的娱乐需求，同时，满足大众的自嗨和「成名」心性，抖音短视频按照以下核心业务逻辑和产品结构作为解决方案。</p><p>抖音短视频的发展大事件梳理——</p><p>抖音短视频自2016年9月上线，截止目前仅500天，便锁定了App Store摄影与录像类应用第一名及免费总榜第二名（间断会冲到第一名），上线365天内，实现视频日均播放量超过10亿次，日活过千万。这是一份多么疯狂而靓丽的成绩，对于普通产品经理来说可能一生都无法企及，让我一起来看看它经历了什么。</p><p>以下是我浏览了抖音官微全部的微博（2335条）、公众号文章以及其他网络资料梳理的历史重要事件。</p><p>抖音在短短500天从无到有，变成一个全民都在使用的APP，让使用者哇哇的叫，纷纷表示抖音中毒，这中间到底发生了哪些有趣的事情，又有哪些弯路？尤其是，抖音在产品和运营上都做了哪些动作，加快了这一发展奇迹？</p><p>竞品情况简介</p><p>抖音短视频APP在所处的短视频领域并没有任何先发优势，国内短视频霸主快手成立于2011年，新浪微博的秒拍成立于2012年，就连美拍（2014）和小咖秀（2015）也均早于抖音1年多上线，好在抖音选择了更加细分的音乐短视频领域进行发力，最终实现了弯道超车。</p><p>以下是主要的竞争对手——</p><p>快手：短视频领域当今霸主，2017年3月获得由腾讯领投的3.5亿美元融资，截止2017年11月日活跃用户数已经超过1亿，总注册用户数据已经超过7亿，每天产生超过1000万条新视频内容。<br>秒拍：背靠新浪微博的强流量导入，轻松实现日活千万及日播放量过亿，但是秒拍本身的自产流量能力较差，流量过度依赖于新浪微博，发展瓶颈较低。资本方面，2016年11月21日，秒拍母公司一下科技确认完成5亿美元E轮融资，估值超过30亿美金。<br>好看视频：百度亲儿子，依靠百度强大的技术及雄厚的资金实力，自2017年11月16日发布以来，已冲到娱乐免费榜第27名，因入局较晚，产品仍处在打磨阶段。<br>快手是国内领先的短视频APP，用户群体主要集中在三四线城市，平台达人主要通过炫富、晒娃、犯傻、歌唱、跳舞等吸引流量，如何渗透到一二线城市，一直是快手的痛点，截止到今日，仍未看到快手突破这一僵局，而抖音的用户群体主要集中在一二线，且普遍年龄在24岁以下，恰恰是快手无法触及和吸引的群体，所以，在音乐短视频领域，快手想要干翻抖音，我认为短时间内概率不大。</p><p>另一个竞争对手秒拍过度依赖微博，归属于同一母公司的小咖秀因过度依赖于明星造势，后劲不足，虽然小咖秀也上线对标抖音的「晃咖」，但是市场反应并不大，围剿抖音的道路也非常艰巨。</p><p>至于百度的好看视频，暂时还看不到能够挑战抖音的能力，未来值得关注和期待。</p><p>以上是仅简单的陈述竞品情况，为了让文章更加聚焦，后续不会再开展分析。会把整个文章分析的视角主要集中在抖音短视频上，以后会分别输出各类产品的深度解析报告。</p><p>二、产品成长分析</p><p>2.1产品整体发展走势分析</p><p>我们可以将抖音短视频的发展分为3个阶段：</p><p>第1阶段：</p><p>2016年9月至2017年4月——产品探索期</p><p>这一阶段，抖音短视频在市场的整体影响力可以忽略，基本处于产品的方向摸索和探索期。虽然，从始至终的定位是一款年轻人的音乐短视频社区，但是，在前期产品的格调及用户的喜好方面仍然花费了一些时间探索，甚至对产品名称进行了更改（从A.me更改为抖音短视频）。</p><p>第2阶段：</p><p>2017年5月至2017年12月——第一波产品成长期</p><p>这一阶段，抖音实现了产品的爆炸式增长，通过不断对运营端加持砝码，在短短的半年内，用户量增长了10倍以上！这一阶段主要的增长引擎是运营端，通过不断赞助热门综艺节目，其中包括《中国有嘻哈》、《快乐大本营》和《天天向上》等，快速收揽一大批追求独立、个性和无处安放寂寞的中国小花朵。</p><p>这是截止到目前抖音最重要的一个发展阶段，这一阶段让抖音完完全全的暴露在大众视野，实现品牌和产品双扩散，奠定了音乐短视频类目的佼佼者地位。借助在此阶段高速增长，抖音也开始了商业化道路的探索。</p><p>第3阶段：</p><p>2017年12月至今——第二波产品高速增长期</p><p>这一阶段，抖音长居iOS排行榜前2名，摄影与录像细分类目第1名，基本锁定2018年第一季度最受欢迎的APP。这一阶段抖音已经完全有能力实现自增长，但是，谁也没有想到的是在线「直播问答」成为开年新风口，在这个流量似黄金的年代，谁也不愿意放弃超低成本吸引流量的机会，通过引入「直播问答」的新风口，抖音迎来了第二波产品高速增长，继续凯哥前行。</p><p>在接下来的分析中，我们会详细围绕着这几个阶段来进行解读。</p><p>2.2产品分阶段迭代分析</p><p>1、产品探索期（2016年9月至2017年4月）</p><p>产品探索期对于所有C端产品来说都存在锁定目标用户、找寻用户的特性及需求、接触用户验证产品功能并不断打磨，对于抖音来说也不例外。</p><p>短视频作为成熟的市场，不需要抖音投入精力去教育用户。短视频在国内市场已被多商家深耕多年，产品包括快手、秒拍、小咖秀等，曾经红极一时的小咖秀通过明星对口型爆火，很大程度上教育了国内用户接受这种简易而轻松的娱己乐人的方式。</p><p>在此阶段，作为一个全新的短视频社区，抖音面临最大的困难是如何吸引大众触网。主打有魔性的音乐短视频APP，在产品整体的格调和功能未确认之前，无法贸然的通过运营手段暴力拉新，但是，又需要吸引一批用户使用并反馈才能逐渐明确产品功能，这个冷启动对于抖音来说是一个挑战。</p><p>本阶段主要用户群体：有自我展示需求的达人。<br>本阶段核心用户需求：好玩，能拍出魔性的视频，制作精美的MV。<br>本阶段抖音商业需求：吸引达人入驻平台，尽可能多的拍摄有趣、有料、有个性的音乐短视频。<br>产品主要迭代版本&amp;迭代逻辑分析：</p><p>产品版本迭代上，此阶段涵盖V1.0.0~V1.4.0，主要是用来确认产品格调，找到年轻人对音乐短视频接收的最佳方式，完成产品从内部YY到被数十万用户使用并接受的蜕变。</p><p>这个阶段是抖音面临困难最多的，因为这个阶段直接决定了抖音的成败。也是在此阶段，抖音为了找到更好的触及用户，在V1.2.2版本将名称由A.me更改为抖音短视频同时更改了产品logo，同时，重点打磨自己视频拍摄工具的能力。</p><p>另外一个点，抖音本身作为一个音乐短视频娱乐社区，本身社交基因很弱，所以，在起初抖音团队就尝试通过查找通讯录、邀请QQ好友和微博好友等方式，试图扩展抖音的社交局限。</p><p>在V1.0~V1.2.2版本中，除了基本的拍摄功能打磨外，主要的变化就是讲产品名称由A.me更改为抖音短视频。</p><p>在V1.1.0版本也就是第二个正式对外发布的版本，抖音就加入了社交功能，支持查找通讯录、邀请QQ和微博好友等，虽然这是一项基本能力，但是把它放这么高的优先级，多少能够感觉到抖音团队对社交的渴望，同时也想通过社交来拉动产品增长。</p><p>用户评论：</p><p>抖音团队承接了今日头条爸爸的技术强基因，产品上线起初在视频的观看流畅度、拍摄及上传方面做得就非常不错，加上竖立全屏沉浸式观看交互，大大降低了用户门槛，用户接受程度很高。</p><p>这一阶段的用户评论多为好评，作为一个新生APP实属难得。通过不断优化视频拍摄，增加美颜、滤镜和贴纸等增强拍摄视频的观赏性和愉悦性，让用户哇哇哇~</p><p>另一方面，对于一些更加前卫或者立足于互联网行业的老兵则表现了敌对情绪，主要因为抖音整体的定位和交互均疑似「抄袭」北美一款同类型音乐短视频应用musical.ly，恰巧musical.ly未在国内发力，并将重心放在了北美，直到2017年6月6日，musical.ly更名muse才正式进驻中国，这时候抖音已奠定国内音乐短视频的头把交椅。2017年11月10日，今日头条10亿美元购北美音乐短视频社交平台Musical.ly，将与抖音合并，当然，这都是后话。</p><p>除此之外，很多用户反馈无法正常登陆，不管是手机号码、还是QQ、微信、微博，笔者猜想，因探索期人力投入有限，可能只有一个测试人员或者产品经理兼职测试的，作为一个普通模块未得到足够重视，也有可能未进行压力测试，在高峰期时造成无法登录，当然，这一问题抖音团队很快就解决了。</p><p>此阶段的运营策略：</p><p>此阶段抖音并没有采用任何过激的运营手段，主要在抖音内部建立话题视频挑战，刺激视频库的增长，同时，雇佣专业的舞蹈或音乐达人拍摄视频，并发布到各主流视频平台上进行宣传引流。</p><p>百度新闻上，直到3月15日，因岳云鹏1月13日转发一条名为用户岳云云带有抖音水印的短视频微博才引来一丝曝光。当然，在翻阅了抖音短视频的微博能发现，岳云鹏转发此微博并非偶然，而是运营人员多次@岳云鹏微博，最终，引起了岳云鹏的注意并转发，岳云鹏是拥有超过1000万粉丝大V，此条微博转发5083、点赞83175，直接带动抖音第一次进入大众视野。</p><p>针对官方微博方面，起初也并未投入过多精力运营，产品2016年9月26上线，在2016年11月02日（刚发布V1.1.0版本）才发布第一条微博，此条微博可能也是因为新版上线才由内部领导推动发布，当然，也有可能是产品经理兼职发布，此时并未投入专人运营微博。</p><p>此阶段的微博用户关注量极低，运营手段也只是不定时通过转发带有抖音水印的达人视频，评论和用户转发量基本可以忽略。</p><p>阶段小结：</p><p>对于抖音团队来说此阶段用户量并不是首要考虑要素，在业务的黑盒子里尽快的找寻到出路才是重中之重。通过实际接触用户，调整此前内部对于用户的一切的意淫，用真实的用户反馈和数据不断优化调整产品，再不断的触及潜在目标用户，再反馈调整….尽快在产品商业价值和用户之间找寻平衡，通过用户评论可以明显感受到抖音做到了。</p><p>2、产品成长期（2017年5月至2017年12月）</p><p>经过半年的产品摸索和数据沉淀，抖音已经基本完成了第一轮产品打磨和初始用户的积累。顺利完成了冷启动，接下来面临的一个问题是如何扩大市场份额，尽快的开疆拓土，抢占国内音乐短视频的头把交椅，并进而向短视频霸主「快手」进攻。但是，这场仗并不轻松，快手在3月底刚完成新一轮3.5亿美元的投资，同时，国内BAT巨头均纷纷加持短视频市场，短视频领域的战争远远没有结束。</p><p>本阶段主要用户群体：国内追求独立和自由、娱乐至上的95后人群。</p><p>本阶段核心用户需求：愉悦自己，探索更多视频玩法，拍摄更美更有趣的视频，希望得到大家的赞赏。</p><p>本阶段抖音商业需求：吸引用户抢占市场份额，在保证日VV（视频播放量）的情况下试水商业模式。</p><p>产品主要迭代版本&amp;迭代逻辑分析：</p><p>此阶段主要涵盖了产品V1.4.2~V1.6.7的版本，面向大众一共迭代了18次。整个迭代过程主要围绕着以下三个问题展开：</p><p>如何能让拍摄更好看。<br>如何能让拍摄更好玩。<br>如何增大平台对达人的吸引力，并初步探索商业模式。<br>抖音给出的答案通过不断在拍摄上优化滤镜、美颜、贴纸等拍摄更美的视频；增加诸如染发、音乐特、AR相机、尬舞机是等拍摄玩法增加拍摄趣味性；在对达人的吸引上，借助黑科技更智能的实现视频分发，增大达人与潜在受众的接触频次，提高达人关注量及爱心，同时，平台主动帮助达人打通微博主页，让达人可以将流量导流到微博中，借助微博的生态来变现。</p><p>在V1.4.5版本中，首页的『新鲜』更改为『附近』，宣传口径方面由最新精彩内容看不停更改为发现身边有趣的人。这一改动笔者认为首页已经有推荐页了，而且用户的主要浏览也是在推荐页，新鲜和推荐页覆盖达人视频一定程度上重叠，新鲜页面后台数据反馈用户使用量不高（猜测）；同时，抖音内部一直在加强产品的社交属性，附近页面能够勾起大众对身边达人的好奇心，更愿意去观看身边的人的故事，另一方面，增加达人在附近人群的曝光量，其实也是一种流量分发机制。</p><p>V1.5.1版本支持达人绑定个人微博主页，并且支持一键跳转到微博页面，虽然是一个很小的功能迭代，但是，在抖音未明确达人变现途经的情况下，可以借助微博生态来变现，增大吸引达人入住平台的砝码。</p><p>抖音也在此阶段开始联合商家进行信息流广告，开启商业模式的探索。2017年9月21日，抖音与Airbnb、哈尔滨啤酒和雪佛兰合作推出的三支品牌视频广告，并且大获成功，抖音产品负责人王晓蔚表示：这个模式将会是未来抖音商业化的发力点。</p><p>在V1.6.0版本中，『谨慎』的加入了直播功能，之所以『谨慎』是因为直播入口非常的隐秘（目前，story栏，个人主页的头像，视频右侧的头像，是三个直播间的入口），于此同时，需要满足一定条件才可以开通直播功能。据今日网红曝料，抖音粉丝在5万以上的达人才有开播的权限。不过抖音回复：“根据之前站内表现综合考量的，粉丝数量不是唯一标准。”</p><p>直播已经具备成熟的商业模式，并且短视频和直播具有天然的结合度，两者均围绕着平台达人深度运营，通过短视频切入直播领域是一个非常犀利的手法，相反，从直播切入短视频并没有那么容易，不过通过短视频出位的达人能否适应即时的直播，用户是否买账？这些都还不得而知，需要持续观察。</p><p>用户评价：</p><p>这一阶段的评价整体向好，众多用户纷纷表示已抖音中毒，无法自拔，每天刷抖音不知不觉一两个小时就过去了。同时，也可以看出这一阶段达到了拍摄视频好看，好玩的效果，通过用户评论可知一二。</p><p>甚至有很多快手的老用户也纷纷转战抖音。另一方面，伴随着用户的暴增，抖音后端系统承受了很大的数据压力，虽然抖音团队内部对流量的暴涨有一定的准备，但是，依然出现很多无法登录、视频播放卡顿、网络被挤爆掉的情况。我相信每次产品升级，抖音技术团队都将是此夜无眠。</p><p>此阶段的运营策略：</p><p>这阶段的整体运营策略归结起来就是：砸钱上最热门的节目。</p><p>在2017年3月份因岳云鹏的微博第一次进入大众视野后，用户量开始增长，抖音团队也开始逐步加大抖音的媒体运营力度。也是在同年3月23日，直接竞争对手「快手」完成由腾讯领投的新一轮3.5亿美元投资，并开始在市场上强推品牌，这一定程度上加快了抖音全面推向市场的时间点，短视频领域新一轮的烧钱大战正式开启。当然，和滴滴与快的当年的补贴大战不同，此次烧钱主要在营销推广上，各类最热门的综艺节目，成了双方抢占的制高点。</p><p>通过网络及官方渠道查询，整理出抖音在此阶段的媒体赞助：</p><p>通过以上连续且强势的广告植入和轰炸，抖音在短短的半年内用户量增长10倍以上，同年8月视频日播放量已突破10亿。不难发现抖音基本上将2017年主流的综艺节目赞助了个遍，通过节目本身带来的流量，抖音占据了同类市场和产品中的领先地位，一跃在iOS总榜上排名第二，摄影与录像类别长居第一。</p><p>阶段小结：</p><p>经过这一轮的增长，抖音在国内短视频领域站稳了脚步，但是，谁是国内短视频最终的王者还远没到下结论的时候。虽然抖音社区内部整体的视频内容优与快手，但是，不论是用户保有量、日视频产量还是日视频播放量，快手均遥遥领先于抖音，是绝对的短视频霸主，很期待接下的一切变与不变。</p><p>3、高速自增长期（2017年12月至今）</p><p>开年刚刚进入2018，从国民老公王思聪开始撒币之后，直播答题类产品成了开年第一个风口，开始席卷国内，在这个流量似黄金的年代，直播答题类产品的获客成本是3元左右，远远低于市面上正常的几十上百的价格。</p><p>对于国内超级独角兽今日头条来说，怎么可能放过这次机会，纷纷将航空母舰产品今日头条、旗下视频矩阵产品火山小视频、抖音短视频、西瓜视频加上直播答题——《百万英雄》。</p><p>经过去年下半年的迅速扩张，抖音已经坐稳摄影与录像类应用榜首，本身品牌的效应也会带来不菲的自然流量，借助百万英雄的低成本流量，进一步的巩固了自身的地位，除此之外，抖音团队也开始逐步向国际化方向发展。</p><p>本阶段主要用户群体：存在娱乐需求，并愿意主动探索生活趣味的人群。<br>本阶段核心用户需求：娱乐自己，打发无聊时间。<br>本阶段抖音商业需求：巩固市场地位，国际化并探索产品商业模式的边界。<br>产品主要迭代版本&amp;迭代逻辑分析：</p><p>在版本V1.68~V1.73中，产品功能上已经经历过2017年下半年的洗礼，拍摄视频基本完成了拍摄更美、更好玩的目标，这条线已经趋于稳定，产品变动不大。除了在战略上增加《百万英雄》的入口用于吸引流量外，最大的改变主要围绕着举报和评论。</p><p>不难分析出在用户暴增的情况下，视频社区内部一下子充斥了各类人群，作为一个公共视频社区，无法完全规避不良用户为了满足个人私利或私欲上传破坏社区氛围的视频，现在的抖音社区就是一个鱼龙混杂的大市场，这对抖音来说是一个潜在危机，处理不当可能会导致沉淀的老用户大量流失。</p><p>在V1.6.8版本，抖音在新年第一个版本中增加有奖问答游戏《百万英雄》。</p><p>在V1.70版本中，细化了举报及评论模块，更精细化的进行社区管理，同时需要提供举报理由，增加审核可信度。笔者推测起初是根据举报标签数量进行的自动化封账号管理，这种可能会存在有组织的恶意举报，导致用户无辜被封，带来用户不满，随着视频量激增，这种未经审核的处理办法，一方面增加后端客服成本（当然，如果抖音根本没专门设置客服人员的话，也会带来用户流失的风险），另 一方面不便于追溯被举报原由，无法进行后续的账号复通工作。</p><p>V1.7.1增加原创音乐类目，扩创自有音乐曲库（这个在后期运营分析时再展开讲）。</p><p>用户评价：</p><p>这一阶段用户的评价向好已经非常明显，通过用户的激增也扩大了社区视频的边界，不仅限于音乐视频领域，会存在很多段子、游戏、动物成精等特色视频，进一步增长了社区的兼容性。</p><p>于此同时，产品仍然未能完全脱离卡顿的问题，特别是在百万英雄开始时，可以明显感受到首页视频播放反应迟钝，卡死甚至闪退等现象。</p><p>此阶段的运营策略：</p><p>抖音作为一个音乐短视频产品，从名字出发有两个点非常重要，一个是音乐，一个是短视频，音乐作为短视频的重要主体面临着版权和数量有限等问题，首先，音乐版权方面因暂时未找到抖音被投诉的信息，可能抖音已经购买音乐版权，暂时不开展分析；其次，能够用于拍摄有趣又好玩视频的背景音乐是有限的，如果抖音社区内部充斥着大量相同音乐及毫无新意的视频时，对大众用户会引起视觉疲劳，并抛弃平台。</p><p>2018年1月25日，抖音推出抖音原创音乐计划，联手8位评委和百位知名音乐人，寻找自由、独立的原创音乐人。一方面给原创音乐人提供出口，另一方面扩充抖音自身社区的音乐库，利人又利己可谓一举两得。</p><p>在国际化方面，抖音的业务已经覆盖东南亚、日韩、北美、欧洲、拉美等全球其他地区，资金方面，今日头条计划投入上亿美金进行出海支持。抖音以Tik Tok为名已于去年8月份低调出海，并在日本、泰国、韩国等取得了不俗的成绩，在日本不仅在摄影和录像分类上超越了YouTube和Instagram等全球短视频巨头，还力压Spotify、LINE等常年霸占榜单前几位的应用，成为日本App Store免费榜第一的app。</p><p>3、对抖音的深度解析的小结与反思</p><p>通过对抖音短视频截止到2018年2月分析，在产品和运营方面均受益良多，在此向抖音团队致敬，也向Musical.ly团队致敬。在产品方面，抖音团队在确认了产品主体框架后，保留了很大的容错空间，截止到目前均未对产品架构做任何大的重构调整。从抖音第一版发布至今约500个日夜，基本保持平均10天发布一个版本的节奏，虽然说敏捷开发及小步快跑的方法论在互联网圈被讲烂了，但是真正能运作起来的团队非常少，可见整个团队功力非常优秀。</p><p>除了团队的努力和平台本身，抖音的成功对我们产品人员来说有什么值得借鉴的呢？我觉得有有以下两个：</p><p>一、纯互联网类产品，产品永远是根基，要给自己团队及产品一些时间用心打磨（抖音打磨了7个月，才加大市场端投入），前期不要过度追求用户数量。<br>二、尽力保持产品调性，维护好产品内部氛围，小心翼翼的探索和拓展产品边界。<br>关于第二点特别说明一下，抖音因前期投入大量人力打造去中心化的视频分发算法，后期即使通过运营端发力拉拢大量人群，依然能够对原有老用户做到有的放矢的推送他们喜欢的视频，而不会造成思想冲击，其他类产品，且不可盲目过度在运营端发力，否则可能会适得其反，造成新用户对产品无感情，没知觉，不感冒；老用户对氛围不适应，反感甚至抛弃产品，造成大量用户流失，可谓折了夫人又折兵。</p><p>4、关于抖音未来的发展和展望</p><p>抖音无疑是2017年最受欢迎的应用之一，并且在国际上也取得不俗的成绩，可谓风光无限。在历史的长河中，从来不缺少短暂的辉煌，具有代表性和可比性的一个产品——小咖秀，就是一个活生生的例子，记得当年，小咖秀的横空出世带动了一大半的娱乐圈明星参与其中，但因为其过于中心化，对大众不够友好，最终在大众视角疲劳后纷纷离场，剩下一群戏子也好没趣味，人走茶凉。</p><p>抖音在这方面吸取了小咖秀的经验，到现在仍未大规模的启用明星助力，惊喜的事，因为自身产品的爆红，还引来了很多明星主动加入到抖音社区，当然抖音并未对明星进行特权照顾，依然保持了「去中心化」的产品思路。</p><p>伴随上一轮的暴涨后，抖音并不能高枕无忧，相反整个团队面临的困难还有很多，比如：</p><p>作为一个新生代音乐短视频应用，如何消化受市场影响下载并使用的用户，其中既包含了抖音的核心用户95后，也横跨90、85、80后甚至75后人群，怎样减少过度流失？<br>内部视频大量是由抖音小助手发起活动，大家挑战来拍摄的，必然带来大量视频重复且不具观赏性，自然不能给达人打来流量和爱心，一方面对普通玩家造成疲劳，一方面让达人感受不到激励，陷入死循环。<br>前面讲过音乐版权及数量的问题，可以看出抖音团队通过支持导入本地音乐、发起原创音乐创作活动等来尽可能的解决以上问题，但是，目前来说效果还不得而知，更长远的角度来说通过资本购买大量音乐版权应该是主流路线，同时通过算法个性化推荐拍摄音乐，激活长尾音乐的使用频次。<br>抖音国际化，也将是2018年的主要奋斗目标，本地化团队对于国际市场的经验相对有限，盲目扩张国际团队也将带来诸多管理问题，对于抖音整个管理层来说国际化都是一个全新的课题，何去何从，一切都需要抖音团队摸索出方向。<br>……<br>还有很长的路需要抖音团队去走，但是，作为一个仅上线500天的产品而言，抖音已经度过了自己最艰难的时刻，后面即使再艰难对于这个团队来说也不会带来致命打击。</p><p>至此。对于抖音的深度解析算是告一段路，虽然没有参与到抖音的各个阶段，但是，从一个观察者的角度重新梳理一遍抖音的发展历程，仍然非常激动和记忆深刻，其中包括A.me更名未抖音短视频、如何避免产品工具化（引导分享，加大社区运营力度等）、在无明确变现途径时主动导流到微博、不断增设拍摄玩法有序的拓展产品边界等。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>总结来说，它能火，很大一部分原因是门槛低，即采用背板式录视频，你不会录没关系，我教你怎么说，我还给你配BGM，我还给你炫酷的特效。这样它的入门成本低，用户群体大。</p><p>大的同时，目标用户仍然非常明确：“热爱展示自我的年轻人，或者热爱看别人展示自我的年轻人”。</p><p>技术方面，有今日头条爸爸更是不用说，视频上传、视频观看等方面非常流畅，不在快手、美拍之下。</p><p>资金也是不缺，今日头条十亿美金收购个 Musical.ly 和抖音合并已经证明了这点。</p><p>运营方面，岳云鹏、吴亦凡等与年轻人密切相关的偶像级人物层出不穷，赞助江苏卫视、浙江卫视和湖南卫视跨年演唱会也有很棒的效果，17年9月登陆《天天向上》更是针对年轻人。总结一句话，砸钱上最热门的节目，中国有嘻哈、快乐大本营，哪里火上哪。</p><p>但是它在产品内部，反而没有对明星进行多少特权照顾，保持了”去中心化”的思想，避免用户审美疲劳，减少了用户流失。</p><p>国际化，在泰国免费app排行榜排第一,当然这不意味着它的国际化非常成功，只能说，它国际化的起步很好。本土化团队相对缺少对外扩张的经验，这是他们在2018年的一个需要解决的难题。</p><p>变化方面，从推荐转变到附近是个趋势。</p><p>这篇文章没有多少深入解读，大部分是资料的堆砌，没事多琢磨琢磨。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180215 点石产品报告</title>
      <link href="/2018/02/15/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180215/"/>
      <url>/2018/02/15/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180215/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>vue基础基本巩固，包括声明式渲染，条件与循环，处理用户输入以及组件化应用构建</p><p>开发一款移动app所需时间</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>到2021年，将会有大约3500亿的移动APP下载量，这将创造约2000亿美元的营收，因此如今移动APP的开发、营销和销售都在呈现指数级增长这个事实也就在情理之中了。</p><p>事实上，目前在Google Play商店中有280万款APP可供下载，在苹果App Store里有220万款APP可供下载，而且这些数字还在不断增长。相对于桌面端而言，移动端的主导地位正在不断加强，移动APP将会存在很长时间，尤其是在商业和科技领域更是如此。</p><p>因此，这些领域的创业公司的创始人都很想知道这个问题的答案：开发一款移动APP需要花多少时间和精力？</p><p>现有数据：开发一款移动APP需要3-5个月</p><p>尽管每年有100万款新的移动APP会在主流应用商店上架，但关于开发一款新的移动APP究竟需要多长时间方面的数据却非常少。虽然你会发现很多网站声称开发一款移动应用所需的时间大概为3-4个月，但要找到证明这个信息的可靠数据却并不容易。不过，至少有两个这方面的调查数据是值得一提的：</p><p>（1）在由Kinvey在2013年发起的一项调查中，Kinvey让100名移动APP设计师指出，他们认为要开发出含有主要功能的Android或iOS的APP1.0版本需要多长时间（即一个最小可行化产品，也就是MVP），通过对这100个参与调研的应用设计师的反馈的数据进行求和平均，Kinvey发现开发一款原生的移动APP需要大约18周的时间（即：4.5个月），其中后端开发大概需要10周时间，前端开发大概需要8周时间。</p><p>（2）第二个值得提及的这方面的研究是GoodFirms在2017年发布的一份报告。GoodFirms在应用领域进行了多项调查，调研的主题包括开发一款移动APP需要的时间和费用方面的问题和Kinvey采用的方法类似，GoodFirms调研了几十家科技公司，要求参与调研的公司估计开发像Instagram、Tinder和Uber这样的APP需要多长时间，然后对参与调研者给出的数据进行了求和平均。</p><p>根据这个调研，GoodFirms的报告中展示了以下数据：</p><p>功能丰富的高度复杂的应用，如Instagram和Uber，需要花费4.5月-5.5个月的时间才能开发完成。<br>中等复杂的移动应用，如WhatsApp或QuizUp，需要大约4.6个月的时间才能开发完成。<br>用户友好型但功能较少的应用，比如Tinder和Periscope，需要大约3.8月-4.1个月才能开发完成。</p><p>总之，这两项调研都表明，开发一款APP大约需要3-5个月的时间才能完成。尽管开发不同的应用需要的时间会有一定的差别，但大概的时间范围是肯定没错的。</p><p>现在让我们来看看开发一款移动APP所涉及的四个关键阶段，以便探索可能会影响完成一款APP开发所需要的时间的各种因素和决策。</p><p>移动APP开发的四个关键阶段</p><p>尽管我们可以将APP开发看作是一个迭代过程，但将过程概念化是有帮助的，因为它涉及到许多定义阶段。我将一一描述APP开发的每一个阶段，同时你要记住，每一个阶段都不是与其它阶段完全分开的。</p><p>阶段1：调研和规划</p><p>开发一款移动应用的第一阶段需要回答两个基本的问题：</p><p>为什么我要开发这款APP？这款APP为什么需要存在？它将如何为世界带来价值？人们真的想使用这款APP吗？哪些人会使用这款APP？为什么会使用？<br>市面上是否已经这种类型的APP了？如果已经存在的话，我为什么相信我开发的APP能战胜其它竞争对手？我的APP与其它现有同类APP的区别和优势分别是什么？<br>从本质上看，要想回答诸如“我想要我的APP做什么？我的APP为什么要存在？我的APP如何击败竞争对手？”这些问题，这就需要你对你的目标市场和目标客户群有深入的了解。</p><p>你需要对市场需求和客户需求进行广泛的研究，确保：</p><p>确认并证实一个能够为你带来盈利的客户痛点；<br>计算目标市场规模；<br>验证你的产品想法。<br>此外，你还必须研究你的竞争对手，包括他们的APP、客户和商业策略。</p><p>很难准确地指出你需要花多长时间来收集和确认这些重要的信息，但是你很有可能需要花几个星期的时间来调研和验证想法。</p><p>阶段2：功能和特性</p><p>在收集了足够多有关理想客户的需要和需求数据后，确定你打算提供的解决方案确实是有很大的市场需求的，接下来你必须决定应该要为你的APP开发哪些具体的功能和特性。很多移动APP开发者都会迷失在这个阶段。</p><p>在这个阶段，你要精确地确定你想让你的APP以何种方式运行：</p><p>你希望你的APP能够做些什么？<br>它将执行哪些任务、功能和操作？（一对一聊天？与其他应用集成？等等）<br>它将如何处理数据？它将从用户那里收集原始数据，还是利用现有的数据框架？<br>这时，你就需要创建故事板（storyboard）了，例如应用程序的用户界面的可视化展示，显示内容的屏幕和这些屏幕之间的联系和连接：</p><p>故事板有助于你发现可用性方面的问题，并改善用户体验。</p><p>在确定移动APP的功能和特性阶段，你还要开发用例，这些用例作为理想用户与应用进行交互的模板。正如Crew的团队成员所说的那样，你开发的功能越多，你的产品就会越复杂，开发应用所需的时间也就越长。</p><p>你在这个阶段必须做的最重要的决策之一就是你的APP要支持多操作系统和设备，还是只支持一种操作系统和设备。实际上，这通常意味着你必须决定你的APP是否有iOS、Android和Windows版本。</p><p>为什么这个选择从时间表的角度来看非常重要呢？主要因为两个原因：</p><p>为多个操作系统和设备开发一款APP需要更长的时间才能开发完成。<br>虽然随着时间的推移，这一差别变得越来越不明显，但开发一款安卓APP比开发一款iOS APP通常需要更多的时间（通常需要多花20-30%的时间）。<br>关于这一点，Valeriia Timokhina曾表示：“iOS通常是最开始推出应用的首选平台，因为只有少量的目标设备和操作系统需要适配。相对于一次性需要适配多个操作系统，一次只确保你的应用在一个操作系统上完美地运行容易得多。此外，在市面上有超过12000个不同的Android设备，几乎不可能将APP针对每一款Android设备都进行优化。因此，开发和测试Android APP往往需要花费更多的时间，除非你限制支持的设备和支持的屏幕分辨率的数量。如果你想同时开发iOS和Android APP，那么你开发APP所需要的时间和预算可能会翻倍。”</p><p>关于你应该如何同时开发面向多个操作系统的应用，Cruxlab的工作人员指出：“传统上，Android APP程序是用Java开发的，而iOS APP则是用Swift和objective-objective编写的。尽管如此，仍然存在大量其他可替代的替代工具，Xamarin、React Native和Ionic是其中的一些比较受欢迎的替代工具。”</p><p>在没有深入技术细节之前，如果你想同时开发iOS和Android APP（也可能包括Windows应用），那么你可以选择下面两种路径中的一种：</p><p>使用两种完全不同的编程语言来开发APP的两个不同的版本;<br>使用跨平台的开发工具（React Native、Ionic等)同时开发APP的两个版本，从而简化流程。<br>这里再强调一遍，虽然无法准确预测确定APP的核心功能特性所需要的时间，不过大概的时间范围是肯定的：3-5周左右。</p><p>阶段3：技术可行性、设计和开发</p><p>在确定了你想要APP做什么以及期望它如何运行之后，你接下来必须要明确地确认将这些功能和特性开发出来并正常运行是能够做到的。在这个过程中，需要让你的技术团队参与确认，你想要给用户带来的功能和产品前端交互体验是能够在后端通过编程来实现的。换句话说，你需要确保前端和后端系统之间的兼容性。为此，你必须咨询你的技术人员并与其合作。</p><p>前端系统包括一个软件、应用程序或网站的可视化前端元素，它们可以被终端用户直接查看和访问。相反，后端系统由一个网站、软件或信息系统的核心计算逻辑组成，这些系统是可以供用户通过前端应用程序或系统间接访问的。</p><p>前端开发主要集中在开发的客户端。前端开发人员将参与分析代码、设计和调试应用程序，同时确保提供一个无缝的用户体验。你可以管理和控制人们在浏览器或应用中首先会看到的东西，作为前端开发者，你要负责网站的外观、感觉和最终设计。</p><p>后端开发指的是服务器端的开发，你主要关注的点是网站是如何工作的。这种类型的web开发通常由三个部分组成：一台服务器、一个应用和一个数据库。后台开发人员编写的代码是将数据库信息传到浏览器或应用中。任何你无法轻易看到的东西，比如数据库和服务器，都是后台开发人员的工作。</p><p>从技术上讲，前端流程包括缓存、同步、线框图、UI设计、UI开发等。数据存储、用户管理、服务器端逻辑、数据集成和版本控制等都属于后端开发。由于后端流程负责计算、业务逻辑、数据库交互和性能等方面的操作，让应用运行的大部分代码都是后端代码。</p><p>后端工程师要与前端设计人员保持持续的沟通，这一点至关重要。否则你就有可能陷入这样一种危险的境地：后端工程师无法开发前端设计人员想要的东西。</p><p>如果你想与后端基础架构一起来开发前端移动APP，那么最重要的是你要对所要开发的功能进行优先级排序。让你的后端工程师先开发，这样你的前端工程师才可以开发功能代码。如果后端没有很好地定义，也没有相应的功能，那么前端工程师的工作效率就会低很多。</p><p>开发APP的一个关键部分在于需要能成功地访问你的应用运行的核心数据。你是会使用公共API密匙，还是会开发自己的抽象层？</p><p>API的全称是Application Programming Interface（应用程序接口），它代表了一种独特的代码，允许应用与应用之间（开发者）相互访问。一些全球知名的应用都有开放的API，比如Dropbox、Facebook、Instagram、Skype、Twitter和Uber，开发人员可以利用这些API来开发自己的应用。</p><p>例如，流行的基于滑动的交友应用Tinder就使用了Facebook的API：Tinder用户通过他们的Facebook主页登录Tinder，正因如此，Tinder就没有必要从零开始打造自己的用户群。</p><p>确定前端和后端兼容性需要涉及各种不同的UX（用户体验）和UI（用户界面）设计流程，包括线框图。</p><p>作为UX设计的一部分，线框图是一个页面或应用界面的二维图，主要展示的是内容的空间分配和优先级，可用的功能以及预期的行为。</p><p>线框图主要是灰色的，主要帮助：</p><p>在APP的信息架构与它的视觉设计之间搭起一座桥梁。<br>阐明在用户界面上所显示的信息的一致方法。<br>确定交互界面中的预期功能。<br>通过确定给一个特定项目分配多少空间以及将该项目在屏幕上的位置，并进而来进行内容的优先级排序。</p><p>在产品开发和优化周期的不同阶段都可以制作线框图。例如，有些人会选择在功能和特性阶段早期制作线框图，将线框图与故事板和其它基本视觉表现的使用联系起来。另一些人则在设计和开发阶段制作线框图，把它与对前端和后端兼容性的调查联系起来。</p><p>正如 Sheila Olson 所言，线框图和故事板可以作为你用来支撑APP的后台架构的向导——API、数据图、服务器、数据集成和推送通知服务。</p><p>对于那些在设计和开发阶段制作线框图的人来说，大概的顺序是这样的：</p><p>线框图→ 低保真原型→高保真模型→代码</p><p>一旦完成了线框图的制作设计后，就可以创建应用的图形用户界面（GUI）了，这个界面是用来创建添加特定字体、颜色、主题和图标的地方。</p><p>正如 Aim Consulting的人所言，一旦设计元素完成之后，设计结果就能提供一个清晰的视觉方向，让你的工程师了解预想的最终产品以及APP中的交互感觉、移动和流动应该是怎样的。</p><p>你可以通过利用专门为这个目的设计的软件平台来开发你的新APP（例如:应用程序开发程序，其中很多都是拖放界面）。然而，我们建议你与一个专业的应用开发代理商合作，因为代理商在帮助企业家成功地执行他们的想法方面拥有丰富的经验。</p><p>总而言之，进行技术可行性评估，确定前端设计元素，并编写后端架构，这可能需要1-2个月的时间才能完成。</p><p>阶段4：测试与改进</p><p>开发一款APP的最后一个阶段（除了实际发布和相关的营销活动之外）是测试和改进阶段。</p><p>现在，从某种层面上说，测试是开发阶段的一部分，因为你的程序员和Alpha测试工程师在开发过程中会不断地尝试打破你的APP，以便在其发布之前发现并纠正代码中存在的错误。</p><p>Alpha测试是你的公司内部的进行的，因为你的开发人员（无论是员工还是外包）将会在你的APP发布到真实的终端用户手里之前对应用进行标准化的诊断。</p><p>Beta测试的目的是在实验室外测试你的APP：当真正的用户有机会按照他们自己喜欢的方使用APP而不是按照你设想的方式使用APP时，这时会发生什么呢？Beta测试的关键是要弄清楚当日常用户将你的应用下载到他们的手机上并按照他们喜欢的方式使用应用时，你的应用是否能支撑住。</p><p>Alpha测试需要发现主要的bug和小故障，而Beta测试需要能够发现APP在真实用户的真实使用环境中可能会出现的问题。</p><p>Alpha测试（开发阶段）和Beta阶段（测试阶段）对于打造一款可靠的应用都是必不可少的组成部分。</p><p>一旦你在你自己的开发团队中对应用完成了Alpha测试后，你就应该将APP开放给特定的公众进行Beta测试。</p><p>你如何才能为即将发布的应用找到合格的Beta测试者呢？你可以通过一些基于Web的服务和平台来找到测试者，包括BetaFamily、BetaList、ErliBird、PreApps、TestElf、Reddit和UserTesting等。</p><p>如果你已经完成了一轮或几轮Alpha测试，那么你的Beta测试阶段需要花的时间应该不会超过3-4周。</p><p>结语</p><p>在上面的时间基础上，我们还为APP开发的四个阶段分别还留有了一定的时间缓冲，因此我们最终计算出，开发完成一款应用所需的最终时间大概在4-5个月。因此，我们会发现，开发一款移动APP是一个相当漫长而复杂的过程，需要大量的准备、耐心和投入才能正确地执行。</p><p>下面是我为大家的APP开发之旅提供的最后两点建议：</p><p>（1）在制定APP开发时间表上，要保持适当的灵活性，要做好延迟的准备。很多无法预见的情况都会造成时间的拖延，如iOS新版发布、第三方集成发生的变化、质量测试过程中出现的意想不到的问题等。在完成开发的过程中，要给自己留出一个缓冲时间，而不是一个严格的最后期限。你最不想看到的就是将APP发布到应用商店后，发现这款应用崩溃了或者出现其它更糟糕的情况。你只有一次给用户留下第一印象的机会，你肯定不想成为那些在被用户下载后就被立即弃之不用的APP。</p><p>（2）确保你能够在APP发布后依然可以随时与开发团队沟通。如果你正在与外部供应商合作开发你的APP，确保你在APP发布后通过托管服务协议或类似的合作伙伴关系来继续与开发团队沟通，移动APP并不是那种“一旦开发完成便终身无忧”的产品。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>总结来说，一般四到五个月</p><p>第一次接触到Alpha测试这个概念，它是针对产品的bug和故障，而不是真实使用时出现的问题，是公司内部的，是开发阶段的。</p><p>线框图，是原型图之前应该完成的内容。</p><p>内容很多，我浏览了几遍，感觉还不够，应该再对着空气吹吹比。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180214 点石产品报告</title>
      <link href="/2018/02/14/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180214/"/>
      <url>/2018/02/14/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180214/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>Vue框架DOM渲染的应用。</p><p>Vue中文官网上的内容实在是不是给新手看的，所以通过网易云上的网课了解到了些。</p><p>了解了Vue的重要概念，包括“渐进式”框架，自底向上的应用，和第三方库的良好适用性。</p><p>今天主要是看技术的。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>Vue的响应式涉及，DOM渲染。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>Vue框架相对来说，较简单，不是说学起来简单，而是这个框架的特性是简单，灵活，轻便，甚至有点随性。</p><p>我学起来，不是很容易，因为之前没有接触过啥框架除了jQuery，所以得从最基础学起。</p><p>因为我在B站搬运youtube的视频，所以对youtube的体验不少。</p><p>最大的感受是，它点击视频时，会使本窗口切换为新视频窗口，而国内的优酷爱奇艺B站都是新打开一个标签页播放视频。</p><p>一开始非常不习惯，总是得右键点击打开新标签页。</p><p>所以一开始体验并不好，当然主要原因是和国内的差异。</p><p>如果不论习惯，哪个方式更好一些呢？</p><p>我想是国内的，即点开一个新标签。</p><p>因为，一般来说有两种点开视频的方式：</p><ol><li><p>在大的目录中点开，为了规划出今天看几个视频，以及提前加载，提前播放广告，我肯定会选择点开好几个视频。（当然youtube有没有广告是视频主设定，所以广告现象较少）</p></li><li><p>观看视频时，从右侧推荐视频中点开，这时，很多情况下，我不会等当前视频播放完了再点开新的，我肯定看到右侧有感兴趣的就先点开，看完当前的再关掉当前的。</p></li></ol><p>所以，点开个新标签页是更好的选择，而youtube这么做肯定有他们的原因，具体是为了什么，我得查查，这虽然是个小问题，但是只要上这个网站就会遇到，频率极高，值得思考思考。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180213 点石产品报告</title>
      <link href="/2018/02/13/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180213/"/>
      <url>/2018/02/13/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180213/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>项目管理的要素，项目管理三角形，PMBOK初步解读</p><p>Vue的学习</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p><strong> 项目管理三角形 </strong></p><p>作为一个项目管理者，可以从定义中抽取把控项目的要素：范围，时间，成本与质量。这就是所谓的项目管理三角形（S-TQC）</p><p>范围（Scope）： 指为了实现项目目标所必须完成的所有任务。通俗的讲，做完所有的任务，项目就结束了。</p><p>时间（Time）： 指完成项目所有任务的时间。从广义上讲，是所有任务的的总时长。从狭义上讲，是每个任务的开始和结束时间。</p><p>成本（Cost）： 指完成项目所需要的开销。包括了人力成本，原材料成本，工具成本，场地成本等等。</p><p>质量(Quality)： 指项目满足需求的程度，这类需求可以是明确写入到合同中的需求，也可以是一些隐含需求。比如：在装修的项目中，会写明最后验收时甲醛含量不得超过xx等明确指标，而在软件类项目中，则会有用户点击页面的响应时间不得超过3秒等隐含的需求。此类需求不会直接在合同中写明，但是超过了3秒，用户会觉得慢。</p><p>这已经属于行业默认标准。举个例子，我们知道上大学需要修学分。四年大学，需要修满一定的学分方可毕业。于是在大学毕业这个项目中：项目范围：修满毕业所需要的学分，即所有必修课学分以及部分选修课学分。 项目时间：1000学时 <em>4 年（假定4年80门课程的总学时是4000，并且平均分配）项目成本：1000元 </em> 80 门课程 （假定毕业需要修80门课程的学分），个人时间成本 2000学时每年项目质量：每门课程必须考试通过方可以有学分。所以质量及考试通过。</p><p>相互制约的四要素明白了项目管理中的四个要素之后，还需要明白一个事情，这四个要素是相互制约的关系。任何人对于项目的期望都是在越短的时间内，花越少的钱做越多的事情，还不影响产出。这是人之常情，但是却违反了事物的客观规律。有一句老话叫做：便宜没好货，好货不便宜。作为一个项目经理，职责就是平衡各个要素之间的关系。还是拿大学毕业做为例子。如果希望提早完成学业，即项目时间变成了2年，而项目质量和项目范围不变。如果项目成本不变，拿真的是天下掉馅饼了。那么好的事情都被你碰上了。遗憾的是，天上不可能掉馅饼，项目成本必然变化。项目时间变短了，4年的课程需要2年学完，于是个人时间成本由每年的2000学时变为了4000学时每年。粗看上去拿到大学毕业证书用了两年时间，实际总的花费时间仍然是相同的。再举个例子，造房子打地基。一共需要打100根地基，每根需要打入地下80米。施工队计划租用一辆打桩机，预计10天完成。此时项目四要素分别是：项目范围：打100根地基。项目时间：10天项目成本：1台打桩机 <em> 10 天 </em> 1000元项目质量：每根桩必须打入地下80米突然项目进度比较紧张，只留下5天时间打桩。</p><p>于是有如下的可能：</p><ol><li><p>租到另一台打桩机5000元每天，于是两台机器同时开工，100根地基，每根打入地下80米，在5天内完成。 于是另一台打桩机的额外支出即使项目的额外成本。</p></li><li><p>没有额外打桩机可以租，100根地基必须在5天内打入地下。于是只能降低项目质量，每根地基只打入地下40米。 （当然这种豆腐渣工程是不可取的）</p></li><li><p>没有额外打桩机可以租，5天内必须每根桩打入地下80米。于是只能降低桩的数量，只打50根桩（当然这种豆腐渣工程也是不可取的）正所谓巧妇难为无米之炊，项目的四要素是时刻相互牵制的。这也是项目监控过程中，需要建立需求变更流程的意义所在。无休无止的扩大项目范围又不延长项目时间，必然造成项目成本的增加，以及项目质量的下降。</p></li></ol><p>项目经理的职责在于平衡并且维持各个要素之间的关系。所谓平衡是在没有外在因素干扰的前提下，尽可能大的展现四要素所占据的面积。而维持的意义在于要有向客户说不的能力。这里的说不，是拒绝不合理的要求，并且提供合理的解决方案。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180212 点石产品报告</title>
      <link href="/2018/02/12/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180212/"/>
      <url>/2018/02/12/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180212/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>旅行青蛙占据中国市场的现象和思考</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>围绕春节前的一个多月时间里，基本上中国的社交网络被一只丑萌丑萌的青蛙所占据了。</p><p>这款名为《旅行青蛙》的全日文游戏，并没有影响中国玩家的热情。几乎是1夜之间，从1月20日开始，旅行青蛙的百度指数从0开始飙升到了330000；而到了25日，它已登上中国区App Store免费下载排行第一名的位置。</p><p>继被称之为“吃鸡”游戏之后，又一个被中国玩家捧上神坛的国外爆款，只是比”吃鸡“游戏中国玩家占半数的惊人业绩相比，“养蛙”游戏里，1月底下载量突破1千万次，其中中国占95%，日本仅2%，美国为1%。</p><p>蛙为什么突然这么火了呢？起点或许是因为它其实是只“猫”。</p><p>寂寞了？要生娃？养蛙的你偶遇了“薛定谔的猫”</p><p>在游戏厂商尚未组织任何宣传活动的情况下，《旅行青蛙》的走红，在中国源自一个谣言：《旅行青蛙》是日本生育部门联合游戏公司Hit-Point开发的一款游戏，设计的初衷是因为日本生育率太低，所以要挖掘发现生育意向强的年轻人。如果连续玩这款游戏超过一周，会被默认为生育意向8级以上，后台会发给你一封3500字的长信，鼓励你亲自生一个孩子。</p><p>当然，答案是否定的。这款游戏的设计师上村真裕子就指出，游戏初衷不是盼儿归，是念丈夫。用青蛙的缘由是青蛙在日本是平安归家的意思，也是旅行的必须护身符。</p><p>由于对日本文化的不了解，以及这个关于生育的传闻与农历春节的到来会引爆父母逼婚、添孙话题的契合，以及其他因素，让这个游戏瞬间进入了所有国人的视野。艾瑞的调研数据显示，51%的玩家是因为“朋友也在玩”才下载了一款游戏。《旅行青蛙》的初期成功，依靠社交网络，不容置疑。</p><p>但仅仅靠一个情怀，不足以成就一款游戏。《旅行青蛙》还有大招，即差异化与当下主流游戏类型的玩法模式。</p><p>游戏的玩法很简单：一只青蛙坐在石屋里吃东西、看书，玩家则负责收集前院里的三叶草，三叶草可用来购买青蛙旅行时需要的食物。青蛙去旅行后会消失多久不确定，有时它会旅行几个小时，有时甚至几天，回来时，它会展示旅行时拍的照片和纪念品。</p><p>特点呢？更简单，没有攻略，每一个玩家都不知道打开游戏的时候，会看到蛙，还是看到明信片，或者什么都没看到……</p><p>蛙去哪了，这就是偶遇的特征，比起主流游戏需要大量计算和大量攻略支撑，这款游戏的魅力就在于不可预测性。</p><p>换言之，“薛定谔的猫”这个物理学假说在游戏中发挥了最大的作用。</p><p>所谓“薛定谔的猫”，可以简单理解为：一个封闭的匣子里，有一只活猫及一瓶毒药。当衰变发生时，药瓶被打破，猫将被毒死。按照常识，猫可能死了也可能还活着。量子力学告诉我们，存在一个中间态，猫既不死也不活，直到进行观察。</p><p>伟大的随机性，其实成为了游戏的最终极乐趣。而打开“薛定谔的猫”的匣子，是否让人很容易联想到打开《旅行青蛙》App的动作呢？</p><p>能够制造这种随机效果，并十分强烈的，往往能够爆款。比如《绝地求生》，无论游戏技巧如何、看了多少攻略，当玩家和其他99个对手一起进入战场时，谁也不知道下一秒会遭遇什么，更不知道，哪一个玩家要如何幸运，才能成为唯一的幸存者，得以享受“大吉大利、晚上吃鸡”的荣耀。</p><p>再往前追溯，我们会发现更多福寿绵长的爆款游戏，恰恰也是这一模式下的产物，最典型的是火爆了30年的《俄罗斯方块》，包括游戏设计者自己，都无法预知，下一秒将掉落什么样的方块。</p><p>每一次打开游戏，都有意外和偶遇，这恰恰能成就一款伟大的游戏。</p><p>休闲性？女性向？养蛙游戏其实是落伍玩家“收容站”</p><p>关于《旅行青蛙》的爆红，主流的讨论主要集中在其对女性市场以及休闲游戏的挖潜能力上。同时，还在反复刷新着这个只有26个员工的小公司，和2个人造出这款爆款游戏的故事，以此来激励创业者。</p><p>成功往往源于偶然，可却亦有必然的根源，只是主流舆论未必戳中了痛点。</p><p>有数据显示，这款游戏在女性用户群体中最受欢迎，《青蛙旅行》开发商Hit-Point也表示在策划之初就是以女性玩家为目标的。而更重要的是，在青蛙走红之前几天，另一个国产女性向游戏正在刷屏。</p><p>2017年12月14日，一款《恋与制作人》的手游上架，上线不到两周，就已占领各平台下载量Top位和社交网络话题榜，女性玩家比例占到了95%。同时，根据极光大数据的监测结果显示，截至1月7日，《恋与制作人》的安装数量已经达到711.13万。日活跃用户数已经达到202.01万。玩家以年轻女性为主，24岁以下的玩家占比达到73.7%。</p><p>这款以恋爱为主题，游戏内容为女主角周旋于4个男性制作人的养成类游戏，整体风格与网络文学女性频道常见的“玛丽苏”风格相似，而据预测月流水达2亿的可观收入，则让业界惊呼女性游戏正在崛起。</p><p>值得注意的是，女性玩家在近年来已经占据了游戏玩家的半壁江山。数据显示，截至 2017 年 5 月，《王者荣耀》女性玩家占用户总数的54.1%；《阴阳师》女性玩家占61.1%，两款热门游戏女性玩家均超过男性。</p><p>同时，女性的付费欲望颇高，据美国娱乐软件协会2013年的一份报告显示，45%游戏玩家是女性，她们在付费游戏玩家中占比则高达46%。</p><p>但这并不足以证明专门针对女性开发的休闲游戏市场已经崛起，除了《恋与制作人》本身并非休闲风格，而属于重度游戏之外，《旅行青蛙》亦不能成为女性休闲风的代表。两者之间甚至没有必然关联。</p><p>理由很简单，在当下主要游戏类型围绕男性开发，以重度游戏为主的游戏研运体系下，《旅行青蛙》戳中的并非小众、垂直市场，而是负责收容了一批被主流游戏所抛弃的群体。</p><p>以几乎同时在刷屏的微信小游戏《跳一跳》的数据来说话，张小龙在1月15日举行的2018微信公开课上坦言，其开发队伍只有五个人，用户已达到1.7亿，女性用户达到一半，一般而言手机游戏女性用户占比为三成，22%的用户是以前从来没有玩过游戏的用户……</p><p>其中的信息量里，恰恰体现出了此类游戏的一个特征，即在腾讯的《王者荣耀》、网易《阴阳师》等重度游戏包围下，许多玩家已经不适应越来越重的游戏类型，被淘汰下来，或者彻底离开游戏，或者被类似《旅行青蛙》这样模式新奇的“放置类游戏”所收容。</p><p>此外，《2017年中国游戏产业报告》显示：“中国游戏用户规模达到5.83亿人，移动游戏用户规模达到5.54亿人。游戏用户已经触及人口红利天花板。”但其实这一表述中，有一个缺憾点，即玩家人口红利还有一定空间，但他们从来就不是以重度游戏玩家为主体的5亿用户存量之中，亦不在腾讯、网易的主要用户争夺视野之中，甚至还没有触碰游戏就被重度为王的游戏氛围给剔除了。</p><p>青蛙还能带给游戏产业什么改变？</p><p>仅仅从女性角度来说，目前市场上满足女性情感需求，符合女性审美的手游太少。但女性游戏并非没有，只是都最终因为游戏厂商为避免产品无人问津，而形成了“以女性特色为卖点，引导男性玩家进入”的格局。</p><p>甚至于游戏重度化的状态，也不会真正被逆转，只是偶尔会出现类似《旅行青蛙》这样的休闲风游戏。</p><p>玩法上的创新，才是这一波《旅行青蛙》热真正能够给予我们的启示，疑惑：</p><p>其一，放置类游戏并不新鲜，只是赚的少才乏人问津。</p><p>《旅行青蛙》本身在游戏设定中，对于付费道具或广告的植入一直颇为小心，付费的位置不显眼、广告风格贴近游戏且可以快速关闭。同时，放置类游戏的卖点恰恰是玩家可以放在哪里不管，甚至不用给青蛙准备行李，它也会自己根据程序自动旅游，这都会带来直接从游戏中获得收益能力的下降。因此，亦不为主流游戏厂商所喜爱。</p><p>但改变也在开始。青蛙走红后，日本的游戏大厂史克威尔艾尼克斯CEO松田洋祐就宣称未来游戏不会重度氪金（游戏术语，即花钱），要走“轻度补给箱”的路线，即做轻度游戏来填充用户需求。这其实也是看到了落伍者“收容站”的强大潜力。而更多公司，亦在试图在放置类游戏中找到更多突破点。</p><p>其二，盈利未必一定要玩家在游戏中付费。</p><p>不太能赚钱的《旅行青蛙》其实带来了一个其设定之初并没有想到的效果——带动现实旅游。据携程旅行网数据统计，在青蛙风靡之后，以“日本”为关键词的旅游产品搜索量环比增加了150%，包含名古屋的自由行旅游产品预订量环比增长1倍多，京都、大阪、神户的订单增长近80%，鹿儿岛、福冈的日本旅游产品预订增量也在50%左右。</p><p>这些都是《旅行青蛙》里明信片指向的目的地。但青蛙的开发者倒是早早准备了另一个赚钱的设定，拍电影和做周边。在青蛙之前，该公司还曾开发过一个《猫咪后院》的同类游戏，并也火爆异常，而对于“猫”，该公司相当深入的IP开发，比如周边《猫咪后院食谱》以及衍生电影。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>首先，为什么它作为一个国外游戏，总用户量中居然能有95%是中国人？</p><p>起因居然是一个谣言，那谁编的这虚假信息？</p><p>可能是一个公众号为了点击量，也可能是贴吧上的神级人物过度解读，总之，再加上中日文化差异，春节将至的父母逼婚，他们把这个游戏捧上神坛，Hit-Point可能根本没想到会有如此好的反响。</p><p>这只能感叹信息爆炸的时代什么都可能发生。</p><p>当然游戏本身也有可取之处，这是他能火的基础，主要包括：</p><p>随机性极强，复玩性高，即不可预测性，这是精髓。当下较火的游戏，要么是竞技性强，要么是随机性强，要么是养成性强。</p><p>差异化，在佛系这个词兴起的关键时刻，却缺少一款佛系的游戏，于是，青蛙出现了。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180211 点石产品报告</title>
      <link href="/2018/02/11/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180211/"/>
      <url>/2018/02/11/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180211/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>Vue框架的学习，年前基本就干这个了，Vue还是很重要的，小的项目用jQuery应付应付还行，宅哥说一般咱们是用Vue做的，很有实用性。</p><p>代码都传在GitHub上。</p><p>近期产品示例学习。</p><p>《游戏化思维》这里简单摘抄一下，明天主要看这个，如果感兴趣我会把这本书买了。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>关于公众号的两条信息，一是推出可以修改错别字的功能，每篇允许修改五个字，官方公告：<a href="http://mp.weixin.qq.com/s/NKXpiFUQYIPtLzGRCFAYKw；二是调整了注册数量，个人主体由" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/NKXpiFUQYIPtLzGRCFAYKw；二是调整了注册数量，个人主体由</a> 5 个调整为 2 个，组织类主体由 50 个调整为 5 个，官方公告：<a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;announce_id=11518228081c7A0o&amp;version=&amp;lang=zh_CN" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;announce_id=11518228081c7A0o&amp;version=&amp;lang=zh_CN</a></p><p>谷歌 Chrome 浏览器宣布，在今年 7 月开始，会把所有 HTTP 协议的网站标示为不安全网站，继续推动 HTTPS 的普及。</p><p>多点科技团队（之前出过「字里行间」app）推出了新产品，名为「圈子」，大家基于一个主题，在下面各自发表看法，有些类似知识星球（小密圈），暂时还需要关注公众号、输入邀请码才能加入圈子。</p><p>菜鸟驿站的主品牌「菜鸟」，推出了品牌页面，主打智慧物流的概念。</p><p>继苹果的 iCloud 以后，印象笔记也宣布，将在 18 年上半年将中国本地数据搬迁至腾讯云 ​​​​，并且和腾讯的 SNG 事业群（社交网络事业群，手 Q、QQ 音乐等产品就是 SNG 旗下的）有更深入的合作。</p><hr><p>游戏化实践的3大类型</p><p>内部游戏化。公司利用组织内的游戏化提高生产力，促进创新，增进友谊，或以其他方式鼓励员工。特征：参与者是公司的一部分；强大的心流体验。</p><p>外部游戏化。通常与你的客户或潜在客户有关，目的是获得更好的营销效果，改善企业与客户之间的关系，提高客户参与度及其对产品的忠诚度，并增加企业的利润。例如社区的勋章等机制，激发了用户的参与度。</p><p>行为改变游戏化。它旨在帮助大家形成更好的习惯。这可能与你身边的任何事物有关:鼓励人们做出更健康的选择，如合理饮食;或者重新装饰教室，让孩子们在获取知识的同时获得学习的乐趣。通常，这些新的习惯会带来理想的社会效果:减少肥胖人数，降低医疗费用，提高教育质量。</p><p>什么是游戏化？</p><p>游戏化(gamifying)最早可以追溯到1980年，多人在线游戏先驱理查德·巴特尔教授率先提出这一概念：把不是游戏的东西或工作变成游戏。</p><p>游戏化是指在非游戏情境中使用游戏元素和游戏设计技术把这个抽象的概念分解开来，就涉及三个概念：</p><p>游戏元素。游戏是一种综合、全方位的体验，但也是由许多小部一分有机组成的，我们称这些为游戏元素。以象棋为例，棋子、规则都是游戏元素。游戏化的关键是将游戏元素应用到非游戏的活动之中。</p><p>游戏设计技术。该如何决定将哪些游戏元素用在哪里，如何使整个游戏化体验大于各元素之间的总和?这就是游戏设计技术要解决的问题。</p><p>非游戏情境。你的玩家并非想要通过你的产品进入虚拟世界，他们的目的是更加深入地介入你的产品、业务或交易。我们在游戏化中面临的问题是如何将这些游戏因素整合进游戏过程，并能够在现实中加以合理地运用。</p><p>游戏化的核心价值：我们为什么要认真对待游戏？</p><p>价值1：参与。游戏化可以提高参与度。</p><p>价值2：实验。游戏可以不断失败尝试更多可能。</p><p>价值3：成果。游戏化是有效的。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>和其他人吹逼有利于更好的掌握产品概念，增强理解。</p><p>菜鸟的品牌宣传小视频，很有现代感，让人感觉到菜鸟的“效率”和“靠谱”，只是中间的闪烁镜头太晃眼。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180209 点石产品报告</title>
      <link href="/2018/02/09/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180209/"/>
      <url>/2018/02/09/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180209/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>完成canvas的小球碰撞动画。</p><p>宅哥给我的下一步意见是，在Nodejs环境下学习Vue框架，今天已经开始起步了。</p><p>如何通过把握产品生命周期，推动产品发展</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>即刻 app 在新的 4.0 版本中，调整了他们的产品框架。原先第一二个 tab 分别是「推荐」「关注」，而现在第一二个 tab 改为「首页」「动态」，首页包括了「关注」「推荐」「热门」，而「动态」直接作为了第二个 tab。</p><p>这个框架跟知乎 app 最近的改动几乎一样，动态的地位在即刻里也被提高了很多。</p><p>微信读书 app 新增「公众号文集」功能，订阅号的文章可以分享到微信读书，在微信读书也可以将这个公众号文集加入到书架。一方面满足了用户稍后阅读的需求，另一方面给微信读书导入用户。</p><p>淘宝推出「亲情账号」，用户 A 可以为亲人开通账号，这些账号的购买消费，都会自动转到用户 A 进行代付确认。 </p><p>HomePod 评测到来，转一下 The Verge 的评价：</p><p>1、音质极好，麦克风也很好，不会有最大音量就听不见语音控制这种事。2、最好和 apple music 搭配，但通过 AirPlay 使用 Spotify 也是可用的（前后切歌）。3、可和 HomeKit 搭配使用控制一些家电（开灯）。4、现在还不能多个搭配使用。 5、现在 Siri 问题还是很大。</p><p>产品开发过程里 QA 如果引入了，那可以说已经相当不创业公司了，最好的状态是开发者本身有足够的热爱和素质涵养能不断使用产品，发现问题，优化产品的体验，如果到了依靠 QA 去推进，那打磨产品所需要的工作日就开始变得旷日持久。（摘自推特）</p><p>百度百科对“产品生命周期”是这么定义的：产品生命周期（Product Life Cycle），简称PLC，是产品的市场寿命，即一种新产品从开始进入市场到被市场淘汰的整个过程。</p><p>具体来讲，这个过程其实就是经历了一个从“开发、引进、成长、成熟一直到衰退”的阶段。对于企业来说，就是要想办法提高开发和引进阶段的效率，加速成长的步伐，延长成熟以及成功的周期，减缓衰退的进程。</p><p>互联网产品的生命周期</p><p>对于互联网产品来说，生命周期的理论是一样的逻辑。为了稍稍区别于一般产品生命周期包含的“引进”“成长”“成熟”“衰退”四个阶段，我这里把互联网产品的生命周期分为以下四个阶段，如图所示：</p><p>启动阶段</p><p>对于互联网产品来说，启动阶段就相当于一个企业的初创阶段，在这个阶段，产品需要迅速从理论变成实际，从用户痛点需求和商业目标出发，迅速将产品上线并测试，然后寻求种子用户进行快速验证！</p><p>在这个阶段，用户对产品还不了解，产品也是处于探索当中，市场前景并不明朗，因此我们一般考虑的是“我们的产品是否能够解决用户的痛点”以及“我们产品的用户体验到底如何”等问题。</p><p>成长阶段</p><p>在成长阶段，产品已经渡过了种子用户期，并且也获得了种子用户的认可，那么这时候就需要通过营销手段迅速提升产品的流量（销量）和品牌知名度！</p><p>在这个阶段，用户逐渐熟悉产品，产品得到验证，市场前景也比较明朗，那么我们一般考虑的是“我们应该如何运营产品才能快速提升流量和品牌知名度”以及“我们在获取流量之后应该如何转化或者如何变现”等问题。</p><p>成熟阶段</p><p>在成熟阶段，产品已经趋于稳定，很难再有突破性的增长，那么这时候主要就是做好用户的工作，通过运营手段活跃并留存老用户，同时保持新用户的稳定增长！</p><p>在这个阶段，市场趋向饱和，用户趋于稳定，我们一般考虑的是“我们应该如何活跃我们的老用户和尽最大能力保持新用户的稳定增长”以及“如何稳定的将用户变现从而实现盈利”等问题。</p><p>衰落阶段</p><p>在衰落阶段，产品正在走下坡路，已经逐渐失去了竞争力，产品的销量和利润持续下降，不能适应市场的需求，更好的竞品也已经出现，自身的用户流失率也在不断提升，那么这时候首先就是要通过运营手段做好用户回流工作，并且积极创新和寻求转型的新机会。</p><p>我们一般考虑的是“我们应该如何触达那些流失的用户并将他们拉回来”以及“我们有没有机会创新或者项目能不能转型”等问题。</p><p>以上就是关于产品生命周期的四个阶段的说明。那么我们知道，关注产品的生命周期并非为了好玩，也不是因为闲的没事干！作为企业或者产品负责人，能够不断地跟踪自己产品的生命周期所处的阶段，清楚地认识和了解自己产品当下的实际情况，才能更好地制定产品迭代以及运营的策略，从而更好地实现产品整体的商业目标和用户目标。这才是我们关注产品生命周期的目的！</p><p>不同阶段的产品策略</p><p>那么，对于企业来说，在知道自己产品所处的生命周期阶段之后，到底应该怎么做，才能更加有效地制定出合理的产品迭代和运营策略呢？</p><p>古话说得好，目的决定一切！我们围绕产品生命周期所采取的一切有利于产品的行动都是围绕产品的目标而开展的。产品生命周期的每个阶段都是有其目标的，我们要想制定出针对各个阶段最有效的策略，那么就要清晰认识到这个阶段的目的或者目标是什么，只有从目的出发，我们才能知道我们要做什么！</p><p>那么下面我们就来具体分析每个阶段的目标，以及给出一些实现阶段目标的建议和方法（这里只提出一些建议和大概的方向，毕竟产品不同，方法肯定也有所不同，而且方法是需要根据实际的情况来制定的，是不可能一概而论的，这里也就不详细阐述）。</p><p>（一）启动阶段</p><p>有时候，老板会对我们说，我们是一个初创型公司，这个产品也是初创产品，这里希望大家共同努力，尽快将我们的产品做好并投入市场，将来赚钱了大家一起分。（分不分钱这里就不讨论了）</p><p>这种情况下，产品基本上就是处在生命周期的启动阶段。</p><p>那么，对于这个阶段的产品来说，最主要的目标就是：找到用户痛点，做好功能分析，迅速上线验证，种子用户认可。</p><p>如果要实现这个目标，那么我们可以采取这样的方法或者步骤：</p><p>通过市场调研的方法找到用户痛点；<br>根据用户需求，做好需求分析；同时建立自媒体通道，为种子用户和后期运营打基础；<br>迅速完成原型，做好设计，快速开发，做好产品测试，保证用户体验；<br>获取种子用户，跟踪并做好意见反馈，做好数据分析，不断改进和提升产品体验，以获得种子用户的认可。</p><p>（二）成长阶段</p><p>有时候，老板会对我们说，我们是一个成长型企业，这个产品已经得到了用户的认可，现在我们要加把劲，迅速将产品推向用户，让更多的用户了解我们并使用我们，希望大家努力，公司赚得越多，你们的福利也就越好。（呵呵）</p><p>这种情况下，产品基本上就是处在生命周期的成长阶段。</p><p>那么，对于这个阶段的产品来说，最主要的目标就是：获得用户，转化变现，建立品牌，名声远播。</p><p>如果要实现这个目标，那么我们可以采取这样的方法或者步骤：</p><p>利用前期积累的种子用户迅速推广，扩大影响力；<br>加强运营团队建设，主要围绕运营展开工作，一方面做好拉新，促活和留存工作；另一方面搞好品牌建设；<br>继续建设好官方自媒体通道，同时与外界媒体保持联系并搞好关系；<br>做好数据分析，用户方面要重点关注用户留存率，DAU（日活跃用户数量），MAU（月活跃用户数量），以及付费用户数据和ARPU（每用户平均收入）等数据；推广方面要重点关注推广渠道数据，根据数据优化渠道组合；品牌方面要重点关注百度指数等等数据；产品方面要重点关注页面访问数据，跳转数据，访问时长，用户使用路径等等方面。</p><p>产品方面，要围绕数据和用户做好功能更新和产品迭代；<br>采取各种激励手段将流量转化为用户，将用户转化为付费用户，在这里需要精准的选择好付费用户对象，有时候并不一定所有的用户都是产品的付费转化目标。</p><p>（三）成熟阶段</p><p>有时候，老板会对我们说，我们是一个成熟型企业，这个产品已经是市场上的巨头，我们要再接再厉，好好保持住我们现在的地位，至于年终奖什么的，那都不是问题啦！（是不是问题，我也不知道）</p><p>这种情况下，产品基本上就是处在生命周期的成熟阶段。</p><p>那么，对于这个阶段的产品来说，最主要的目标就是：活跃并维系好老用户，同时保持新用户增长，继续稳定地实现创收盈利。</p><p>如果要实现这个目标，那么我们可以采取这样的方法或者步骤：</p><p>活跃并维系好老用户，主要利用运营手段，采取激励体制激活他们；<br>继续数据分析以及产品迭代工作；<br>继续做好用户转化变现工作，进一步提高营收能力。</p><p>（四）衰落阶段</p><p>一般处于衰落阶段的企业，老板可能就不对我们说什么了，可能就直接做什么了，比如说各种节省企业开支，准备裁员，或者说转移重心，成立新的事业部门或项目组等等都有可能。</p><p>这种情况下，产品基本上就是处在生命周期的衰落阶段。</p><p>那么，对于这个阶段的产品来说，最主要的目标就是：尽力做好用户回流工作，同时更新产品线，寻求创新和转型，以求解决用户新的痛点，从而继续占领市场。</p><p>如果要实现这个目标，那么我们可以采取这样的方法或者步骤：</p><p>想办法了解和触达流失用户，然后通过运营将他们最大程度的回流。</p><p>继续做好其他方面运营工作，数据分析方面重点关注回流率；<br>关注竞品的动态，做好竞品分析，借鉴竞品模式，提升产品竞争力，以求从竞品手中抢夺用户，或者不被抢走用户；<br>进行市场调研（包括竞品分析），寻求新的项目机会，或者更新产品线，想办法满足用户日益增长的新需求的目的。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180208 点石产品报告</title>
      <link href="/2018/02/08/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180208/"/>
      <url>/2018/02/08/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180208/</url>
      <content type="html"><![CDATA[<h4 id="学习进度和感悟"><a href="#学习进度和感悟" class="headerlink" title="学习进度和感悟"></a>学习进度和感悟</h4><p>小行星保龄球游戏完成界面，学到了canvas的不少有用的函数与方法，做完这个后我把常用的总结出来。</p><p>下面的内容是游戏内容和动画，这涉及到摩擦力、质量等关键信息，属于比较困难的一部分。</p><p>小行星保龄球游戏锻炼的是利用canvas来实现鼠标的交互和简单物理引擎建立。完成这个后，下一个目标是躲避小行星游戏，这个是要学习键盘交互和随机变量的使用。</p><p>完成这两个后，我基本有能力做一个自己喜欢的小游戏，学编程也有了一段时间，越学越发现，兴趣推动学习才是最有用的途径，全靠自制力学习是扯淡，至少对我这普通人来说是做不到的。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>内容服务产品设计思考总结  作者：田宇洲</p><p>第一章 内容服务产品分析框架：用户-平台-创作者</p><p>1.1分析框架</p><p>分析文字类内容产品之前，我们需要确定分析框架，也就是本文的分析主体结构，全文以内容服务产品为中心，围绕着内容的消费者，生产者和连接者展开，也就是内容服务产品的用户、平台和创作者展开分析。</p><p>以报纸产品为例</p><p>创作者是专业的记者和编辑；</p><p>平台就是报社（承载媒介是报纸），通过销售报纸和广告赚取收入，养活编辑和记者，为用户提供他们需要的信息；</p><p>用户是愿意花钱购买报纸的人。</p><p>今天的内容服务类产品因为移动互联网的蓬勃发展已经发生了翻天覆地的变化。</p><p>微信公众平台面向用户提供了订阅号，服务号，企业号和小程序，面向创作者则提供微信公众平台后台，可以编辑图文（由此还衍生出了类似于135编辑器，秀米编辑器等大量在线文本编辑美化工具），视频，音频等，但是微信公众平台需要创作者自行运营和传播，这无疑增加了个人创作者的运营难度。</p><p>而更多的平台即提供内容编辑工具，也提供内容分发平台，同时引入广告商分成，让创作者专心创作就好，无需操心内容传播，如何变现等问题。以今日头条为例，作为一个新闻资讯类内容服务平台，其面向用户的产品是今日头条，为用户提供新闻资讯，短视频，微头条，文章，图集，问答等内容服务，号称2017年营收达150亿，而面向创作者的产品是头条号，整合传统媒体，新媒体和自媒体资源，为创作者提供一个通过内容创造便可以轻松赚钱的服务平台。天天快报（用户使用微信、QQ、QQ空间、腾讯新闻、天天快报、QQ浏览器、应用宝、腾讯视频、NOW直播、全民K歌等十大平台，创作者使用腾讯内容开放平台），百度feed流产品（用户使用手机百度，网页百度约束和搜索信息，创作者使用百家号创作和发布内容），UC内容服务（用户使用UC浏览器，创作者使用UC大鱼号）。而简书（用户使用简书的发现和首页功能，创作和使用文字编辑和投稿后台）和片刻虽然是综合型内容服务平台，但可能因为体量原因，整合了前台分发和后台创作与一个产品中。垂直类内容服务产品一般与简书类似，整合内容编辑和内容阅读，通常内容编辑做的比较简单，可以查看审核结果和意见就好，如人人都是产品经理，产品壹佰，pmcaff等。因为平台身兼多职，即服务于创作者，让创作者笔耕不辍，积极生产优质内容；同时也要通过推荐策略优化，为用户提供其感兴趣的内容，就像今日头条的slogan：你关注的才是头条，为用户个性化的推荐用户想看的信息。</p><p>1.2用户</p><p>用户之所以浏览信息粗略来看可能有以下12个内在诉求，有的时候可能是多个诉求同时起作用导致用户点击阅读行为，笔者尝试逐一举例分析，如果您感觉还有待补充的用户内在诉求，可以私信或评论指正完善。</p><p>1、性。性需求是最最原始的需求，我们经常在各种内容服务类产品中看到大胸，美女，帅哥，肌肉等具有性暗示的图片，之所以用这类图片是因为用户真的喜欢。曾经一个做运营的朋友，刚刚入行，把一个首页新上的电影使用电影海报作为影片展示图，结果点击量极其惨淡，第二天被主管逼着把海报换成电影中“露骨”瞬间的截图作为展示图，结果点击量如期暴涨。现在依然能看到很多文章使用有性暗示的图片作为首图，使用隐晦的标题暗示用户文章与性相关，让用户产生联想。有多少男生因为360提示网页可能有木马而卸载或关闭了360安全卫士~</p><p>2、暴力和事故。用户在网上浏览文章和视频时，总能被暴力事件吸引住，这也就是为什么我们经常能在各类媒体上看到乘客打司机，大爷因为不给让座打人，虐打动物等，有些人点击进入可能是为了反对暴力而发表评论，还有些人因为不知道什么原因，就是会点击查看究竟，总之人们对暴力行为总是非常的敏感，并且很容易因此而引发围观和讨论。</p><p>3、八卦。经常听到身边的朋友八卦各种明星和身边的同事，不可否认用户浏览信息很大程度上是为了满足自己的八卦需求，大家想想新浪微博的热搜，能瞬间让新浪微博服务器崩溃的无非就是明星的家事，从马蓉出轨，到白百合出轨，陈思成出轨，李小璐出轨等，即使我不是他们的粉丝，当所人都在聊这个话题时，是不是也会点开文章看看到底放生了什么，新浪微博很大程度是八卦信息集散地。</p><p>4、好奇。世界很大，总有一些我们不知道的人和事，而人们通常对于未曾接触过的事物会产生好奇，当我们看到这样的标题你是否会点进去看个究竟，《诸葛亮之所以失败竟然因为他不会用…..》《中国真正崛起的秘密原来是他的一个发明》《一百年前百慕大失踪的飞机重现人间，降落在….》这些标题会让用户产生极大的好奇心，希望看看究竟发生了什么。</p><p>5、学习。阅读信息最基础的需求之一，文字和造纸术的普及极大提升了人类的学习的效率，同时也极大提升了知识传播的效率，降低了学习的门槛，因为种种内在的动机或是外在的压力，人们会阅读大量的信息，以适应这个混沌多变的世界。</p><p>6、打发时间。很多人通过追剧，看小说等内容产品来消磨时间，打发无聊的时光，快手和抖音等短视频平台可谓将碎片化时间利用到极致，蹲个厕所还可以看几段小视频，现代人压力很大，通过放空和这种内容消费打发时间也成为了主要需求之一。</p><p>7、支撑论点和价值观。很多人阅读文章是为了给自己的论点找论据，这点尤其在长辈们的朋友圈中可以很明显的看到，朋友圈中的不转不是中国人标题可谓经久不衰，各类养生秘方，各种心灵鸡汤，他们通过这些文章和视频的分享，支撑他们已有的观点和价值观，其实并非父母，我们也会在浏览器信息时只关注对我们有利的信息，或者说符合我们认知的信息，而基于智能推荐算法，平台会持续的给你推荐那些你想看的信息，让你在平台中持续耗费时间。</p><p>8、获取及时性信息。很多人看新闻咨询是为了实时了解这个世界都发生了什么，这种关注不单单限制在身边，他们关心当下美国发生了什么，朝鲜核问题有什么突破，日本是不是又再叫嚣，中国航母下水试航的情况如何，奥运会昨天晚上中国队得了几块金牌。用户通过浏览信息，希望获得及时性信息，以增加自己的社交货币。</p><p>9、解决问题。有些用户是带着问题来到互联网，期待找到答案的，这也就是百度知道，知乎，悟空问答，分答等内容服务平台产生的原因，人类通过文字传达思想，同时记录问题的解决方案，李笑来老师曾说过，我们一般人遇到的问题历史上肯定有牛人已经找到了问题的解答方法，并且编辑成书，你需要做的就是找到它，阅读它，并尝试运用它。而因为搜索引擎，用户只需要简单录入关键信息，便可以搜索到问题的解决方案，极大提升效率。</p><p>10、社交。马斯洛的需求金字塔包括生理需求，安全需求，情感和归属需求，尊重需求和自我实现需求，其中的情感和归属需求也就是一种社交需求，社交可以分为一种是共情社交，一种是功利社交。共情社交是指为了获得情感联结与情感体验，打发无聊，或是有共同的兴趣等而产生的社交行为。功利社交是指为了达成某一目的，或是从对方身上获得利益而产生的社交行为。这种功利性社交在小孩子一开始挑选玩伴的时候就已经产生了：比如在班级里面大家都倾向于和零食最多、玩具最多的小孩做朋友；我们都喜欢和不会欺负我们、不会抢我们东西的人一块玩；随着一个人心智的完善和社会地位的提升，他会越来越注重社交的「效益性」。很多人使用内容服务产品，参与评论留言，与其他读者互动，找到归属感。</p><p>11、印象管理。朋友圈可谓是印象管理的最强舞台，所以人们会将自己认为会将自己阅读的内容分享到朋友圈或其他社交媒体，让好友看到自己的阅读偏好，最终实现网络环境中的印象管理。</p><p>12、缓解焦虑。中国经历了40年的高速发展，社会结构和生活节奏都发生了极大改变，而正是这种高速变化，让身处其中的我们总是有一种逆水行舟的压迫感，前段时间的中兴中层管理自杀又一次把中年危机推到风口，80后已经面临这上有四老，下有两小的高压生存状态中，世界五百强企业平均寿命只有40年，职场环境的不确定，科技变化不可阻挡，长江后浪推前浪的压力让当今的中国职场人充满了焦虑，知识付费2016年异军突起，通过学习缓解焦虑，通过阅读缓解焦虑，这也是罗辑思维等知识服务可以迅速占领市场的一个重要原因–通过提供内容服务，缓解人们的焦虑。</p><p>1.3创作者</p><p>笔者初步分析，创作者之所以创作内容可能有以下9个诉求，我们来逐一简单举例分析，如果您感觉还有待补充的创作者内在诉求，可以私信或评论告知，笔者及时订正。</p><p>1、扩大影响力。很多创作者参与到内容创作中是因为希望通过内容制作扩大其影响力，以前只能通过出书，写论文等形式扩大专业影响力，而今天的自媒体平台，为这些希望扩大影响力的创作者提供了多样的舞台，从文字，到语音，再到视频，个体崛起的时代，让人的影响力在互联网的推动下，持续被放大。</p><p>2、刷存在感。 从进化的角度来说，人类的任何感觉，都源于神经系统对其他细胞的调控。 存在其实包含两个方面，即物质存在和精神存在。前者表现为人能够以实体出现，并进行相应的实践活动；后者表现为人的精神世界丰富，而所谓的存在感，其实只是精神上的需求程度，而并非物质上的填充。存在感的缺乏反映了精神世界的空虚和寂寞，一般人是不会思考此类问题的。我们常常听到，“存在感是刷出来的”，也就是说，孤独的人渴望做出一些不平凡的事情或举动吸引别人的注意，以获取所谓的存在感。所以内容的创作，让尽可能多的人看到，并影响他人，是一种刷存在感的重要方式。</p><p>3、凑热闹（从众）。以前写过文章，分析人的从众行为，当身边很多人都在写公众号，头条号，很多人都在录抖音和快手时，很多创作者抱着凑热闹，随大流的心态参与到内容创作的大潮中，成为初级创作者。</p><p>4、赚钱。自媒体时代，每个人都有话语权，当创作者影响的用户数量足够大时，商业变现就成为可能，我们可以看到，各种直播平台上各类主播可以月薪百万，得到APP中的199元课程可以有几十万的销量，头条号，火山小视频等平台为创作者提供了大量内容创作变现的渠道，微信中的千聊，荔枝等课程录制帮助内容创作者可以快速变现和推广，很多独立内容创作或创作团队为，他们为了赚到人生的第一桶金而加入了内容创作的大潮中。</p><p>5、提高学习效率。学习需要输入和输出结合，单纯的一味输入（学习），而不进行应用输出，是非常容易遗忘的，笔者发现，编辑读书笔记非常有助于提升学习效率，当学习者用自己的语言和经验将书中的或课程中的内容进行文字复述，那么便可以极大提升学习效率。内容创作是为了内化学到的知识，整合理解新接触的信息，这是笔者写作的诉求之一。</p><p>6、好奇。人们都会对新鲜实物产生好奇，从小咖秀，到快手和抖音，很多朋友就是感觉朋友圈中看到其他朋友分享，感觉很有趣，自己也好奇如何做到的，因为一份好奇创作了一次内容，如果内容真的很棒，平台又将内容分发给了足够多的用户，创作者得到各种点赞和互动，就有可能成为长期创作者。</p><p>7、社交需求。上文中提到了，阅读信息是为了一定程度的社交，而创作者本身就是处于基于内容的社交圈层中心，所以很多人是为了扩大圈子，或是与同行多交流的社交需求而成为了内容创作者。</p><p>8、兴趣爱好。因为互联网和移动互联网，社群经济十分火爆，各种基于兴趣爱好的社群如雨后春笋，如摄影，二次元，读书会，马拉松，夜跑，徒步，烘焙等，而很多创作者喜欢通过文字，相机，手机记录自己的兴趣爱好，发到平台上，找到和自己志趣相投的朋友，他们的创作完全基于兴趣爱好，或者说早期可能因为兴趣使然，随着影响力增加，会发展到变现、社交等诉求。</p><p>9、情怀。生活中有很多文艺青年，他们很讲究情怀，喜欢有情调的小诗和氛围，他们会因自己的情怀而创作内容，他们不在乎内容的传播性，他们编辑内容只是单纯的自己喜欢，他们也有可能会在乎是否可以吸引到志趣相投的人，可以共同交流，追求遇到知音。<br>以上便是上篇内容，为了便于阅读，本文将分为上、下两篇，上篇分析笔者对于内容服务产品的理解，用户和创作者诉求分析，下篇分析平台分发策略和创作者成长体系设计，思考如何优化创作者操作后台，刺激创作者持续输出优质内容。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180207 点石产品报告</title>
      <link href="/2018/02/07/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180207/"/>
      <url>/2018/02/07/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180207/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>html canvas学习，正在做小行星保龄球游戏，界面基本完成，这个涉及到动画效果以及物理力学的要求，难度比2048不少。就我来说，跟着项目学习比硬啃舒服得多。</p><p>两部营销法，广告，提高转化的技巧。</p><p>今天比较懒，没有排版。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>本文是笔者基于日本网络营销大师加藤公一莱奥所著《购买按钮要用绿色的》的读后总结，包括网络销售中从广告的点击到成交额、重复购买率及向上销售的王牌法则，可以让大家轻而易举就能学会和使用的技巧和模式。作为产品经理在页面信息结构，用户体验及文案设计上也需要掌握这些技能，毕竟点击及转化也是产品经理需要关注的指标。</p><ol><li>两步营销法<ul><li>第一步，通过广告吸引潜在顾客的关注。大家投放网络广告的思路一般都是通过广告吸引用户点击，然后引导用户购买，最后希望用户反复购买，成为常客。但在这个过程中大部分的公司及营销人员都会采用一步营销法，即通过广告直接销售产品，类似广撒网的形式，不管哪个群体，争取大的曝光量，总能有点击的用户。此时，我们先问下自己“你是否有点击广告后立即购买的行为？”如果我们都不会买，那凭什么认为其他消费者就会购买呢。投放广告的阶段，我们首先是要获得潜在用户的关注，网络消费者最大的特点就是喜欢比较，这些顾客一定会去各大网站进行对比，查看评论，研究商品的优缺点，而经过一番比较之后，再回到你的网站购买商品的顾客就少之又少了。那么，我们要做的就是在被比较前取得消费者的个人信息。具体方法就是通过免费体验装，1元超值体验装等，将可能购买商品的顾客信息弄到手。<br>在心理学上，这是凭借真正的柔术方法，把商品本身所固有的让人产生负债感的自然力量释放出来，也叫互惠原理，利用贪小便宜的心理，使对方有所报答。免费试用或者1元体验并不会给用户带来经济负担，也不会让用户担心吃亏上当，所以他们都会愿意填写基本信息来获得免费产品。在此基础之上，再对这些潜在用户进行精准营销，效果就会大大提升。<br>在互联网金融行业，很多产品都喜欢用体验金的模式进行拉新（比如：注册即给你10000元体验金作为投资本金，投资期限15天，利率8%，到期后利息可提现，本金回收），这种模式就是免费体验装，两步营销法，用户并不需要一开始就充值，也不需要进行实名认证、绑卡等繁琐的投资流程，待资产到期，你想要提现的时候才需要实名及绑卡操作，而那时用户为了白给的利息，自然愿意填写这些信息。</li><li>第二步，引导潜在顾客进行购买<br>能够填写信息，就说明他们对商品感兴趣，因此对他们进行一定的营销活动，就一定会有部分顾客购买商品，但有一种很重要，就是要在给顾客发送免费体验装的时候附上营销产品介绍、活动优惠介绍及购买链接或网上购买路径，通过网络申请体验装的顾客，绝大多数仍会选择在网上购买。<br>另外，如果要提高顾客的重复购买率，产品质量首先是过硬的，产品不满意肯定就不会再买。但是也需要一个有效的机制，比如引导顾客购买周期性的产品，按时送货，就会大大提高复购率。<br>在互联网金融产品中，当用户已经使用体验金进行投资后，会提示他新用户注册30天内，可享受年化利率11%的新手标的（数值纯属举例说明，各家均有不同）。当用户看到体验金的利息到账后，觉得安全可靠，自然就会继续追加，投资高利率的新手标，此时就完成了一个新用户的转化。当然，只有平台资质全面，安全可靠，利率可观，用户才能继续复投，成为活跃用户。</li></ul></li><li>广告图的设计技巧<ul><li>随着互联网的普及，网络广告的到达率逐年增高，但是点击率却大幅度降低，平均点击率约0.1%左右。<br>通常，消费者上网，是为了获取信息，而不是为了观看广告，所以广告容易被忽视也是理所应当的。但是掌握如下技巧，仍然可以让点击率翻倍。</li></ul></li></ol><p>明确指定阅读群体的广告词，更能提高点击率</p><pre><code>很多广告图设计者都只注重构图的美观醒目及一些花哨的广告语，但在互联网用户中，他们只会注意自己要找的信息，所以如果广告语属于他的寻找范围，自然就成了有效信息，他会寻找答案，进而触发点击行为。简单来说，就是缩小范围，只吸引目标群体。比如“给……的人”“致……的你”，明确了一个群体，就像一个征集令。</code></pre><p> 技巧2：留有悬念的广告语，更能提高点击率</p><pre><code>设计广告语时，不要一目了然，要留有悬念，让广告语少几分广告，多几分信息的感觉。不过，在点击之后的落地页中一定要对应悬念，给出用户想要的答案。让顾客急于了解下文，进而提高点击率。</code></pre><p>技巧3：单纯的商品图片比明星图片，更能提高点击率</p><pre><code>采用模特和艺人的图片时，即便有消费者点击，也都不是对产品感兴趣，而是对模特和艺人感兴趣，所以很少会有人购买产品。另外，女性对模特和艺人的好恶非常明确，如果不是她喜欢的明星出现在广告里，他们就决不会购买相应的产品，所以也可能产品不错，但由于明星起了反作用。另外，用智能手机拍摄的图片会给人一种亲近感，会让人觉得这是一条信息，而不是一条广告，比专业摄影师拍摄的突变更有助于提高点击率。</code></pre><p>技巧4：静态广告比动态广告，更能提高点击率</p><pre><code>很多广告主觉得一闪一闪，让人炫目的展示广告更能引起注意，但现如今，用户早被网络广告狂轰滥炸的形式搞的麻木了，对于这类闪闪发光的，余光一扫就知道是个广告，进而果断关闭它。前面有提到过，让广告少几分广告，而多几分信息的感觉，才会让用户感兴趣。从而在设计风格上，广告要与投放的网站风格一致，有信息有内容，自然会映入消费者的眼帘。</code></pre><p>三、落地页的设计技巧</p><p>   用户通过广告图点击进入时，切记不可直接引到网站首页，顾客是冲着广告图上的产品才点击的，如果进入到网站首页，那就需要再次寻找该产品，这种方式转化最差，不要想着给用户呈现更多，没准就有看上的，坚决杜绝这类想法，如果广告上展示的是产品A，那99%的顾客都只会买A，绝不对买B和C。</p><pre><code>广告应将顾客引导至广告专用落地页，只包含广告中的产品购买信息，整个页面设计需要瞬间的震撼力和感染力，也不要让顾客轻易进入到其他商品的页面。以下有10大技巧可以借鉴：</code></pre><p>技巧1：“广告语、图片、购买按钮”一个都不能少，且放到第一版面内展现</p><p>技巧2：发挥广告文案和落地页的联动作用</p><pre><code>落地页上要使用和广告图一样的广告语和图片，因为如果顾客进来后发现内容完全不一样，并没有广告图中的信息，他们会直接关掉页面。技巧3：将购买按钮设置为绿色，增加诱惑性的闪动我们将红色、黄色、绿色、蓝色、紫色经过大量的AB测试，结果发现，绿色效果最佳，同时，如果鼠标悬停在按钮上时，会出现闪动或者图标放大之类的效果，转化率会进一步提升。技巧4：申请表或广告语中必须注明“体验装”将“体验装”“样品”“试用装”经过AB测试，得出结论，转化率排序“样品”&lt;“试用装”&lt;“体验装”。“样品”给人一种廉价的感觉，而“体验”有种体验会员或者体验高级服务的感觉，尤其是女性顾客感触更深。在广告文案中，每个字都可能带来不同的转化效果。技巧5：在落地页上增加“添加到收藏夹”按钮顾客看完引导页后，通常会去其他网站查询或者比较，但可能会因为无法再次找到我们的页面而最终放弃，所以添加收藏按钮，可以确保顾客能回到我们的页面，从而提高转化率。技巧6：落地页上的标题要有感染力大多数顾客只读标题，对标题感兴趣才会看正文，但正文不易文字过多，整个页面的结构应该是标题--图片/正文，根据编辑人员的经验，顾客对图片下方的文字更感兴趣。技巧7：落地页上先写有效信息，再写产品宣传顾客通过广告页，带着想要寻求的信息进入引导页，所以先提供相关的信息，再抛出商品作为解决方案，即可提高转化率。技巧8：少用文字，尽量用图像表达尽量少用文字赘述，多采用图像来展示说明。技巧9：展示顾客评论时一定要用手写体笔者在上学时候很喜欢看美妆杂志，里面会推荐各种类型的护肤品，其中顾客评论一栏都是用手写体的字样展示，且包含顾客头像、姓名、年龄、肤质、城市等信息，不管它是不是真实的，但对于笔者来说看着就真实，尤其对于肤质的描述与苦恼能引起自身的共鸣，所以对推荐的产品就更想尝试。技巧10：填写信息处强调名额的有限性顾客在填写信息申请表处，增设一个提醒栏，标明数量的有限性，同时强调品质的保障。另外，信息填写部分放到落地页，减少跳转，转化率会提升1.5-2.5倍。</code></pre><p>四、在确认信息页实现向上销售</p><pre><code>向上销售，即给顾客提供更高的价值和服务，刺激顾客做更多的消费。在肯德基点餐时，服务员会问你要不要薯条？或者推荐其他新品小吃，此时，有很多顾客都会毫不犹豫的买了，因为顾客在付款时，最容易接受别人的推销。网络销售中，在顾客确认所填信息时，将焦点吸引至向上销售的按钮上，成功率会提高很多。</code></pre>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180206 点石产品报告</title>
      <link href="/2018/02/06/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180206/"/>
      <url>/2018/02/06/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180206/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>初步完成2048小游戏，gitHub每天都会更新<br><a href="https://github.com/wangtianzhi/code" target="_blank" rel="noopener">https://github.com/wangtianzhi/code</a></p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>「集五福」不仅今年有，明年也会有，会和双11一样成为过年的互联网年俗，虽然每年都会有，但每年的运营目标可能会不一样，相应的规则玩法也会有诸多变化。</p><p>相比前年的敬业福，去年的少额红包，今年的活动除了金额大，敬业福均分，还有趣味性也增加许多。</p><p>除了拿手机扫“福”字集福以外，今年扫“伸出五指的人脸”也可以集福。</p><p>不仅AR扫福，玩游戏也可以得到福卡。</p><p>在支付宝内的蚂蚁森林和蚂蚁庄园都可以获得福卡。</p><p>做这么多福卡的获得方式，支付宝产品经理冠华可能是这么想的：</p><p>扫人脸主要想给「集五福」活动一个可以说的故事：“不要一直玩手机，多看看亲朋好友的脸颊”；“过年别只顾抢红包，还有陪伴亲人送福”；</p><p>极力去摆脱「集五福就是拿红包」这样一个认知。</p><p>用内置养成类游戏集福，主要是想让更多的用户进入到蚂蚁森林和蚂蚁庄园。据相关数据机构披露蚂蚁森林在 2017 年红包大战过后的一个月时间里，用户数破亿，并仍然保持着增长。</p><p>用户活跃度一直是产品数据增长的难点，支付宝除了支付场景外，竭力打造了养成类游戏场景，每天打开支付宝看看自己家的鸡和树怎么样了。</p><p>与《旅行青蛙》类单纯的线上饲养还不同，蚂蚁森林可以种植绿植防风固沙，并且支付宝利用技术实现了树木实景展现；蚂蚁庄园可以给困难孩纸捐款，并且会及时反馈资金使用情况。</p><p>除了打造春节爆款、被人们记住的活动，引导用户、活跃用户才是「集五福」活动真正的目标，用户活跃了，产品里的其他业务线流量相应就增加了。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>总结一下，集五福活动的目的一直是引流，但之前更多的是从外界向支付宝本身引流，而现在是支付宝内部，向内置应用引流。而且在向公众培养一种观念，将过年与五福牢牢的绑在一起，就像双十一和购物绑在一起一样，不仅仅是为了那几块钱，更多的是一种生活方式，重点是社交。</p><p>小游戏做起来并不难，比我想象的要简单一些，主要是动费时间。</p><p>但是如果要做游戏的话，以什么方式放到公众号上，游戏是直接”噌“的一下加上去，还是搞个名头庆祝点东西？</p><p>AR试衣间有没有可能实现？</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180205 点石产品报告</title>
      <link href="/2018/02/05/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180205/"/>
      <url>/2018/02/05/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180205/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>近期典型产品示例</p><p>2048小游戏的界面已经基本完成</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>前几天报道的「立知」，现在已经在各大应用商店下架了，不过已下载的人还是可以正常使用，原因没有公布。但是「即刻」app 在昨天便快速公布，指立知是在抄袭即刻，虽然设计风格不同，但很多产品框架、运营的主题都确实很相近。<strong>而腾讯也是即刻的投资方</strong>。</p><p>B站传出准备赴美上市的消息。</p><p>Figma 拿到了 2500 万美元的 B 轮融资（A 轮是 1400 万美元，15 年的时候），创始人表示今年的营收希望达到 500 万美元，跟 Adobe 和 Sketch 分庭抗礼。</p><p>Figma是一款支持「多人实时协作」的设计工具，可以和别人一起同时进行一个设计，能够互相看到对方的鼠标，以及每个人的每一步操作与结果。相当于设计版的石墨文档。</p><p>Apple 推出了第一支针对大陆的广告，名叫“三分钟”，由陈可辛导演，全程用 iPhone X 来拍摄，讲述一对久隔未见的母女在火车站见面三分钟的亲情小故事。</p><p>春节临近，又有很多 app 换上新春 icon，加上运营活动的横幅，但会引起不少人的讨厌。而 App Store 发起新春相关的活动，让参加的 app 都换上红底的 icon，过了春节再换回来。这种方式，达到气氛的效果，但又不显得那么像小广告。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>学习渠道对我来说越来越重要，许多面试官考核时也爱问，你的学习渠道有哪些？</p><p>知乎、简书关注的大V是个不错的获取资源的方式，但还是有些片面，人家推什么我看什么，而且主观意向太强，我的思维会受到作者的影响，我想更有些自主选择权，看看客观的东西然后自己评价。</p><p>看书自然是一方面，但对于我这样一个普通人来说，在公交车上看书很难做到。</p><p>找了这么几个平台。</p><p>Better Me 大本营</p><p>干货帮</p><p>活动行</p><p>行动派DreamList</p><p>业问</p><p>十点读书</p><p>好点</p><p>这些平台都会集中职场能力发展，职业规划，个人能力发展，兴趣爱好这极大维度来展开，提高优质的文章、讲座以及视频课程。先试着看。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180203 点石产品报告</title>
      <link href="/2018/02/03/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180203/"/>
      <url>/2018/02/03/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180203/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>win系列，为什么xp活了那么久，为什么还有非研发人员费尽心思把win10重装为盗版win7.</p><p>canvas动画基础学完，正着手2048界面。大概三四天可以完成2048。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>国内操作系统、信息科技普及落后与美国相比，软件上的时代我们落后了很多。我们不妨回顾一下——XP是具有历史意义的重大Windows版本，它真的很棒，以至于生命周期如此之长。XP最后一个服务包（Service Pack 3）是2008年，距离它诞生（2001年）过去了7年。随后，Vista于2006年诞生。大家都知道Vista很失败，但作为程序猿来说，Vista或失败于市场营销，<strong>死于极大程度超过当时硬件水平</strong> ，Vista在技术上是开天辟地的。很多方面都抛弃了XP的技术基础，整个系统技术层面都上升了一个台阶，乃至现在的Win10技术发展，都与Vista开创的技术有重大关系。从系统内核版本号可以看出，XP~5.1 Vista~6.0 Win7~6.1 Win8~6.2 Win8.1~6.3。</p><p>Vista市场上的失败也是导致XP迟迟霸占着市场的一个重要因素，于是2009年诞生的Win7多肩负了一个使命——把XP赶出市场。而Win7在这个使命上的表现一般，因为XP霸占市场简直是个“历史遗留”问题。而在国外，Win7很受欢迎。</p><p>2010年，Win8诞生而不尽人意（作为程序猿都想说，Win8真的太糟糕了），2013年Win8.1出现，老美们欣喜地开始从Win7过渡到Win8.1，享受新系统的时候，我们呢？2013年，XP的用户竟然占着半壁江山（54.13%，来自StatCounter）。</p><p>虽然中国用户很多，但微软不会因为一个国家的用户对XP迟迟无法忘怀而停止操作系统改朝换代的脚步！2013年，Win7加上新诞生的Win8.1已经足够在市场上淘汰XP了，微软宣布，2014年停止对XP的服务。而在那时，国外XP份额已经可怜到可以忽略不计，而国内仍然很多很多。我没调数据，但我们开发软件的时候，都是必须考虑WinXP、IE6.0以及1024*768分辨率等老旧内容的兼容性。国内大众计算机相关知识欠缺，信息安全、改朝换代的意识完全不强。我想这是问题的核心所在。说什么用不惯、老系统好用只是较多的表象，本质上我认为是信息教育不够普及。</p><p>或许我们知道现在我们用的是什么系统，或许能说出是Win7还是Win10，但很多人连浏览器是什么都没有概念，不是吗？尤其是一些老年用户。大众都嫌打补丁没用，占用时间占用网速还容易出问题，于是给了WannaCry勒索之机，事发之后才知道打补丁是多重要；不知道自己用的系统是16年前的XP，不知道浏览器是16年前的IE6.0，只知道越来越多的东西用不了了。然而就算知道，也不懂要怎么去换；要说多少大学里多少老师仍然拿着VC6.0这样20年前的老古董津津乐道地给软件专业的学生上课，都不足为奇（当然，也不会反对学生用VS2017）。</p><p>和你的朋友说：你的穿着过时了，不符合你的年龄，或许Ta会去寻思换身行头；而和你的朋友说：现在都用更新的系统了，或许Ta会说用习惯了、还能用、还有不少人用。不得不说美国在操作系统方面的教育值得我们学习，我们之于操作系统，就应该像我们之于手机。知道自己用的是什么牌子和型号，知道它的一些性能指标，也知道什么时候该升级该换代了。更明白软件可以不断更新来获取新功能和更完善的性能等等，愿意尝试和接受这方面新事物的改变和进步。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>如果信息意识更强，自然能明白老系统为何跟不上时代的原因。</p><ol><li>仅一次永恒之蓝已经敲响了警钟，而这只是一方面——系统安全。</li><li>老系统面对新需求的时候显得力不从心——功能方面。</li><li>对超出MS服务期限的系统，即便有正版授权也得不到MS的售后服务保障——售后服务。</li><li>一些的硬件在老系统上工作可能受影响，如XP不支持SSD所需的Trim——兼容方面。</li></ol><p>对这些方面没有需求以及没有必要意识的用户而言，自然是不需要的。</p><p>总之，重点落在信息意识上。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180202 点石产品报告</title>
      <link href="/2018/02/02/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180202/"/>
      <url>/2018/02/02/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180202/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>A站融资失败，而且它的阿里云服务器停运，面临崩盘。</p><p>A站为何没落。</p><p>前端学习，目前进度是可以用Canvas画基本的方块圆线并设置样式。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>一个A站前文章猴对A站的描述，那时A站已经比B站差远了，但还勉强能活。 2017-9</p><blockquote><p>已存活时间：引用知乎另一篇匿名分析文里的内容，大概就是西林跑路，赛门接盘，再到赛门跑路，清洗老员工这段吧，加上13-14年我也在备考MBA研究生，所以慢慢也就淡出了。现实身份：微软西雅图工作时期有时差，闲的无聊，以UP主搬运工身份，由前任文章猴黑龙推荐进入了猴山，业余时间做文章审核，所以那时候我也是有本职工作的。我担任文章猴的时候，现在琢磨起来主要业绩可能就是这么几个——把文章区的访问量增加了一倍。奠定了“评论是本体”的A站特色。文章区目前的板块划分差不多也是在我那时候建立雏形的。先说访问量的事情……那时候新官上任三把火，为了吸引流量我真是动用了很多运营方面的手段，常见的政治话题引战什么的就不说了，老A站读者都懂得，我自己也尝试过在文章里面加BGM——现在后看起来中二一样的行为……另外其他方面我一直有在推进A站的原创作者——你要知道那时候A站压根就没有站内信，看到有原创文笔好的人，我都是在他的投稿里面直接修改标题，问他愿不愿意进我的猴山后宫群来签订契约当御用作者的……现在想想真是累得我蛋疼。当时这些人的投稿内容和排班经常是翔一样，我亲手一篇一篇的替他们校对这些有望成为高流量稿件的错别字，然后替他们修改HTML下面的各种板式简直累死个人。</p></blockquote><blockquote><p>不过工夫不负有心人，这批造星运动还是带动了想当程度的凝聚力与浏览量的。评论方面我也一直有在热门文章或者话题性文章下面发动群众和培养出来的明星原创作者们带节奏，那时候我甚至用织梦系统的垃圾SQL语句查很多僵尸号来用，就为了列队炸个尸来热闹热闹……有段时间你在各大二次元相关网站和论坛，还有那时候刚兴起来的的微博等地都能看到屎黄色的逗逼评论，也算是有我想当的一分功劳吧……最后是板块划分——当初的文章区乱的一笔，有人看的没人看的都往里面塞，于是赛门动念头要拆分板块，于是我们猴山（主要还是文章猴）一合计，就变成了目前的综合，漫画，情感之类的栏目了，有效的保留了各自的受众群，防止了用户体验不佳而导致流失。</p></blockquote><blockquote><p>所以如果让我这个前任老猴子来评论A站没落的话，首先我就要喷现在的文章区——和我那时候比基本就没什么改变嘛，当时我还在任的时候就已经预判到，既然A站在弹幕视频以及视频质量方面，已经处于被B站赶超吊打的借走了，难道你不应该转换运营思路，发挥文章区的优势，形成一个以相对成熟已经有了氛围基础的，二次元读者，作者，评论家主导的用户UGC平台嘛？可惜以我后来离开后少有的几次和拿工资的猴山员工们的接触下，感觉他们身上的惰性，以及自己干的工作与自己理想不匹配产生的抵触情绪异常明显，明显到我这个后来的局外人都能被他们影响到，再也提不起对A站的兴趣了……那种“反正我们是干不过B站了，拿着稀薄的工资，投稿也都是无脑搬运那我就看着哪个顺眼就过审哪个吧”的态度让人感觉不到任何年轻人的朝气和希望。所以A站的败局在我看来原因很明显，那就是外部环境上，一开始慢慢被B站赶超后导致的士气丧失，加上后台管理层匮乏的运营视野，短视，故步自封，使得外有猛虎，内有顽疾的A站最终沦为了只能靠外部输血苟延残喘的一副怂包样了。</p></blockquote><p>一个较有代表性的说法</p><blockquote><p>完全是把自己作死的，简直和用户有仇一样，体验极差。一开始是死活不给注册账号，没账号就没办法收藏视频。b站则是偶尔会开放注册一天，我就是这样有的b站账号。再后来就是b站开放了带答题的注册，问题好玩，注册到的也会相对其他网站更珍惜自己的账号，理性发言。在需要吸引用户扩充体量的阶段无疑b站就比a站封闭的小圈子先得一分。动漫圈子歧视新人是有传统的，早期像云中漫步、s1等论坛为了讨论质量和节约服务器资源都是这么封闭，但是要商业化的时代了还这样不是找死？</p></blockquote><blockquote><p>后来有段时间a站的搜索功能不知道是坏了还是只给会员用，搜不出来东西，于是找个视频极其困难。反观b站视频分类合理，搜索和排名系统完善 ，每过几天看看每个分类下的前十名，这段时间的好玩的视频也就大概都能看到，体验完爆a站。这以后就很少去a站了，都是动漫娱乐视频，大同小异，有一个就够了。</p></blockquote><blockquote><p>再后来a站搞什么文章区，占了主页很大块版面。话题本身就已经很无聊了，一堆宅左小孩子能讨论出个鸟？何况要看这些东西不能去门户和论坛？b站是一直专心做弹幕视频，对于本来就奔着视频才找这类型网站的用户来说，哪边更舒心不言而喻。作为一个普通用户，促使我退a保平安的主要是这三件事情，谢谢大家。之后a站又又又被谁收购等等妖娥子就算在知乎上看到相关话题也没注意过。好几年都没打开过这个站了，变成什么样关我什么事？</p></blockquote><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>总结起来，A站创立天时地利都占了，就是人和不行。</p><p>2010年，创始人之一Xilin <strong>私自</strong> 400万出售了A站，这个起点是一错再错的开始。</p><p>后来呢，赛门，陈少杰，奥飞混乱接盘，2014年4月，赛门留下一句“没人会比我更爱ACFUN”离开A站，杨鑫淼和奥飞选择新管理方法，原职员几乎被清光。</p><p>领导层和投资层的不断变动就已经表示出，A站的管理者是不是真的在用心经营，还是纯粹为了利益通过商业手段玩弄？</p><p>用户体验差的一逼，和这不无关系。</p><p>这要是能干过B站，就有鬼了。</p><p>而近期的大事件，虽然很突然，但也是早晚的了。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180202 复盘产品研发过程</title>
      <link href="/2018/02/02/%E5%A4%8D%E7%9B%98%E4%BA%A7%E5%93%81%E4%BB%8E0%E5%88%B01%E7%9A%84%E7%A0%94%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/02/02/%E5%A4%8D%E7%9B%98%E4%BA%A7%E5%93%81%E4%BB%8E0%E5%88%B01%E7%9A%84%E7%A0%94%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>清晰的工作流程帮助每个人对自己的工作有清晰的全貌认知；也有助于提高工作流转效率，促进事情最终落地；同时帮助管理者方便清楚地掌控整件事和每个人的工作状态。</p><p>因团队规范化建设的需要，基于对产品从0到1研发过程的复盘，总结和梳理产品规划、产品迭代的研发全流程。明确整个研发过程的关键节点，及每个节点的主导人和产出物，规范工作流程，提高团队效率。</p><hr><h4 id="产品研发流程"><a href="#产品研发流程" class="headerlink" title="产品研发流程"></a>产品研发流程</h4><p>从有一个idea，到如何将这个idea一步步细化，到开发出来落地上线发布，大概经历的路劲如下：</p><p>其中每个节点都要有对应的角色来主导发起和推动落地，否则没有负责人的事情是无法落地实施的。此外每个节点结束的时候，要有相应的文档输出，作为此节点顺利完成的标志：</p><p>1.产品构思：这一节点中，主导人发起和主持头脑风暴会议，团队成员（主要是产品组内或项目组，）CTO、老板等领导参加。</p><p>A.会议上，由主导人阐述idea作为主题，其他人围绕着主题发散思维。<br>B.思路收集方式有两种：一是给出5分钟思考时间，随后按顺序依次说出自己的思考，主持人用思维导图记录并将不同的点进行归类。进行上三到四轮后，差不多能考虑的点都出来了，大家共同对各种方案分类整理，形成多种备选方案；二是采用Design Hackathon方法，形成多种备选方案。<br>C.有了备选方案或方向后，给出三到四天时间，分工对各个方向的市场情况、可行性、竞争情况等进行分析。<br>D.随后组织方案确认会，根据调研情况和公司战略确定最终实施方向。<br>E.输出产品方案脑图</p><ol><li>产品规划：通过构思和最终方向的确定，产品的着力点算是确定了，接下来就要进行详细的调研和规划了。这一阶段主要进行信息的收集和梳理工作，由某个主负责产品主导，其他人分工协作的方式进行。最后的信息要规整形成一份完整的产品规划PPT，具体规划步骤如下：</li></ol><hr><p>A. 痛点分析：主要从两方面思考：某方面的需求客观存在、现有解决方案存在缺陷（调研竞品的缺陷）<br>B. 竞品分析：主要输出重要竞品的功能结构图。此处若竞品很多，如何选择其中的三四个来梳理，我还没有很好地方法，不知大家是如何做的？<br>C. 市场分析：这一步主要要确定产品面向的细分市场，及这个市场当前的发展现状。<br>D. 用户分析：对用户的各方面属性和特征进行分析，形成用户画像。<br>E. 业务调研：对产品涉及的业务场景，业务主要是做什么的，业务具体是怎么做的这三方面按职能进行调研。<br>F. 流程梳理：业务调研后，需梳理出业务的处理流程。<br>当以上节点都完成后，将信息规整到规划ppt中，ppt内容结构可按如下安排：</p><hr><p>3.规划MVP版本：规划书通过评审后，团队内讨论，确定最小可行版本，力求用最小的成本试错市场。</p><p>4.版本迭代：第一期实施范围确定后，可开始规划版本，开始细化研发工作。版本迭代流程按如下进行：</p><h4 id="产品文件"><a href="#产品文件" class="headerlink" title="产品文件"></a>产品文件</h4><p>除了清晰的流程，做好每个节点产出物的管理和归档也是很重要的项目管理工作，一是方便后期回溯，二是只有形成文档才能迫使大家更注重地去完成工作，毕竟有产出才有成就感嘛。归档文件夹如下：</p><p>1.产品规划：此文件夹中应包含如下四份文件，对应产品构思和产品规划节点的产出：</p><p>2.发布上线：此文件夹中，有两件事情要做，一是在测试通过后，要部署正式环境时，应梳理发布说明给到运维（谁负责部署给到谁），此份文件主要应交代清楚部署时需要注意的点，目录大致如下：</p><p>二是在这一节点需发邮件或其他形式通知到其他干系人（如运营），请他们启动后续工作。</p><p>3.Q&amp;A：此文件夹用来维护Q&amp;A的整理，此处关于问题的梳理，统一参考谷歌的模式，一是将同类问题进行归类，大类下放小问题；二是表述按照操作步骤来：</p><p>4.其他：其他文档都是常规文档，无需多说。</p><p>通过不断评审和打磨，团队一起在年底确定了如上标准，希望在新的一年，能在清晰流程的指导下，工作做得更好。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180201 点石产品报告</title>
      <link href="/2018/02/01/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180201/"/>
      <url>/2018/02/01/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180201/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>今天算是正式开始系统学习JavaScript Canvas，从html与JavaScript基础学起，跟着《HTML5 Canvas基础教程》学。</p><p>学习进度内的实例都被我自己敲了一遍。</p><p>书的电子版和我的小实例已经传到GitHub上了。</p><p>以及近期的值得一提的产品示例。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>腾讯推出了一个名为「立知」的 app，产品上像是「即刻」和「今日头条」的结合体，有主题、摘要，有故事线，有各方观点和评论。目前还处于邀请码开通阶段。</p><p>饿了么推出了年度账单，回顾一年里的点餐数据，以及有好友 PK 默契度、像素化风格的小游戏。这是链接：<a href="https://secret-bill-2017.faas.ele.me/friends.html" target="_blank" rel="noopener">https://secret-bill-2017.faas.ele.me/friends.html</a></p><p>苹果去年发布的 HomePod 和 iMac Pro，都已经正式发售、有媒体拿到真机评测了。（凤凰科技）</p><p>Facebook 创始人扎克伯格表示，在2018年里，Facebook会针对信息流进行改造，加强社交关系的动态的权重，干预媒体账号的内容，把信息流「重返」好友互动的状态。在去年，Facebook 被假新闻、极端事件新闻影响不少，并且他们早年推出的 Instant Article 也几乎宣告失败，媒体们都回归了自己的网站。</p><p>「奇点」「PriceTag」的独立开发者组成了工作室，名为「Fireball」，提供产品开发、设计服务，有4名成员组成。现在他们的官网上线了，可以看到他们的服务介绍和作品。</p><p>著名的开源前框/设计框架 Bootstrap，今天终于发布Bootstrap4的正式版。今日头条官方头条号发布了一则公告，从下周三起禁止在头条文章里推广微信、微博等第三方平台账户，违规的将会扣分或者禁言。此举被人认为是向微博微信的宣战，而简书的首页投稿规则其实一直都有一条，就是禁止带有微信公众号二维码推广。试想一下作者都只为宣传自己的微信微博，对平台有什么利益呢。</p><p>斯坦福公开课《如何运营一家公司》：</p><ol><li><p>关于枪筒和火药的关系，发挥整体效能，找到枪筒很重要；</p></li><li><p>来自 Peter Thiel 的专注理念，专注于解决重要的事，而不是急迫的事；</p></li><li><p>后台显示「使用程度」这个 Feature 很妙；</p></li><li><p>总是反过来想：除了好处，这个指标还会带来什么坏处？</p></li><li><p>公司午餐很重要。（摘自微博）</p></li></ol><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>滴滴出行 app 在打车过程中，如果这时切到别的 app，滴滴依然会持续叫车，但用户这时可能有焦虑，到底滴滴会不会就停止叫车了。滴滴app的方法是，切到后台，依然会语音提示「正在持续叫车」，减少用户焦虑感。地图类app 也是这样，切到后台，语音提示「xx地图持续为你导航」。</p><p>博客没我想的那么容易搭建，最近见老师和老同学比较多，暂时推迟了。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180131 点石产品报告</title>
      <link href="/2018/01/31/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180131/"/>
      <url>/2018/01/31/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180131/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>分享Axure原型图的方式</p><p>日期选择器设计总结</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>Axure原型制作完成后，打包发送文件给开发人员、视觉设计师、BOSS的方式早已经成为过去式，通常的做法是部署到公司的服务器上，接受者直接在浏览器输入地址打开即可查看。但公司没有提供服务器时，怎么办？这个时候我们想，如果能搭建一个本地的服务器，能快速给同事一个原型预览的链接，而且这样就能很方便的适应原型的修改，那样最爽不过了，当然如果有开发经验的会想到很多服务器比如tomcat等，但是有没有一个不需要安装，下载体积小，切换简单粗暴的选择呢？EasyWebSvr，一个80KB可帮助你分享Axure原型的神器。</p><hr><p>日期选择器设计总结</p><p>日期选择器的设计很容易被我们忽视，因为我们潜意识都觉得日期选择器很简单。其实的确也很简单：一个输入框，一个日历图标，用户点击日历图标就会弹出一个日历浮层来供用户选择具体日期。这是每一个日期选择器的基本样式，看起来的确很简单。但是事实真的是这样的吗？在设计日期选择器之前，设计师要问自己一下几个问题：</p><p>1 你的日期选择器是选择一个特定的日期（7月18日）还是一个时间段（7月18日——7月29日）？</p><p>2 用户是否可以手动输入日期或者用户只可以选择系统自定义的日期？</p><p>3 我们是否需要给用户提供默认值？</p><p>4 我们给用户添加“上一个，当前和下一个”跳转按钮是否合适？</p><p>5 如何给用户展示不可用日期？</p><p>6 当用户需要选择日期的时候，日期选择器是否唯一合适的控件。</p><p>如果你无法回答以上的问题，我相信这篇文章对你还是有用的。</p><p>录入模式</p><p>目前日期选择器的录入模式有很多种。用户可以手动输入，下拉列表选择，弹出日历浮层选择,滑块和表单等。手动输入是最原始的日期录入模式，用户对此很熟悉，学习成本为零。操作起来也比较简单，属于中规中矩的。使用下拉列表对于年和月的录入比较简单，但是对于具体日期来说，使用下拉列表对于用户来说就比较难操作了，因为选择项目太多了。</p><p>日历浮层是当前很受欢迎的一种日期录入模式，主要原因就是简单，其外观可以给用户一种挂历或日历的隐喻。</p><p>滑块也非常适合用于日期选择，因为滑块不仅可以选择一个单个日期还可以选择一个时间段。但是滑块的一个缺点就是无法完成精确录入，可选择范围越大，滑块的使用价值就会越低。使用滑块来录入星期几，月份都是比较适合，但是要来录入具体日期就比较难了。用户必须操作的十分小心和缓慢。</p><p>表单是一种新型的日期录入模式，效率高，但是对于年龄大的用户来说使用起来可能会比较困难。</p><p>默认值</p><p>日期输入框里给用户提供默认值肯定比直接空白要更好，但是默认值的内容和展示形式还是需要我们仔细斟酌的。</p><p>用户在使用谷歌航空时，谷歌航空基于大数据分析会给用户提供默认值。例如，你7月3日搜索航班，会默认出行日为7月19日，返回日为7月23日。其实类似的手法我们也可以应用到国内的一些购票网站中，例如今年国庆／中秋放假为10月1日到8日。所以在9月份，我们假设用户打开一款购票软件都是为了购票回家。那么我们就可以默认为10月1日为出发日，8日为返程日。这样可以极大的节省用户的输入时间。</p><p>当然默认值还可以给用户提供一个日期录入规范，例如你想输入2019年3月1日，正确的格式应该是03-01-19，但是有的用户可能会输入01-03-19。默认值可以很好的避免这类情况的出现。</p><p>当然如果你的产品足够的智能化，日期的录入格式不会局限于一种，这样无疑更加的人性化。</p><p>录入时间</p><p>日期选择器有的时候不只要选择日期还要选择时间。例如你要请人吃饭，要去预定餐位，在这种情况下就需要录入时间（段）。</p><p>时间录入模式和日期录入差不多，这里主要来说时间录入的时机。</p><p>Topvet是一个兽医网站，你可以在上面为你的宠物预约医疗服务。这里的日期选择器很有代表性，用户在左边选好日期，然后选择时间段，最后选择医生。日期－时间－医生，这个流程看起来很正常，但是仔细想想就会发现问题。</p><p>例如，一个用户平时比较忙，只有中午有时间带宠物来看病。这种情况下，日期－时间－医生这种录入顺序就不太合适了，应该让用户先选择时间段，然后反显出可以预约的日期，再选择医生。</p><p>以上的这种，其实是日期和时间相互剥离的。在一些情况下，例如屏幕空间有限（手机）或者为了简化用户操作步骤，我们就需要将日期和时间整合在一起。</p><p>日期段录入</p><p>要录入一个日期区间，意味着用户要录入两个日期。很多设计师就会下意识的使用两个日期选择器，其实是完全没有必要的。首先一个日期选择器完全可以完成日期段的录入，而且多一个日期选择器会增加用户的点击次数。</p><p>此外手机端碍于屏幕尺寸问题，同时展开两个日期选择器也不太现实。</p><p>了解产品</p><p>设计师要对产品足够的了解才可以设计出优秀的日期选择器。例如，我们有没有问过自己做的日期选择器上是否需要给用户切换年份的功能。</p><p>如果你的产品是类似去哪儿，携程之类的，那么年份是不需要加的。因为用户不可能把几年后的火车票都给买了，那样不现实而且政策也不允许。</p><p>还有我们见到一些日期选择器将周末凸显出来，我们有没有思考其背后的原因？</p><p>Skyscannet是一个类似于去哪儿的应用，这里的日历将周六和周日和其他日子隔离开来，这个设计很有心，因为周末是大多数人选择旅行的时间，所以应该突出表现，让用户更容易发现。</p><p>其他的日期录入方式</p><p>其实我们经常会陷入一个误区，例如给用户一个错误提示我们就会想到用弹出框，用户要选择日期，我们就会想到日期选择器。其实用户要录入日期，并不一定非要使用日期选择器。对话式交互也是一个很好的替代方式。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>需要提高兴趣来自主学习，明天搭建自己的GitHub博客，以此提高学习动力。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180130 点石产品报告</title>
      <link href="/2018/01/30/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180130/"/>
      <url>/2018/01/30/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180130/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>DAR 艰难抉择的比较</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>作为一个产品经理，除了在前期要做好项目预算，项目计划，还需要在项目进行的过程中，对于项目遇到的问题作出抉择。在整个项目过程中，会有很多的抉择，二选一，三选一，四选一。</p><p>有些相对好选一些，有些却很难区分出孰优孰劣。这个时候该怎么办？</p><p>拍脑门选一个？当然不合适。也是对项目不负责任的态度。那有什么办法呢？</p><p>其实是有的，这里介绍一个工具叫做DAR，专门用来比较几个方案的孰优孰劣，便于最后做选择。</p><p>DAR -  Decision Analysis and Resolution 源于CMMI。目的在于使用正式的评估流程，根据已建立的评估准则评估各种已界定的备选方案，以分析可能的决策。</p><p>接下去说人话，DAR是一个工具，用来帮助定性的衡量方案的优劣，从而帮助项目经理做决策。</p><p>那么DAR怎么做呢？一般情况DAR分为三步：</p><p>第一步，建立决策评估表。</p><p>首先，将纠结的几个选项分别填入选项一，选项二，和选项三（如果有）中。</p><p>然后，罗列相关的考虑因素，如成本，技术难度，工作量，如果是项目集管理，对于其他项目是否也有益处等等。</p><p>第二步，组织团队相关成员评定，并获取各个方案的评定结果。</p><p>这个其实很好理解，通俗的讲，就是组织大家投票打分，参与人员有一定的要求，比如技术大牛，可以就技术难度方面做权衡。项目出资人（如何可以)回就成本方面做着重考虑。</p><p>之所以不是项目经理一个人打分，是因为每一个相关干系人考虑问题的方面不同。只有将这些人都囊括进来，得到的结果才是全面的。</p><p>最后还要注意下，这里的权重，是干系人根据考虑的因素自己衡量出来的，一般是1-10分，并且为了拉开各个考虑因素的差距，建议不要有并列的选项。</p><p>第三步，根据评定结果选择方案。</p><p>这一步是一个统计的过程，收集各个干系人的打分结果，再做一次加权统计。最后根据分数得出最后采用哪一个决策。</p><p>好了，以上是理论部分，接下去举个例子实践下。</p><p>小伟当前有一个项目，需要帮助公司制作公司主页。目前有两种想法，一种是将整个项目的开发外包出去。另一种是使用团队资源，自行开发。</p><p>这两个方案很难讲孰优孰劣，其实都是可以行方案。这个时候，小伟为难了，不能自己一拍脑门的自己做决定。于是小伟采用了DAR这个工具。</p><p>首先第一步，小伟制定了决策评估表。</p><p>小伟罗列了成本，时间，资源，技术难度，成品质量五个考虑因素。并将此表格发送给了，技术经理，上级主管，财务主管，再加上小伟自己。</p><p>然后，收集几个人的反馈表格。下面是财务主管的反馈表格。</p><p>从财务的角度，他更侧重于成本和资源，而技术难度和成品质量他并不是很注重。从他的角度，他更倾向于自主研发。</p><p>接下来在看看技术经理的表格.</p><p>从技术经理的角度出发，成本和时间都不是他考虑的重点，是否有资源做，以及技术难度，产出质量是他比较关注的。从结果来看他更倾向于外包。</p><p>当小伟把几个人的表格都收集齐了之后，最后要做的就是统计选项一和选项二的平均值，最后选定分数高的那个即最终的方案。</p><p>当然有些极端情况是，无巧不巧的，两个策略最终得分一样，那至少证明在所有参与评判的人总和来看，两个方案其实是一样的。那个时候，真的是拍脑门选都可以了。因为至少证明了，两个方案不分伯仲。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>今天看到b站更新，点击用户评论后，不会再跳转到一个新的用户评论详情界面，而是会从下方拉出一个评论详情小框，上方的视频不会被覆盖住。这个改动让我非常非常满意，我相信大部分人也是这么想的，点下评论视频就没了体验很差。</p><p>美中不足的是，我一开始想了半天怎么从详细评论退回所有评论。直到发现右上角有个小×，也太不明显了，也有可能是我开着夜间模式。而且这种交互方式，用向下的箭头比较好。</p><p>看到新闻说，Uber CEO表示，飞行汽车将在十年后上线。这算个产品界的重大新闻了，虽然不是互联网产品，但它的影响必将是一个不可阻挡的趋势性影响，所有领域都会波及。</p><p>不过我认为和飞行汽车之间，我们还隔着一个电动汽车。我指的是可以量产推广使用方便的电动汽车。</p><p>综合考虑，电动汽车的缺点无非是：充电慢，充电不方便，续航差，性能一般。</p><p>充电慢，因为技术上原因，汽车充满电需要3~8小时，就算快充也要一小时，相对于加油的速度来说，实在是太耽误时间。</p><p>充电不方便，充电桩和充电站点太少，当然这是因为电动汽车不普及，等火起来，自然不是问题。</p><p>续航差，很差，具体数据忘了，但没几个人愿意开着电动汽车上高速。</p><p>优点呢，能源清洁，所以国家扶持力度大，电能也比石油便宜，所以性价比是偏高的。</p><p>个人认为电动汽车还需要四五年才能真正走入市场。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180128 点石产品报告</title>
      <link href="/2018/01/28/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180128/"/>
      <url>/2018/01/28/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180128/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>宅哥给我了个任务，用htmlcanvas做个2048小游戏出来，所以在学这个的基础，先在w3school上找了几个实例敲着学。</p><p>商业模式</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>商业模式的模式</p><p>渠道的下沉</p><p>过去的出版社想要获得更多读者，最重要的是掌握线下的发行渠道，实现特定地域的垄断。</p><p>互联网的出现使得内容可以跨越地域的限制触达读者，线下渠道被颠覆了。</p><p>虽然互联网提高了信息传递的效率，但特定信息之间的信息不对称依然存在，人与特定信息之间的连接仍然需要第三方平台来建立，垂直平台应运而生。</p><p>垂直平台连接了人与特定信息，但终究是个中介的角色。为了占有，甚至是独占信息的供应者，垂直平台需要提供更多的基础设施服务，来减小信息传递过程中的阻力，提高特定信息和人的连接效率。</p><p>慢慢的，平台会倾向于成为基础服务本身，这样信息的供应者才离不开平台。</p><p>用一个简单的箭头来表示：</p><p>信息 → 渠道 → 人</p><ul><li><p>过去的渠道只能存在于线下，需要一个中间者调动渠道， 这个中间者A就是出版社；</p></li><li><p>今天互联网代替了线下渠道的同时也变成了基础设施，不再需要任何人调动，但仍然需要中间者来分发信息，这个中间者B位于基础设施之上，成为了渠道本身；</p></li><li><p>未来的中间者B为了占有信息的供应者，不断减小自身阻力，慢慢也从渠道下沉为基础设施，然而更垂直特定信息依然需要分发，新的中间者C又出现了。</p></li></ul><ol><li>商业价值链</li></ol><p>从商业价值的角度出发，信息 = 供应商，人 = 消费者。</p><p>即，一条完整的商业价值链：供应商 → 渠道 → 消费者<br>举几个例子：</p><p>Facebook 本质上提供的是用户，在他的商业价值链中，消费者是广告主，所以打造网络效应只是聚集/绑定用户并防止他们逃逸的手段。再退一步，就算无法把你绑在平台上，Facebook 也必须能找到「你」在哪，并把「你」分发给合适的广告主。所以  Facebook 建立了大量的线上追踪技术，甚至打造热气球互联网计划。</p><p>Google 提供的是服务，所以他需要将 Google 全家桶融入到各个平台中。</p><p>尽管 Google 本身也提供 Android 系统，但系统所承载的只是渠道作用。作为服务的供应商，Google 最不想看到触达消费者的渠道被另一家公司垄断，所以他在自建渠道的同时仍然不得不将 Google 全家桶植入 iOS，甚至不惜交「保护费」成为 iOS 的默认搜索引擎。</p><p>而 Apple 提供的是从服务、软件、系统，直到硬件的一站式体验，他的收入来自于售卖硬件，所以 Apple 不可能将自己的服务、软件和系统开放给任何别的硬件玩家。</p><p>但 Apple 仍然需要触达消费者，所以他必须支持尽可能多的网络制式，支持尽可能多的语言，进入尽可能多的区域。</p><p>也就是说，对于一款产品而言，向上需要占有尽可能多的供给，向下需要融入/拥抱/建立尽可能多的渠道。</p><ol><li>扩张、切入和竞争</li></ol><p>技术变革会压扁旧渠道，也会创造新渠道，同时产品需要去融入已有的渠道，拥抱新生的渠道，建立自己的渠道。</p><p>这说的是降低渠道成本——扩张的必要条件之一。</p><p>而另一个必要条件则是以更低的成本获取更优质的目标供应商。</p><p>不同行业的做法不尽相同，有的利用网络效应就可以打通渠道，快速获得大量供应商并连接消费者；还有的需要逐渐积累足够多的消费者才能击穿上游；还有一些行业，供应商的生产成本很难有可观的下降，只能通过渠道成本的下降来补贴扶持供应商，甚至是依靠自制来降低采购成本。</p><p>这说的是扩张。</p><p>往上抽象一层，在「供应商 → 渠道 → 消费者」的商业价值链中，核心点是什么？——是「稀缺」。</p><p>过去渠道是稀缺资源，所以大量的线下代理商掌握了红利。</p><p>而今天的渠道越来越「丰富」，最终成了基础设施，供应商便成了稀缺资源。</p><p>未来的供应商越来越丰富，分类出现了，垂直的生意又来了，此时优质的供应商成了被追逐的稀缺资源。</p><p>这说的是切入——新玩家要找到稀缺资源，这同时也决定了哪些以左是你的供应商，哪些以右是你的渠道。</p><p>稀缺资源的切入方式和渠道效率的提升方式构成了你的差异化，然而成为基础设施最终会让你遇上一个意想不到的对手。</p><p>这说的是竞争。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>实例做出来都保存到GitHub里了。<a href="https://github.com/wangtianzhi/code" target="_blank" rel="noopener">https://github.com/wangtianzhi/code</a> 当然现在没多少。</p><p>多读几遍产品有关的书和文章真的能扯出点东西。</p><p>热水停了，明天回家。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180127 点石产品报告</title>
      <link href="/2018/01/27/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180127/"/>
      <url>/2018/01/27/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180127/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>近期典型产品示例</p><p>关于小程序</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>QQ空间新功能「错过的动态」，以对象化的形式展示好友动态，点击后会进入次级页面。QQ空间的时间线一直是按时间排的，这个做法或许能一定程度解决在有限时间内的忽略掉某些动态的可能，比如如果一个好友跟我互动聊天很多，我比较想看它的动态。不过为什么是以对象化的形式而不是混合的信息流，也很值得思考。</p><p>百度翻译支持了直接上传图片进行翻译，上传的图片会通过 OCR 识别技术，把图片中的文字提取出来，然后再进行翻译，这个功能还是十分实用的。</p><p>昨天有一个蛙蛙的视频在朋友圈传得比较火，有人因而发现了朋友圈的视频折叠机制，如果这个视频被分享次数过多，将会变成链接形式展示而不是视频形式。</p><p>这个做法达到了降噪的效果，而其它产品也会有类似的做法（比如好友xxx、xxx喜欢了这篇文章），另外这也常见于反垃圾的时候，如果一个图片视频被封了一次，那么别的帐号试图上传同样的图片视频，也可以直接封掉。</p><p>微博 app 灰度上线新版「我的」页，把列表形式的入口改为跳板式，把「经常访问」板块搬到一级页面，设计风格上更年轻。最近这样改版测试的产品似乎有些多，之前也有报道。</p><p>即刻 app 把热评直接放到信息流进行展示，一条动态底下会展示 1-2 条评论。这个做法不算罕见，比如「最右」，适用于热门/精选一类的内容。</p><p>乐视由于之前的风波，更名「新乐视」，现在 logo 也悄悄换新了。（不过怎么新 logo 有种中国移动的感觉。）</p><hr><p>小程序一周年</p><p>经过一年的生长，小程序有了点盼头。</p><p>作为一个不再新鲜的“新鲜事物”，前有公众号的流量红利为证，大家纷纷看好小程序；后又面临高开低走的质疑声，让人心生观望。但小程序从未在众人的目光中退场，而且小程序的第一波红利已经释放。</p><p>在仅仅1年的时间内，与小程序相关的融资已有7亿资金入场，其中不乏一些主流投资机构，比如IDG资本、经纬中国、真格基金等。</p><p>从17年的融资名单可以看出，跟线上相关的小程序占据了绝大部分，然而跟线下相关的融资却寥寥无几，也就是说小程序一开始定位线下的期望并没有如其所愿。</p><p>加上最近微信有意放开之前的各种限制，频频发力和赋能，大刀阔斧地向前推进，是对过去克制节奏的一种转变？还是暗含了微信当前的一种焦虑？</p><p>小程序上线一周年，我们或多或少在微信群或好友分享中看到一些刷屏的小程序，那些在线上火爆的小程序有什么样的共性值得后来者关注的？</p><p>1 小程序的核心定位</p><p>说小程序之前，不得不说微信，现在微信的月活规模已经接近9亿，其中一线城市用户饱和度已经90%以上，微信线上流量的获取已经见顶，再往上增长的空间狭小，小程序去年1月推出，正处在微信用户规模已经触顶的关键时刻。</p><p>这就不难理解张小龙的说法“我们更多的是希望小程序的启动来自于扫二维码”。二维码相当于传统的域名，商家可以利用二维码构建消费入口，完成用户购物体验。</p><p>因此线下的商家应该是最大的需求方，二维码才是小程序的最大入口。</p><p>公众号做内容生产，对应的是内容传播方式的重塑；而小程序就做服务变现，对应的是线上与线下消费服务入口的重构；公众号负责积累粉丝沉淀用户，小程序提供服务解决能力，完成用户链条上的最后一环，从而打造微信生态圈内完整的营销闭环。</p><p>2 线下的焦虑</p><p>当然以上说的是微信的理想，实际情况是定位线下的小程序，上线满一年，在实体商户中反响平平，不尽如人意。</p><p>虽然我们从小程序一系列的更新进程上可以看出：</p><p>1）小程序升级更新频率高，对开发者的开放程度逐步友好，小程序的服务能力已经在无限接近满足一个app的功能；</p><p>2）小程序的入口得到极大的拓展，场景入口已经达到46个，在微信内部的流量跳转已基本实现。</p><p>3）小程序和公众号的关联越来越紧密。小程序可关联的公众号数量从50个提升到500个，小程序可通过公众号文章底部广告位推广。</p><p>但是有两点是小程序不能快速在线下推进的根本。</p><p>其一，商户的流量主要来源于线下</p><p>因为小程序是一个面向商户（开发者）的东西，面向商户（开发者）意味着微信给予商家更多的流量扶持，对标的近似O2O的商业逻辑，帮助商户获得更多地曝光，赚更多的钱，建立品牌影响力。然而小程序带给商家的流量微乎其微，即使是推出“附近的小程序”也只是杯水车薪。</p><p>小程序一开始的定位就决定了微信是想要从线下获得流量来反哺自身，而线下贴个二维码本身就属于零散的被动行为场景，不太可能给予商户集中性地流量增长。</p><p>其二，小程序和App的悖论</p><p>小程序的核心价值高低在于解决实际问题的能力和体验。从用户需求的角度讲，用户不会在意自己使用的是小程序还是APP，而是更多的关注哪种方式操作更简单，流程体验哪个更顺畅，不容易占用手机内存等。</p><p>这就意味着开发者推出的小程序若非体验和服务优于APP一个量级，否则用户在操作习惯上依然倾向原有的APP。以及若非高频的场景触发，用户很难在已有app的基础上再选择一个新的操作方式。</p><p>所以，在线下受阻后，微信小程序上线社交立减金（实则是补贴商户），马化腾亲自跑到安徽合肥推广“腾讯乘车码”也就不难理解真正用意了。</p><p>3 线上的崛起</p><p>一方面是线下商户的观望导致线下应用受阻，另一方面，小程序在线上闹得风生水起。</p><p>去年5月，首个刷屏小程序“匿名聊聊”诞生，短短五个小时打开次数达到惊人的40亿次。</p><p>10月，左右脑测试捧红了现象级小程序“实用心理测试大全”；</p><p>12月，一款“圣诞头像”的小程序凭借制作圣诞帽3天PV破7500万，累计用户近700万。</p><p>赶在2017结束前，“跳一跳”小程序游戏引爆全民狂欢。</p><p>根据《2017阿拉丁小程序生态白皮书》列出的TOP小程序名单，除了共享单车、红包店、小电充电是结合线下玩的，其他还包括电商，工具，群应用，均为纯线上产品。</p><p>而其中，又以社交电商和拼单类的小程序最为火爆。拼多多小程序上线半年就获得了上亿用户；蘑菇街小程序上线4个月就获得了7000万安装用户，并转化了 2000 万新购买用户，2017年双11，有44%的成交用户来自于微信好友分享。</p><p>4 线上爆发的特点</p><p>结合白皮书来看，能够冲到top榜的小程序具有以下特点：</p><p>1）具有社交裂变属性。 这类具有社交因子的小程序天生适合生存在微信的土壤中，通过微信庞大的社交流量助力优质社交小程序成为市场的爆品。 比如拼多多、蘑菇街利用拼团实现社交电商的突围。比如忆年共享相册通过社交场景实现低成本快速获客，比如红包特质的小程序容易勾起人们的转发欲望，从而获得很好的传播效果，实现短时间的大量用户增长 。</p><p>2）垂直领域头部。针对细分市场的小程序也容易受到传播，比如汽车类小程序有多个排名靠前，用户已经把小程序当做选车、购车、用车的重要入口，因为属于低频应用，没有必要下载一个app，如果切入的早，小程序场景的便利性就容易使其升到头部。</p><p>3）高频的场景唤醒。这些场景本身高频发生且原有的体验流程存在资源损耗，小程序优化解决了很多商家和用户的痛点。 比如KFC小程序解决等位排队、点餐、买单付费、发放优惠券、客户消费分析、基于LBS的信息推送等问题，比如视频、直播、K歌等娱乐小程序因为轻应用的特点给了用户娱乐多样化的选择,并且用户可以直接将有趣的视频、 直播等通过微信快速分享给好友,实现比App更好的传播效果。</p><p>4）复合型。这一类小程序可能本身是一个工具应用或者某个高频的场景唤醒了用户，继而又通过+社交或者+内容的方式提升了用户粘性，扩散了传播半径，所以，笔者认为在某一领域做到垂直类第一的App如果变成复合型会有很大的发展空间。</p><p>比如在七麦数据评选的2017最具实力小程序中，位列TOP2的美篇，分析其蹿红的速度，得益于一整年在小程序上的发力和突破。</p><p>美篇从微信朋友圈只能发布9张图片的痛点出发，以图文创作工具切入，不仅沉淀了内容，还形成了社群，通过微信生态小程序中的内容可以实现好友分享、共同阅读，查看好友的批注、阅读进度等功能， 而且初步完成了商业化变现的探索。</p><p>具体来看：</p><p>a.创作（工具属性） 3分钟编辑完成一篇图文并茂，有声有色的文章</p><p>b.分享（传播属性）  1键分享微信朋友圈和好友</p><p>c.阅读（内容属性）  优质内容聚合推荐，流量分发</p><p>d.社交 （社交属性） 基于图文内容，以兴趣聚合的交流社区，围绕老师的家长社群，围绕公务员的同事社群，围绕摄影旅行的兴趣社群，这些都是普通工具类小程序不具备的。</p><p>5 未来的方向</p><p>去年12月底，微信新增小程序首页入口，新增Home 键，新增三点切换键。微信作为“虚拟系统”的存在已经初露端倪。</p><p>就在最近几天，小程序支持打开移动应用，也就是说从App分享到微信的小程序页面，用户可以通过这个小程序卡片回溯到原来的App。</p><p>这也相当于告诉开发者：APP和小程序现在是共生的关系，不用担心发展了小程序会造成核心用户的流失，来发展你的小程序。这对线上玩家来讲绝对是利好消息。</p><p><strong> 但另一方面，线上小程序玩的再火也只是在微信大生态内部流量的运动，对微信来讲，能不能成为线下消费服务的一个入口，借以撬动几倍于微信当前的流量是未来微信的着眼点。</strong></p><p>随着支付宝小程序的步步紧逼，微信小程序急需一条出路打破目前的困局。某种程度上说，小程序对微信来说，是一场只能进不能退的战争。</p><p>“跳一跳”小程序的火爆意味着微信对小程序能力的释放会加快，之前藏着掖着的能力接口，比如小程序分享到朋友圈，消息的主动push，关注等功能是不是有可能会释放值得期待。而18年游戏类、泛电商类、泛社交类小程序必定会大发展。</p><p>从博客、微博的周期规律来看，一个内容平台的红利期大约在24个月左右。从微信公众号的发展轨迹来看，超级大号集中出现在这个平台推出后的24个月中。</p><p>对应小程序，小程序的红利期兴许在一年之后就会关闭，给创业者的时间不多了。对于已经在上半场表现不错的选手来说，抓住这波红利期把用户规模再上一个台阶已是重中之重。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>内容很多，如果我是从网上摘抄，就多铺设点内容，然后通读理解，如果我自己写，就少写些。</p><p>本来想有了mac可以做ios端开发，后来发现自己并没有苹果手机，很不方便，还是安心学js吧。</p><p>武汉现在好冷。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180125 点石产品报告</title>
      <link href="/2018/01/25/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180125/"/>
      <url>/2018/01/25/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180125/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>近期产品范畴内值得一提的新闻及思考</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>乐视网股票已于1.24复盘开始交易。</p><p>2017.4.17乐视网停牌，这一停就是九个多月，期间乐视生态危机持续发酵，贾跃亭甩手走人，孙宏斌很艰难的收拾残局，而停牌的关键原因是乐视网对乐视影音的收购，也迟迟没有进展最终不得不叫停，叫停后停牌的理由也自然不存在了。</p><p>但是关于乐视网到底欠款多少涉及多少家企业，一直众说纷纭，最近乐视官方公布是70亿，涉及50多家，不知道什么时候能还完。</p><p>押金问题不是钱的问题，而是行业的信用问题，是广大居民对共享单车行业的信任问题。</p><hr><blockquote><p>据媒体报道，自从小蓝单车被滴滴接管之后，便风波不断。1月22日，广州市交通委员会发文，指出小蓝单车在未解决遗留问题之前，滴滴以托管形式在广州开展单车运营属违规，政府部门将加强监管和严格管理。而在此前，深圳市交通委员会也叫停了小蓝单车的投放，使小蓝单车的复活节奏被打乱，没有达到变相复活的目的。</p></blockquote><p>小蓝单车提出复活计划，是在被滴滴托管以后。小蓝车之所以被滴滴托管，是因为押金和废旧车辆回收等关系用户切身利益的遗留问题没有解决，引发严重矛盾，被注册所在地有关部门登记为非正常经营状态。</p><p>有人原本以为，被滴滴收购以后，押金问题可以很快被解决。但是，滴滴提出的解决方案，并没有如用户所期待的那样退还押金，而是将此前小蓝单车的押金转换成滴滴单车券和出行券。也就是说，很多用户的诉求并没有得到满足。遗留问题没解决，要想复活，就缺乏依据。</p><p>很显然，广州、深圳等地限制小蓝单车复活的做法是正确的，是负责任的表现。小蓝单车能否复活，不是由谁来托管、收购决定的，而是要看问题有没有妥善解决。再大的公司托管，再好的企业收购，如果不解决历史遗留问题，不把用户的诉求处理好，不清清楚楚、明明白白地面对用户，单纯允许其复活就等于默认其违约、纵容其失信，就会使行业的信用度进一步降低。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>学习完那本JavaScript和jQuery的第一章，所有实例自己敲了一遍，想传到github上，也的确这么试了。</p><p>传的过程很艰难，因为自己又建了个仓库，边操作边搞清分支、仓库、工作区等的概念，遇到不少问题。主要是分支的rebase没弄好。</p><p>明天继续。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180124 点石产品报告</title>
      <link href="/2018/01/24/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180124/"/>
      <url>/2018/01/24/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180124/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>PMP认证考试</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>先看一下数据：截止2017年12月，PMI全球认证人士统计数据如下：在全球认证的有效PMP（项目管理专业人士）总数为827,960人；中国大陆已经有近17万人通过了PMP考试，加上香港台湾，大中华区已经有近19余万PMP。相当于中国占了四分之一。PMI出版的《项目管理知识体系指南（PMBOK指南）》被翻译成11种语言。通过数据调查的分析，PMP认证人士比非认证人士的薪资平均高出10%左右。</p><p>据悉，PMP认证能帮助项目经理获得更高收入，提高项目管理能力。其为组织创造的宝贵价值已经得到管理层、同行和各行各业客户的认可。中国国家外专局副局长陆明曾在项目管理国际论坛会上说过：“引进国际先进、成熟、适用的知识体系及职业资格认证，是引进国外优质智力资源的第三种途径。” 中国自从引入PMI的项目管理专业人士认证考试（PMP）以来，成为项目管理从业者对自身的要求，成为即将从事项目管理工作的人员的“敲门砖”。 当然了在一些大型企业，甚至PMP认证成为企业“项目经理”必须具备的任职资格。在国际上，PMP认证也成为项目招标的资格之一，只有拥有PMP认证项目经理的公司才有资格参与竞标，承建项目经理必须拥有PMP认证。</p><p>毋庸置疑，无论是国际国内大环境的战略发展，还是每个企业小环境的日趋成熟，都离不开项目管理，离不开它不断升级的科学理念和流程。每一个想考PMP的人，在做决定的时候，是否真的好好想过:自己到底为什么考PMP呢?学PMP，真的只为一纸证书么?相信每个报考的人都是有自己的目标和想法的，而不是一味的追随趋势报考的。经常有人这样问如果我获得PMP证书，是否就能马上实现薪水增加和工作提升?大多数情况下，这一切都不会是立刻实现的。不过当你真正掌握项目管理的基本术语，知识及技巧知识和技能；在实际工作中展现出作为项目管理专业人士所具备的能力；在与高层管理者交谈汇报时，可以用共同语言交流，对问题分析和提供解决方案有更全面的理解和考虑，更好地理解高层管理者考虑问题的方法和想法，从而能更有效地按照高层管理者的意图完成工作。如果能做到以上几方面，那么走向管理层，走向高薪是必然的。PMP在外企和大型企业非常受重视，中石油、中海油都会给内部员工做培训的。PMP的证书含金量不错，对升职加薪跳槽有帮助，但是更应该关注的是通过学习PMP 建立项目管理框架，做项目有方向感，不至于力不从心，能力提升才是王道.</p><blockquote><p>哈哈因为通过PMP的考试也有一段时间了，不论是在网上，还是在工作中，总听到有人发表关于学习PMP的评论，有人觉得学习PMP就是要获得这个证书，花点时间多做些题也就过了;有人认为PMP现在考的人太多了……看到这些，作为一个老PMP，忍不住再次来复盘，输出一下当年的心得体会。想跟各位准备报考PMP的朋友提一提自己的建议!一定要擦亮眼睛寻找机构学习，多问问自己身边考过pmp的朋友，毕竟网络社会鱼龙混杂，好多的隐形消费是你当时可能不会想到的。总之要学会抱团成长。如果是抱着学以致用的目的去学习PMP，那么学习完之后一定是对工作有所帮助的（还可以提升在组织中的地位及个人竞争力），当然认真刻苦的学习过程必不可少。通过学习PMBOK的理论，参加考试，可以使我们整理自己以往的项目管理经验，在以后的工作之中更好的运用，正所谓从实践中来，到实践中去。</p></blockquote><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>考PMP要35小时专业培训证明，外加大量知识点的学习，pmbok要重复读三到五遍（或者其他不错的教材），大量做题，以及，3900元报名费外加3000元左右培训费，补考2500。吸口凉气。</p><p>还好我最大的资本是时间，慢慢准备得了。</p><p>至于为什么有想考这个的想法，我自己自制力不行，有个考试逼逼我是最好的，查了查各种说法，大部分人建议学产品或者项目的报考。含金量没准，视公司而定，对我个人来说，比较适合考。考的过程也是个结识志同道合的人的机会。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180123 点石产品报告</title>
      <link href="/2018/01/23/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180123/"/>
      <url>/2018/01/23/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180123/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>为什么年轻人用qq邮箱居多？</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>从场景、人员、竞品这三个方面来分析。</p><p>（1）邮箱的使用场景——邮箱是互联网相对早期的沟通方式</p><p>邮箱一般在比较正式的场景下使用，主要是在工作中传递资料内容，在生活中使用的频率较低，不是一个高频应用的生活产品。<br>对于年轻人来说，相对常用的邮箱使用场景一般有两种：①求职；②朋友之间相互分享资料。<br>目前在移动互联网的冲击之下，随着云盘、QQ离线发送等功能的发展，邮箱的使用频率更加低下。另外，主动写邮件一般是在PC端进行。<br>（2）人员属性——学生</p><p>对目前的学生团体来说，使用邮箱的频率更低且对邮箱类的服务商认知较低。<br>对于学生来说，在求职之前，邮箱主要是用于朋友间的沟通。<br>学生没有很强的动力去主动申请邮箱。<br>（3）QQ邮箱与竞品分析</p><p>1）对学生群体而言，邮箱不是高频应用，其获得的简易性很重要。QQ邮箱背靠QQ这个超级应用，无须登录即可使用，获取非常方便；而网易邮箱、Gmail等竞品，需要记住登录域名、个人账号密码，还需要事先注册才能使用，获取比较麻烦。</p><p>2）对学生而言，在求职之前，发邮件主要是为了朋友间的沟通。QQ邮箱的发贺卡、发明信片、漂流瓶等功能，很好地满足了这一需求，而其他竞品邮箱则更多专注于工作效率的提升。</p><p>3）QQ邮箱在QQ这个超级应用上有着一个很大的入口，比起其他竞品有着更强的流量优势。</p><p>4）QQ邮箱作为PC端常用应用，在通信附件功能、方便朋友间交流方面拥有巨大的优势。</p><p>5）其他的竞品如网易、Gmail等，需要记住邮件ID、登录域名、需要特殊申请且没有早期的宣传认知路径，导致所占份额下降。</p><p>6）虽然我现在主要用Gmail，但对于大多数人来说，翻墙不是个随随便便的事，所以中国这道墙很好的保护了qq邮箱受外来侵略的影响。（其他腾讯产品的盛行也得益于这一点）。</p><h4 id="顺便一提"><a href="#顺便一提" class="headerlink" title="顺便一提"></a>顺便一提</h4><p>在pc端申请Gmail账号需要手机号验证，我的手机号被指为不可用手机号，网上找了许多方法也不顶用，而用qq邮箱app居然能创建Gmail并且顺利验证通过。</p><p>qq邮箱算是个被公认的“真正“的七星级产品。</p><blockquote><p>而像QQ、微信之类看似是腾讯旗舰的产品，仅因弹窗捆绑就足以无颜挂靠「七星级」这枚光环。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180122 点石产品报告</title>
      <link href="/2018/01/22/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180122/"/>
      <url>/2018/01/22/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180122/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>近期产品新闻总结</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><ol><li><p>微信与育碧的战略合作，将在小游戏领域开展<br>在 2018 微信公开课PRO上，育碧娱乐软件公司(UBISOFT)与微信共同宣布，双方将就小游戏领域展开全面战略合作。育碧旗下Ketchapp将在微信平台上线数款小游戏。双方将发挥各自优势，为用户提供玩法有趣、内容丰富、体验优质的小游戏产品。</p></li><li><p>ofo正在进行新一轮融资 由阿里巴巴主导。<br>ofo资金紧张的问题成为近期热点。今天早间最新消息，ofo内部人士透露，ofo正在进行新一轮融资计划，该笔融资由阿里主导，阿里目前正在做尽调。</p></li><li><p>微信公众号或将推出独立App，恢复赞赏功能<br>2018 年微信公开课pro今日正式举行，在公开课上，腾讯高级副总裁张小龙透露，微信公众号将推出独立的APP，苹果手机的赞赏功能也将恢复。对于微信订阅号将推出信息流的传闻，张小龙明确回应，订阅号不会做信息流，只会逐步的改善阅读效率。张小龙还表示，赞赏功能已和苹果公司协商妥当，即将恢复，新的“赞赏”将改成面向作者，订阅号将会增加作者栏，而不是以以前的围绕文章触发。</p></li></ol><p>4.肯德基可以用比特币支付，并推出专属比特币炸鸡桶<br>即日起，加拿大肯德基将支持顾客使用比特币支付，购买特设的比特币炸鸡桶，而且价格绝对公道，仅需0. 0010305 个比特币你就可以买到这样一份丰盛的炸鸡桶。据悉，这个专门为比特币设置的炸鸡桶套餐包括 10 块原味鸡翅、华夫饼、一份鸡块，土豆泥及两份薯条，售价0. 0010305 个比特币。根据比特币的价格计算，它的售价约为 20 加元(约合人民币 103 元)。<br>当然，由于比特币价格是不断波动的，所以，你购买炸鸡的价格也是变动的，而且你只能在特定的时间买到，就想线上的不定期抢购活动一样。下单成功后将由外卖送到家。</p><ol><li>网易招财猫项目或已夭折，测试资金正在清退<br>今日有消息称，网易布局的区块链产品“网易招财猫”项目已夭折。据悉，网易招财猫项目组发布公告称：本地网易互娱内测已结束，请于 2018 年 01 月 19 日23：59： 59 前填写本人的真实信息和银行卡号码，后续会将测试资金转入银行账户中，因此请务必确保所填写的帐号为本人帐号，测试资金已经到账即视为返还。</li></ol><p>6.苏宁云商更名苏宁易购：品牌名升级为公司名 证券代码不变<br>1 月 15 日消息，苏宁云商集团股份有限公司发布公告，称公司计划将“苏宁易购”这一苏宁智慧零售的渠道品牌名称升级为公司名称，对公司中文名称、英文名称、证券简称等拟进行变更。<br>公告显示，苏宁云商集团股份有限公司(Suning Commerce Group Co.，LTD)拟变更名称为“苏宁易购集团股份有限公司”(Suning.com Co.，LTD)，中文简称及证券简称由“苏宁云商”变更为“苏宁易购”。证券代码不变，仍为“002024”。</p><p>7.因将“台湾和香港”列为国家，网信办依法约谈花椒直播相关负责人并责令全面整改<br>1 月 14 日，北京市网信办就“百万赢家”活动将香港、台湾作为国家列入答题问题依法约谈花椒直播相关负责人，责令全面整改。北京市网信办指出花椒直播未能有效履行主体责任，在“百万赢家”活动的信息安全管理方面存在重大漏洞，违反《互联网信息服务管理办法》《互联网直播服务管理规定》等相关法律法规，并造成不良社会影响。</p><p>8.小米选择摩根士丹利/高盛作为IPO承销商，估值为1000亿美元<br>据彭博社援引知情人士透露，小米公司已经选择摩根士丹利以及高盛作为该公司首次公开募股的承销商。消息人士表示，瑞士信贷及德意志银行也将助力小米完成IPO，该公司的IPO估值目标最高为 1000 亿美元。不过小米目前还未决定IPO的具体时间以及具体地点。小米最近一次融资是在 2014 年，融资之后的小米估值为 450 亿美元。如果小米上市的话，他们极有可能是阿里巴巴之后IPO规模最大的企业。</p><p>9.新浪微博开通账号注销功能，需满足7个条件<br>新浪微博在近日开通了账号注销功能，微博账号注销功能的开通非常低调，而且隐藏极深，还不能在网页上操作，必须登陆官方微博客户端，依次打开我-设置-账号安全-微博安全中心-其他账户类问题-如何注销账户。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>腾讯与育碧的合作，多少和之前的欢乐跳甁有关系，是先准备合作，再借鉴育碧的游戏，还是先抄，被发现了没办法只能拿钱砸育碧？我更倾向于前者。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180121 点石产品报告</title>
      <link href="/2018/01/21/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180121/"/>
      <url>/2018/01/21/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180121/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>Keep产品体验</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>一、战略层（产品目标和用户需求）</p><p>1、市场背景</p><blockquote><p>近些年，人们对身体健康越来越重视，对自己体型的要求也开始逐步增高，“穿衣显瘦，脱衣有肉”的理念深入人心，腹肌、马甲线更是引领潮流，现今可以说是个全民健身的年代，但是很多人苦于无法合理健身减肥。这些不断增长的市场需求为运动健身领域带来了前所未有的商机。而在“互联网+”的影响下，运动健身领域搭上了移动互联网的顺风车。</p></blockquote><blockquote><p>现今市场上已出现了很多运动健身类App。此类APP主要可以分为两大类，一类是以乐动力、小米运动、悦动圈等为主的“数据记录类”APP，主要记录跑步时长、路线、卡路里消耗等等，侧重于跑步记录，也逐渐增加了互动分享社区；另外一类是以Keep、火辣健身、Fit Time等为主的健身指导类APP，附有自主定制的健身训练课程，因其丰富的内容受到广大健身爱好者的喜爱。</p></blockquote><p><strong>其实就我个人观念，健身app有前景是因为健身有前景，健身有前景一方面是人吗总体来说在追求更高质量的生活，另一方面离不开公众号推文无脑吹健身，贴两张健身前后的图然后告诉你是个人就应该健身，以及知乎上不少人吹健身，健身已经成了不少人的一种信仰。</strong></p><blockquote><p>目前运动市场上的产品越来越趋向于数据记录和健身指导的结合。比如，Keep3.0版本就增加了跑步功能，版本的迭代中也在对该功能进行优化。同时互动社区的打造和UGC内容的产生也是运动产品留住用户的关键，用户间的相互交流讨论能激励用户坚持健身，使其有更强烈的归属感，最终才能长久的使用产品。</p></blockquote><p>2、产品概述</p><p>Keep是一个移动健身社区类APP，提供视频课程保证真人同步训练，不同层次、不同需求的用户都能找到符合自己需求的视频课程，得到相关的系统性指导，对入门者来说可以避免走很多弯路，每个视频皆以短视频为主，满足用户对碎片化时间的利用。因其具有一定的社交属性，用户可以相互交流讨论，加油打气，精选动态里的用户健身美图更是激励用户坚持锻炼，另外高阶健身用户还可DIY健身内容。</p><blockquote><p>Keep在AppStore健康健美类目里排名第2，搜索度80，一直活跃在健美健身排行榜顶端。据悉，Keep自上线7个多月后，用户量已经达到了600多万，日活率据称在10-12%之间。2016年5月，Keep完成3200万美金C轮融资。本轮融资由Morningside (晨兴资本)和GGV (纪源资本)领投，BAI (贝塔斯曼亚洲投资基金)跟投。包括天使轮在内，Keep从去年2月份上线至今已完成四轮融资。</p></blockquote><p>从Keep产品迭代的过程中可看出，Keep早期为积累大量用户，着重健身课程的优化及互动社区的打造，从3.0版本开始，又增加了跑步和电商两大功能，逐步优化用户体验，由最初的移动健身工具逐步向运动平台转型，从电商入手开始探索商业化，形成一个闭环。</p><p>3、用户分析</p><p>3.1目标用户</p><p>Keep：Slogan是“自律给我自由”，定位的用户人群更多的是偏向于家庭无器械，或者刚刚入门而且请不起私教的大学生（比如我），想要减脂、塑形或增肌，但偏爱轻量运动的健身人群。他们身体素质基础不同，需要针对性的训练，性格相对活跃，喜欢分享，希望在健身的同时会认识多一点朋友，相互加油打气，或者只是想从这里找些动作要领，学习学习注意事项，后者偏多。</p><p>Keep的用户特征：年龄多在39岁以下，男女比例接近于1.6:1（数据来源于百度指数，精确度有待验证）。</p><p>3.2用户需求</p><p>Keep能在上线的短短时间内积累大量用户，关键是解决了几大痛点：（1）短视频教程的使用方便了上班族和学生党对碎片化时间的利用，也解决了部分用户家庭无器械的烦恼；这个我认为是最牛逼的地方，每个动作有对应的标准小视频，从网上找大多是文字描述或者图片。希望能添加缓存功能，毕竟5秒的视频也费流量（2）丰富的视频课程内容满足了不同基础、不同需求的用户；（3）社区性的分享机制更是增加了用户互动性和健身积极性。接下来，详细分析下用户需求。</p><p>1、健身</p><p>Keep产品的目标用户主要需求即为健身（包括减脂、塑形和增肌）。他们会希望做一些针对性的训练，使身材变得更加健美。他们的目的很明确，需求更加具体，比如说有些用户只是想瘦腰，练成马甲线，那他们需要的就是腹肌训练课程，还有一些用户家庭无器械，又不想去健身房，那他们需要的即是无器械健身教程等等。用户的基础层次、细分下的健身需求不同，所以需要不同类型的课程指导。</p><p>2、社交</p><p>纯粹的健身训练很容易使用户感到枯燥。用户希望认识一些志同道合的朋友，相互交流，相互加油，同时也渴望自己的健身训练记录得到他人的鼓励认同，促使自己更有动力坚持下去。他们需要一个能让他们分享、交流的社区，同时也需要晒健身图，这不仅满足了用户虚荣心，也激励了其他用户。</p><p>3、咨讯</p><p>对于想要达到特定目的而健身的人群，除视频训练课程外，他们需要得到关于饮食、健身常识、器械等其他方面的建议和经验。</p><p>二、范围层（功能规格）</p><p>以下均是摘抄</p><p>1、基础功能上面说过。</p><p>2、训练课程：用户首次注册时需选择填入基本信息，如健身目标、健身基础和性别，之后产品会根据这些信息推荐给用户适合他的训练课程，用户可自主选择。除此之外，用户可根据身体素质、健身目的等因素定制健身训练课程表（可获取Keep推荐课表或自主定制课表）。训练安排循序渐进，从易到难，并且用户可随时自主调整。</p><p>3、视频教程：用户选择好训练计划后即可根据视频教程开始健身。所有视频均由教练真人录制，达到真人同步训练，并配有训练动作详解和全程语音督导，有效提高健身效果；视频教程可提前下载，省去网速慢的困扰；健身结束，用户上传记录数据，并配有心情标签，俗称“打卡”，训练数据可选择发布；训练记录保存在个人训练历史记录里，并可连接HealthKit，同步训练数据。</p><p>4、跑步记录：Keep3.0版本开始增加了跑步功能，并完美的和Keep的健身课程内容相结合，被纳入到训练课程表里。该功能可记录用户的运动轨迹、速度及跑步里程并打卡，完成挑战可获得 Keep 跑步徽章。并配有跑前热身、跑后拉伸等段视频指导。</p><p>5、互动社区：除之前说的训练结束分享健身成果外，用户可在关注的小组、话题里发布动态，也可在他人动态里留言、为其加油打气、分享他人动态到第三方。系统也会推荐一些精选动态供用户点赞评论分享。用户在发动态是可选则发布图片，Keep提供了一些贴纸和滤镜等用于美化图片，吸引他人视线。</p><p>除此之外，Keep产品里也提供一些健身资讯，比如说健康营养知识、训练过程中的疑惑的专业解答和成功经验分享等，部分内容由用户产生。</p><p>近些年，用户产生内容（UGC）俨然已成为市场趋势，因为很多用户产生的内容有特色，身材图片漂亮励志，满足不同用户的需求，同时自己的计划得到认同也将大大鼓舞用户，让用户有归属感。社区这块也是Keep主打的特色功能，可预知该产品会继续在这方面优化管理和体验。</p><p>6、商城：Keep3.0版本开始加入电商版块。在平台上所发售的商品均由Keep官方选定，也有自有品牌的运动装备，用户可以搭配Keep课程来进行购买使用。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>有些很熟悉的产品，想要说出它们的目标用户、基本功能也很困难，平时没事多问问自己怎么描述这些产品。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180120 点石产品报告</title>
      <link href="/2018/01/20/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180120/"/>
      <url>/2018/01/20/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180120/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>因为寒假时间比较多，所以有时间做做产品分析练习</p><p>先从如何分析开始</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>一般可以采用以下两种方式来撰写产品分析报告。</p><p>第一种：层次分析法</p><p>战略层：产品目的，用户需求，经营者和用户想从产品中得到什么。</p><p>范围层：规格功能，某个功能是否应该成为该产品的功能之一，各种功能的组合方式是什么样的。</p><p>结构层：流程结构，用户如何到达某个页面，并且他们走完流程之后能去哪儿。</p><p>框架层：页面布局，按钮，表格和文本区域的位置，是否达到这些元素的最大效果。</p><p>表现层：视觉设计，产品图片，文字的表现样式、交互形式。</p><p>第二种：递进分析法</p><p>1）产品的定位是什么？</p><p>2）目标用户是谁？</p><p>3）用户使用的场景是什么？</p><p>4）对应场景下的需求是怎样的？</p><p>5）该需求的实现步骤闭环是什么样的？每步骤下都有哪些维度？</p><p>6）产品发展前景如何，产品目前处于什么阶段？</p><p>7）市场容量、市场变化趋势、技术基础是什么样的？</p><p>8）产品的易用性、功能完整性、用户体验等怎样？</p><p>9）如果做改进方案，添加什么功能？优化哪些功能？优先级如何？</p><p>其中，第一种层次分析法逻辑上更完整，但有套模板的嫌疑，而且对于新手来说，上手相对困难；而第二种递进分析法，整体思路更简单、更清晰，符合一贯的产品思考逻辑，所以下面主要采用“递进分析法”来展开说明产品分析报告的写法。</p><p>1．产品定位</p><p>产品定位有如下作用和特点。</p><p>1）产品定位是最重要的问题，产品定位决定了目标用户群体，决定了用户的使用场景和需求。</p><p>2）产品的定位决定了活动运营、推广、调研的群体。</p><p>3）产品的定位也包含公司内部对产品的战略地位，产品不同的战略定位也不同，如有的产品定位为盈利，有的产品定位为培养用户基础，有的产品定位为形成体验闭环。不同的战略地位，决定产品的着力点和重心也不同。</p><p>4）产品定位决定了产品功能的优先级，也是分析产品遇到问题时重要的决定依据。</p><p>5）产品定位不是一成不变的，会随着试错、市场变化、用户增加、习惯漂移、技术发展等原因而改变或增加。</p><p>2．目标用户</p><p>推出一款产品前，需要定位产品都面向哪些用户，也就是目标用户是谁。很少有产品是适合所有用户的，必须根据产品定位确定目标用户，同时在分析时需要将不同的目标用户进行特点归类，方便满足不同需求场景。</p><p>了解了不同需求之后，我们还需要分析需求的目标用户。某个需求到底是满足谁的需求，是普通用户，还是专业用户的需求？这需要我们对已获取到的需求做进一步的分析。通常我们称目标用户为产品的关键涉众，从涉众利益的角度去分析，即用户需求外加商业目标，也可以进行反推，这样我们就能找到需求的服务对象。比如财务软件的关键涉众是企业老板，而不是企业里面的会计，老板想看到什么样的财务报表，决定了会计要如何做账。而当下很火的理财产品，有的是面向普通用户，有的则是面向理财规划师，这些都是取决于产品的商业定位和目标用户。在分析好需求之后，在实现的过程当中也会遇到一些问题，是完全实现所有需求呢？还是只实现其中的某些部分？而当下成功的互联网产品表明，越专注于某一个功能的互联网产品就越能体现出产品的价值，也就越容易成功。</p><p>对于产品用户，一般来说可以划分做出以下几种情况：高端用户和低端用户，学生用户和白领用户，活跃用户和不活跃用户，初级用户、普通用户和高级用户。在实际情况中，用户的特征信息包含非常多，几乎任何一个特征因素的不同都会导致用户对产品使用的行为习惯不同，如何进行有效的用户分类呢？</p><p>人口统计学属性的分类方法可以较直观地表现出用户属性差异，从而获得一定的划分结果，这种划分方式几乎能够适用于任何一款产品。虽然这个分类方法能够准确地获得分类数据，但是对于用户需求的考虑相对较少，划分之后的用户群相对于产品的定位精确度较低。</p><p>为了更好地根据用户需求特征来获得用户划分结果，在人口统计学属性划分的基础上衍生出了多维度用户特征研究方法。多维度的分类方法，就是在考虑产品对用户的约束因素以及用户自身特征的因素后进行筛选，获得重要的维度因素来划分用户。一般来说，基本的特征包括用户年龄、性别、计算机使用背景、收入水平、用户对于该产品的使用经验和偏好、使用目的等因素。而产品对用户的约束因素包括形状的确定、颜色的不可更改性、按键的唯一性等。</p><p>3．使用场景</p><p>使用场景是一种更接地气的分析和描述用户需求的方法。它应该拥有这样的结构：“在某某时间（when），某某地点（where），周围出现了某些事物时（with what），特定类型的用户（who）萌发了某种欲望（desire），想通过某种手段（method）来满足欲望。”这几点信息其实统一地描述了需求产生的环境。从这些环境信息可以分析出诱发需求的条件和需求产生时的环境条件。</p><p>例如，在候机时，候机厅里，用户看到手机电量过低时，会想要充电。</p><p>可以分析出，用户是在电量低的信息刺激下想要充电。当时他所在的位置是候机厅，一个到处都是电器，但是没有插座开放给乘客的地方。</p><p>（1）who</p><p>使用场景还需要分析是什么样类型的人有这种需求，他有什么样的能力可以潜在地帮他满足需求。继续前面的例子，乘坐飞机的手机用户都可能会有给手机充电的需求，因为他们下了飞机一般都会联系家人报平安，联系别人来接机，等等。而且乘坐飞机的人一般收入水平较高，会带着现金或者信用卡。</p><p>（2）desire</p><p>对需求的描述有一个注意事项，那就是某种需求背后往往还有更深层次某种需求，前者只是后者的解决方案。比如想给手机充电是一种需求，但背后的需求可能是打发无聊时光、给家人报平安、看目的地城市地图、联系旅行社等。给手机充电只是这些背后需求用户自己能想到的一种解决方案。</p><p>不断一层一层分析需求可能帮助你更清楚地了解用户到底想要什么。那么，如果满足某种需求实在太难，满足它背后的需求也是可以的。比如，假设在候机大厅提供充电太难，但可以向用户提供电视（打发无聊时光）、刷信用卡的公用电话（给家人报平安）、提供该航班目的地地图（看目的地城市地图）、代订酒店（联系旅行社）。</p><p>（3）method</p><p>method是用户现有的解决方案。把现有解决方案清晰地描述出来可以帮助产品团队判断竞争对手是谁。这种竞品往往不局限于同行业，只要目标需求一样，就是竞争对手。例如，针对获取地理信息这个需求，卫星地图的竞争对手可能是纸质地图、指南针和指路大妈。了解了对竞争对手，就可以更明确地知道这种用户需求是否存在、强度如何、我们的新方案有何优势、对方是否弱爆了。</p><p>4．需求分析</p><p>需求是由现状（源点）、目的地、驱动力和阻力四个方面构成。</p><p>源点和目的地构成了需求的两端，就像过一条河。现在身处一边，而想去另一边。为什么想过河呢？是因为用户认知到了源点和目的地之间的差异（这种认知也许是正确的，也许被人忽悠是错误的），被某种力量所驱动。正如我们为了说服别人去购买一件商品，要么陈述现存的问题，要么描述目的地的美好，或者两者兼而有之。</p><p>在满足需求的过程中，需分析以下4个方面的问题。</p><p>1）源点：企业的现状。</p><p>2）目的地：未来的结果。</p><p>3）驱动力：问题、某种场景或情况。</p><p>4）阻力：成本多少？需要付出什么代价？</p><p>分析这4个方面问题时，应特别注意两点。</p><p>1）我们需要了解的不是事实，而是用户对于这些方面的“认知”。这些认知可能不是客观事实，但是认知决定了他们的行为。</p><p>2）用户表现出“显性需求”，需要对源点和目的地进行认知，并且驱动力的强度要远大于阻力的强度。</p><p>5．产品市场分析</p><p>对市场前景的预测主要需判断以下几个因素。</p><p>1）目前同类产品在市场上的状况，包括品牌、质量、价位、产品附加值等。</p><p>2）目前同类产品市场竞争情况分析，主要评估目前的竞争水平和市场空间。</p><p>3）产品的性价比、市场营销手段、产品综合优势和市场同类产品的对比。</p><p>从上述三个因素进行评估可得出两个结论：一是产品在目前市场竞争环境下的生存空间；二是产品提升市场占有率的可能性及前景。比如目前进入浏览器市场，搜狗浏览器、UC浏览器等占比分别是多少，还有哪一部分用户的需求未被满足，有哪一家的主打特征可能随着时间、技术、硬件等发展被取代，是否有用户普遍不满意的地方可以作为切入点？等等。</p><p>关于市场，还可以参考波特五力模型，如下图所示：</p><p>图片发自简书App<br>该模型以目前行业内部的竞争为核心，分析行业内部情况，分析该行业上下游（如购买者、供应者）的议价能力，看是否能够对其中某些环节进行取代或减少其利润，随后分析潜在进入者，如行业闭环、类似产品、需求强相关产品、使用场景强相关产品等，若该行业处于初期或变革期，甚至我们可以寻找一个替代品，彻底进行颠覆。</p><p>6．产品的易用性</p><p>产品除了可用，还应该易用。所谓的易用性，通俗点的说法就是用户在使用产品过程中，觉得很方便，能够得到赏心悦目的视觉感受和良好的使用体验。易用性是产品的一个基本自然属性，标志着最终产品的可用程度和成熟度。易用性是一项跨学科的应用科学，涉及认知心理学、计算机工程学、图形学、语言学和社会学等诸多学科，是一项浩大的“系统工程”。</p><p>易用性主要归纳为发现、弄懂和效率三种，也就是在谈论易用性时会经常提到的易见、易学和易操作。</p><p>（1）易见（Easy to discover）</p><p>易见指的是功能容易被发现，让用户能够一眼看到他想要的功能，即所谓的“所想即所见，所见即所得”。这需要我们统计分析用户的操作频率，把最常用的功能放在最显眼的位置。此外，对于软件产品来说，可定制化的图形用户（GUI界面）也是经常用到的方法。让用户自己去设计操作界面是最合适的，不过要记住不是每个用户都有耐心去设置界面。</p><p>当然，易见还包括赏心悦目的界面。试想一下，产品界面凌乱无序、错综复杂、风格各异，用户怎能有兴趣继续使用下去？但是，很多人把易用性狭隘地理解为界面设计，以为只要把界面做得漂亮就行。这种想法通常的表现就是尝试让美工——图形设计师来解决软件产品设计过程中出现的各种易用性问题。这个想法是比较片面的，美观的界面只是易用性的一方面，它的作用是吸引用户的注意力，让用户有一个良好的心情去操作软件。</p><p>（2）易学（Easy to learn）</p><p>易学就是产品功能学起来容易，上手快。业界流行一种说法：好的产品设计不需要帮助手册。因为好的设计能让客户一看就知道如何去操作，减少查看帮助手册的次数。这需要产品设计师熟悉用户操作习惯，从界面提示、名称术语等方面下功夫。</p><p>事实上，不需要帮助手册只是一种理想的说法。迄今为止，还没有哪个稍微复杂的产品不提供帮助手册或者说明书的，所以帮助手册仍具有不可替代的作用。那么如何把帮助手册做好呢？一方面是手册的组织方式，比较常见的有按功能模块、使用流程等，要根据产品的特点选择；另一方面是展现形式，提供截图、视屏等多媒体的手段，让用户更直观。</p><p>此外，帮助手册要方便用户查找，一般需要提供提纲、索引和关键字搜索等查找功能。对于软件产品来说，还可以提供即用即看的方式，即支持用户在操作过程中直接调出该功能对应的帮助内容，让用户可以快速定位要查看的内容。</p><p>（3）易操作（Easy to use）</p><p>易操作就是操作起来顺手、快捷。比较常用的评价标准是操作次数、操作距离和操作时间等。对于软件产品来说，最常见的操作输入就是键盘、鼠标和触摸屏。如何利用这些输入提供最快捷的操作，是软件产品易操作的设计重点。</p><p>易操作性与产品的具体功能相关，但也有一些准则可以参考，比如尽量在一个页面完成一套功能操作，避免切换页面；提供默认的操作选项和数据，减少用户的输入次数；避免频繁切换鼠标、键盘操作，等等。比如需要让用户输入手机号的输入框，默认帮用户调起数字键盘；比如微信支付在用户输入六位密码后默认帮用户提交请求而不必再次点击“确认”按钮。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180119 点石产品报告</title>
      <link href="/2018/01/19/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180119/"/>
      <url>/2018/01/19/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180119/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>中国的移动支付和外国的对比情况，以及为什么是这样。</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>那天看到一个视频讲的是国外的Applepay，Applepay只能用于少数场合，类似subway，KFC可以使用，但很多大商场是不能用的，包括维多利亚的秘密等，更别说街边的小商小贩了。<br>Applepay不是二维码，是NFC，这是硬件导致的差别，中国许多手机没有配置NFC。<br>但还是二维码方便，尤其是一群人需要付款时。</p><p>这是典型的“跨级发展”，中国的信用卡业务明显落后于国外，于是我们跳过了信用卡支付时代，直接跨入移动支付时代。</p><p>Apple Pay不能在里面存钱，只能和信用卡绑定，相当于还是刷卡，没有什么能完全取代信用卡的优势，所以一直不是主流。</p><p>而极小的商铺，类似街边麻辣烫，流动性大，不会用刷卡机，也没有二维码这么一说，只能现金支付，而移动支付几乎可以全覆盖，从最底层到高层，这是美国信用卡支付的一大劣势。</p><p>政策调整，扫码支付每天限额500，有人说这个很傻比，实际和咱们没啥关系，限额是为了防转错账防诈骗，只限扫别人转账，被扫转账是不限的。</p><blockquote><p>很多人都忽视了一点：没有在网络上被骂成狗的国有银行系统的配合，第三方平台支付是无法达成目前成就的。很多网上支付、移动支付技术最早都是欧美先行，然后国内跟进最后在市场因素的催化下实现反超。这个市场因素是表象，其根基还是我国独特的以国有经济为核心的经济体制。现在很多人在赞叹支付宝、微信支付、qq与微信即时通讯的便利与先进时，往往会以移动联通、国有银行为反面例子，顺便感叹下体制问题。但只要稍微理性分析，就可以会明白支付宝们能迅速超越国外同行，确确实实就是站在国家主导的银行制度肩膀上的。第三方支付顾名思义：通过银行与客户外的第三方平台进行支付。我国银行系统为第三方支付承担了两大基础性业务：1、身份认证2、转账结算。这两项不实现，第三方支付的安全与便捷就无从谈起。最流行的快捷支付需要三个条件：1、身份证（或其他证件）2、银行卡（无论储蓄卡或信用卡，这很关键）3、手机号中国的网络支付平台对比国外有两个最大的特点：1、以储蓄卡为主流,大大扩展了用户群体。2、在平台内实现即时转账，这第三方支付平台是迅速发展的关键。这两项可以说是支付宝们在市场开拓上能吊打欧美同行的原因。首先说说储蓄卡。应该可以说在中国办理全功能的银行储蓄卡是世界上最便捷的：1、无门槛、免费开户。2、即时领卡。绝大多数欧美银行无法实现这点的的原因，主要是基于成本考量。因为发行大量的带有各类功能、综合服务远超欧美的银行卡不仅意味着发卡工本、人力成本，后台系统运算能力、现金管理、配套网点建设、机具设备投放及其运营维护都耗费巨大。而大量无门槛发卡并不能保证带来足够的存款与中间收入，还会导致资源紧张服务不到位而影响市场声誉挤走优质客户，最后就成了赔钱的买卖。因此，设置开户条件、费用、等待时间，就可以替商业银行筛选掉太多本来想开银行卡但没有大量存款或信贷需求的潜在客户。过去十几年，我国的商业银行（特别是四大行加邮政、交通）在人民银行政策性文件的引导下，不计成本大量发行银联标志银行卡，将基本的金融综合服务在世界最大的发展中国家普及开来的同时，也使得银联迅速成长为世界级卡组织。目前我国人均持有银行卡已达四张多，总量上来看无论是增量还是存量都是毫无疑问的世界第一。银行卡的便利功能主要体现在自助设备上.</p></blockquote><blockquote><p>有了银行卡，接下来就是安全问题：虽然现在手机号是用身份证办的，银行卡也是用身份证开的，但是第三方支付平台自身并不能通过身份证确认手机号对银行卡对应关系，这份工作只能交给网点众多的银行以面对面的形式进行现场处理，即：1、银行在开卡时就完成手机号的验证2、开卡后，单独添加/修改认证的手机号注：必须本人到场且与公安局身份系统联网核查，比对样貌信息通过后才能完成。这样就意味着通过本人的现场的许可授予了相应手机号转账的权限，从而保障安全。另外，如果没有经过这道手续，即使原本就留有其他业务相关的手机号（如余额变动信息提醒）仍需要到柜台完成专门的现场认证才能用于快捷支付。这份工作就被分摊到了全国22万多家商业银行网点的日常工作中。想象下几亿用户如果都需要阿里与腾讯建设实体网点一个个当面核实，以快捷支付为绝对主流的移动支付还怎么能发展得起来？当然这种纯人力投入更是国外金融机构想都不会去想的。但到国内即使到了这一步，还有改进空间：快捷支付的主要认证媒介—短信，由于其技术开发早门槛低，导致如今被拦截、窃取的可能性非常高。而且银行卡所联系的手机号往往与大量个人金融信息有关，因此也存在巨大的安全隐患。为此公安部就研发了EID系统（公民网络身份证），希望引入物理介质来解决网络身份认证的问题。其基本原理还是以银行卡为基础，搭载一个eid芯片通过芯片读取的方式完成网络身份认证。部分电商以及第三方平台已经支持此种方式功能，但因为硬件设备布设与市场接受度等原因，有待推广。当然这里确认现实中的人与eid间的关系这一步还是放在了银行柜台。高大上欧美银行更不可能去干这种费力不讨好，短期看不到收益的事。2015年，四大行也曾开发自己的类似但安全度更高的支付方式，试图联手限制微信支付宝以夺回一部分支付市场，但由于推广手段贫乏，在整体的舆论氛围与政策导向下只是个聊胜于无的自我安慰。</p></blockquote><blockquote><p>总之，就安全角度而言，成本因素使得线上快捷支付基本上无法脱离目前在我国肩负起提供社会基本金融服务职责、拥有众多物理网点的国家主导银行体系。这也意味着，第三方支付要发展银行必须让利，这也是当年马云与银行谈判艰难的原因。接下来关于第三方支付的便捷性，就需要谈谈银行为实现支付平台转账所承担的结算业务。第三方支付平台的转账功能是国内第三方支付平台各类综合金融服务（红包、收款、还信用卡）能迅速开发出来的的关键所在。从这次全民晒支付宝账单就可以看出，转账需求在移动支付里占的比例非常之高。这种功能当然也是依托银行系统建立起来的，简单来讲就是通过第三方支付平台在银行系统内开立的客户备付金账户完成的（敲黑板）。举个简单例子：A用a卡在支付宝上转给B，AB各自看到了支付宝账户的金额变化。A的a卡转到的是ZFB在a行的备付金账户（这个大家查查银行卡交易对手账号就知道了），当B需要提款现的时候，其实是ZFB在b行的备付金账户给b卡转钱。然后a行的备付金账户与b行的备付金账户通过人民银行支付系统进行清算。所以哪怕放在支付宝的资金不提现，其实一直就在第三方支付平台的银行备付金账户里。而当转到余额宝内时，zfb银行备付金账户则往支付宝名下的货币基金在银行的户头里转账以供基金运营，然后再客户的余额宝上记上一笔份额，减一笔支付宝余额。支付宝客户备付金账户资金越多，马云就可以要求银行提供更高的存款利率，银行赚的也就是帮助支付宝结算的佣金结果还提高了自身揽存款的成本。而且支付宝可以以各种方式鼓励客户将钱投入其他产品，也造成了银行这边的存款流失。这就是为什么去年支付宝提现开始有条件收费之后，余额宝提现却仍旧免费。原因就在于鼓励客户将钱转到余额宝上——从银行角度来看就是从受备付金法规严格监管备付金账户转到由天弘基金公司名下自由度更高的资金账户里，成为运营资金。所以，为支付宝提供备付金账户服务：尽管开立备付金账户的银行获得了大量存款。</p></blockquote><blockquote><p>但从银行业整体来看，既提高了经营成本又降低了中间业务收入，长期来看更培养了竞争对手。（在17年4月新备付金制度改革后，银行不再支付利息，并逐步提高缴存比例到全部集中存管，当然这一部分资金的性质也不再属于银行吸收的存款。另一方面银联结算模式上线，商业银行彻底成为资金代保管的机构，第三方支付平台也不能躺着吃利息与随意挪用资金，这就需要提供更多互联网金融产品、服务以提高过路资金利用率。在这种国家主导的格局下，客户的利益从制度上得到保证。）所以，欧美国家没有银行或卡组织愿意承担大量低效益甚至负效益的储蓄账户网络安全柜面认证服务以及为第三方平台转账结算这种给他人做嫁衣的业务，网络支付也就只能依附在本身已经很成熟的信用卡支付体系下。visa或者master等外卡组织也有各种方式的网络验证功能，但一般主要用于信用卡且由于没有统筹规划而无法统一整合分散的各国市场。目前我国绑定网上支付的储蓄卡占了非常大一部分，从银行经营的战略角度来讲就是亏本买卖，也只有需要承担为社会提供基本金融服务的国内银行系统在政策导向下愿意全面承担起这项工作。无论年龄、身份随随便便开个银行卡就能即时使用第三方移动支付与转账的情况在国外是很罕见的。如今马云摩拳擦掌要开银行，从利益角度出发，他的银行肯定也不会去为自己的支付宝承担大量结算与身份认证这两项苦力活。即使存量用户规模庞大、技术先进如苹果，也没见到推出苹果账户转账的功能，而是开发了applepay这种单纯的技术平台，原因无非是：没有国家背书，以盈利为绝对目的的欧美银行与卡组织绝对不会允许苹果来分其蛋糕。</p></blockquote><blockquote><p>ps：2015年率先实现货币无纸化的瑞典，实现的方式是便是依靠小商、小贩、教堂、政府人人都装pos机，可见利益链条紧紧被银行抓在手里。去年，我国各家银行也曾力推applepay，就是因为这项技术与银行利益不冲突，但国内市场习惯仍旧是第三方支付。因此，在一定的技术条件下，也就只有中国这种分布广泛、系统发达的银行体制与不计成本、政策导向的经营理念相结合的特殊国情，使得第三方支付平台才能在保证安全的前提下将客户的资金成本与时间成本降到最低，从而获取市场信任迅速发展。</p></blockquote><blockquote><p>就如同快递行业蓬勃发展离不开我过公共交通基础设施的完善，以人民银行主导建立的包含大小额支付系统、网银互联系统、票据交换系统、银联公司、各个国有大中型银行为主体商业银行系统的我国基本金融结算制度也是大大小小200多家第三方支付平台遍地开花、互联网经济蓬勃发展的基础。这也是为什么马云的淘宝早已蜚声海外，但并没起步多晚的支付宝却水土不服的原因。想象一下，如果中国也如同金融资本为王的欧美一样移动支付只能绑定相对门槛高的信用卡然后只能消费不能转账的话，微信与支付宝自身应用做的再好，恐怕也难以超越欧美。所以为何外国移动支付没有向中国这么普及：答案就是国外银行系统从成本、利益角度考虑不会去支持也容不下集合消费、理财、结算的第三方支付平台。在中国收发红包玩的飞起的老外用不习惯？硅谷的工程师开发不出来支付宝级别的应用？比起用户习惯或者技术条件，利益才是最根本的决定因素。</p></blockquote><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>各有利弊，但综合来说，移动支付会是国外未来发展的趋势。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180118 点石产品报告</title>
      <link href="/2018/01/18/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%80%BB%E7%BB%9320180118/"/>
      <url>/2018/01/18/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%80%BB%E7%BB%9320180118/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>仍然是移动端游戏</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>看了不少手机上的游戏，我先把筛选出的几个适合移植到小程序上的游戏列出来，它们的共同特点是画面清新，属于休闲型，不太费脑子，有点新意，可以让玩家在体验过程发出“唔还能这么玩”的感受，以及，平均每局时间短，想玩随手玩，玩腻了随时放下。</p><p>Pinna 独轮骑行，休闲游戏。保持独轮车向前行走不要倒下，简约风格，不过刚玩容易抓狂。<br>Osmos 星噬，单机游戏和名字一样有仙气，入选AppStore精华，我有幸玩过（盗版），体验极棒，玩法类似球球大作战，但有趣味的多，许多关卡让我感觉到十足的新意。<br>黏黏世界，经典中的经典，我从小学五年级开始看游戏风云玩这个，小程序的话，可以考虑主要推出沙盒模式。<br>Boost2 极速隧道2，休闲类,重力感应类。永远不要停。只要记住这一点就够了,每一次加速都让人血脉贲张,速度十足，第一次隧道变形时，简直惊艳，外景漆黑一年，仿佛在太空中奔跑。</p><p>回到咱们的小程序，可不可以移植各种棋类纸牌类啥的。<br>不是不行，但适合量产，不适合作为咱们的第一个项目。<br>而且已经有许多人在做了。</p><p>贪吃蛇，连连看，跑酷，养宠物，平衡球，这些都好。<br>主要看咱们的能力达到什么水平，是想做个经典点的移植，还是和特色结合做一个惊艳点的。<br>不管做哪个，都需要许多策划，尤其是关卡类的。<br>这个如果想做，寒假不适合，小程序本身咱们接触就少，游戏也没多少经验，无论技术还是设计，都要大量协商探讨。<br>先学着做点Demo玩玩，可以当个长期项目。</p><h4 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h4><p>不吹不黑，我玩（过）的游戏不算少，龚涵更多，有把握做好，但需要时间。</p>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180116点石产品报告</title>
      <link href="/2018/01/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180116/"/>
      <url>/2018/01/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180116/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><ul><li>掌握git在mac上的基本操作。</li><li>可真他妈不容易。</li><li>Youtube产品简单分析。</li></ul><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><ul><li>翻墙之后，youtube是我最喜欢看的网站，因为youtube给我的感觉是这是一个为我设计的网站，是属于我的，从广告到内容全可以由我来掌控，而对比起来，优酷等一系列相当于“我就给你看这个你爱看不看”</li><li><p>首页</p><blockquote><p>首页是推荐，全部是YouTube根据算法推荐给我的视频，YouTube推荐算法以Google Brain为基础，开发人员可以使用分布式训练试验不同的深度神经网络结构，巴拉巴拉我也不懂，总之就是让人欲罢不能。我可以欺骗自己但是我无法欺骗算法，只要我“一不小心”在youtube搜了或者看了Porn之类违背社会主义核心价值观的东西，那么我的首页必然会出现更多违背社会主义的视频推荐。因为它觉得我就好这口，它唯一的目的就是让我爽。<br>首页从上到下整整齐齐网格化排列这些内容：一些推荐视频，为我推荐的频道，为我推荐的某类视频，再看一遍，之类等等，偶尔最上面会有一个视频banner广告。</p></blockquote></li><li><p>时下流行<br>这个页面列表化罗列下Top49个这两天热门的视频，和Top24个本周热门的视频。</p></li><li><p>订阅内容<br>昨天提供列表和网格两种显示方式。从上到下排列依次为 今天、昨天、本周、本月</p></li><li><p>侧边栏<br>一开始我没发现侧边栏。侧边栏提供了一些入口，都有：首页、我的频道、播放列表、订阅的频道等一大堆。我可以很方便查看历史记录和我建立的播放列表。拉到最下面可以看到一个入口“ youtube影片” ，我随手的点进去一看，果然。全是我买不起的付费电影。</p></li><li><p>广告<br>Youtube广告安排是由up主决定的，有以下几类：<br>展示广告（不影响观看）、重叠式图片广告（半透明显示在视频下半部分，可关掉）、插播广告（观看5秒就可以跳过）、不可跳过的插播广告（YouTube官方不推荐）。<br>视频类广告长度从5秒到几分钟都有，我一般看个5秒就跳过，遇到有兴趣的广告会看完或者为了支持某up主会故意让广告走一遍，可以增加up主收入。</p></li><li><p>播放器</p><blockquote><p>Youtube的播放器是——个——神——器！我找不到国内哪个站的播放器能有一两个以下提到的功能。<br>字幕：就算up主没有挂字幕，打开这个按钮也可以通过语音识别自动即时翻译出字幕，支持几十种语言。<br>注释：up主可以在视频里某帧加上注释，很方便可以点击跳转出去或者看到up主注释的内容比如“我这里录错了，应该是XX”。所以录视频的up主应该会经常会伸出手指着虚无的空气说：Click here to watch more video about xxx.<br>速度：这个功能太实用，可以调整播放速度，有0.25、0.5、正常、1.25、1.5、2六档速度，听外语减速，听讲座加速利器。<br>画质：youtube支持4320P、2160P、1080P、720P、480P、360P、240P、144P 这几档画质，比如上传的视频是1080 ，就会自动压缩出1080及其以下几个档位的画质版本。观看影片时候，会根据网速自动调整画质，而且过渡处理不卡顿，不影响观看体验。<br>剧场模式：就是横向打开，当然还有全屏模式。一个字，纯净。<br>播放界面下是标题、介绍、订阅按钮、加入播放列表、分享等，接着是评论，youtube视频下的评论区总是很热闹，个人很喜欢看评论。<br>播放界面的右侧是“接下来播放”，其实就是推荐，根据当前观看的此视频以及以前的历史观看记录去推荐给你新的视频。看youtube看不停就是因为这块功能，让人停不下来，黏性十足。</p></blockquote><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><ul><li>其实翻墙最主要的是，给我提供了个猎奇的渠道。</li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180117 点石产品报告</title>
      <link href="/2018/01/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180117/"/>
      <url>/2018/01/17/%E7%82%B9%E7%9F%B3%E4%BA%A7%E5%93%81%E6%8A%A5%E5%91%8A20180117/</url>
      <content type="html"><![CDATA[<h4 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h4><p>2017年中国移动游戏行业研究报告</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>从2016到2017，是中国移动游戏从成熟走向创新的一年。腾讯《王者荣耀》、网易《阴阳师》等现象级移动游戏成为网民热议的话题，持续引爆市场，并和长尾内容一起，使中国移动游戏在整体网游中的占比首次超过PC客户端游戏。移动游戏的崛起壮大已经成为不可逆转的时代潮流，并将持续深入地发展下去。</p><p>本报告将从中国移动游戏市场现状、资本动向、产品分析、产业聚焦、企业分析、行业趋势等多个方向，来对中国移动游戏市场做一个深度的梳理和分析，以期对各相关方有所助益。</p><p>报告中的重要观点：</p><ol><li><p>用户付费习惯的逐渐养成和ARPU值的提升驱动中国移动游戏市场规模稳步上升，2016年市场规模1022.8亿元;</p></li><li><p>资本市场对移动游戏行业整体热度下降，休闲竞技概念兴起，移动电竞受追捧;</p></li><li><p>活跃移动游戏产品总数下滑，独立游戏发展势头喜人;</p></li><li><p>玩家对游戏质量的要求越来越高，高质量精品化势在必行;</p></li><li><p>社交渠道成游戏运营和分发新战场。</p></li></ol><p>一、中国移动游戏市场概述</p><p>后红利时代，手游市场进入平稳发展期</p><p>2016年中国移动游戏市场规模约1023亿，同比增长81.9%。2017年相比去年增长率讲有所下滑，一方面是受到用户规模的天花板限制，另一方面，国内手游产品同质化趋势严重，市场需要创新型产品的刺激。但随着用户的成长，用户的游戏习惯和付费习惯的逐渐成熟，用户付费的意愿和付费额度还会有一定上升，整体市场相对稳定。预计未来3-5年，移动游戏会进入一个平稳上升的发展期。</p><p>游戏人口红利逐步消退，质量提升成游戏行业新方向</p><p>2016年移动游戏用户规模约5.21亿人。经过前两年的爆发式增长，人口红利逐步消退，移动游戏用户规模几乎达到天花板。 艾瑞分析认为，单纯通过买流量的方式提高游戏收入的时代已经渐渐过去，通过提升产品质量、追求玩法创新、整合营销资源、精细数据分析来提升产品付费率和付费额度会是未来的新方向。</p><p>移动游戏整体热度下降，休闲竞技概念走高</p><p>近两年，资本对移动游戏市场的追捧有所降温。相比2015年超过400亿元的并购金额。2016年移动游戏相关并购案例的金额约为329亿元。其中最大的一笔收购事件是巨人网络305亿收购以色列棋牌社交手游公司Playtika。除此以外，还有两起棋牌游戏相关的收购案例。棋牌、电竞概念成为2016-2017年游戏资本市场的关键词。</p><p>二、中国移动游戏产品分析</p><p>产品数量回落，市场进入冷静期</p><p>移动游戏产品数量2015年达到巅峰，接近两万款活跃游戏产品。艾瑞数据显示， 2016年游戏产品数量回落，仅有12167款活跃产品。一方面说明经过15年的狂热，市场逐渐进入冷静期。另一方面，从研发商角度来看，有一批小的手游制作团队被挤出市场，存活下来的厂商也一定程度上精简了项目数量。</p><p>精品游戏依然稀缺，单机游戏竞争更激烈</p><p>根据艾瑞游戏评级模型推算，SSS级别的游戏依然稀缺，2016年分别有31款SSS级别的移动单机游戏和41款SSS级别的移动网络游戏。而相比而言，单机游戏的竞争更激烈。网络游戏的精品产出率约为单机游戏的4倍。</p><p>大制作、大营销、大IP成常态，创新产品难寻</p><p>角色扮演类游戏扎堆，影游联动成绩平平</p><p>几乎所有影游联动的移动游戏都是角色扮演类，在游戏玩法上重合度较高。整体而言，虽然游戏的上线时间和影视剧的上线时间都距离较近;研发商也都是具有丰富研发经验的老牌厂商，质量相对有保障;但是相比影游联动的巅峰之作——《花千骨》，近两年的影游联动移动游戏的成绩都不算特别出众。</p><p>三、中国独立游戏产业聚焦</p><p>多年酝酿，现在是独立游戏最好的时代</p><p>中国独立游戏在经过多年的潜伏期和萌芽期后，终于在16年迎来了爆发。16年也被许多业内人士称为中国独立游戏的元年。独立游戏不仅在数量上呈现指数式增长，开发水平上较之以往也有大幅度的提升。一方面自14年独立游戏出现在公众视野后，自身水平不断提升。另一方面，越来越多的商业开发者和资本开始在独立游戏领域进行业务扩张。</p><p>多方发力，助力独立游戏快速发展</p><p>中国独立游戏当今的高速发展是各个环节共同发力所致。独立游戏比赛为各独立游戏开发者和开发团队提供了交流和竞争的环境。游戏发行商为独立游戏解决了发行上市运营等繁琐的问题，让独立游戏也能顺利与大众玩家见面。App Store、Taptap、Steam等国内外游戏渠道为独立游戏大开绿灯，让更多的玩家能接触到优秀的独立游戏。</p><p>日渐红火，独立游戏比赛参赛人数百倍增长</p><p>从2011年Global Game Jam 登陆上海开始，独立游戏比赛的参赛人数逐年攀升，从最开始的10余人，成长到2017年多城联办，超千人参与。独立游戏比赛成为了中国优秀独立团队，游戏选拔和发现的重要舞台。</p><p>四、中国移动游戏企业分析</p><p>头部公司以研运一体厂商为主</p><p>2016年中国移动游戏上市企业移动游戏营收TOP10中，除了以发行为主的昆仑万维、恺英网络，和以研发为主的掌趣科技外，大多数是自研自发研运一体的游戏厂商。</p><p>五、中国移动游戏行业趋势</p><p>取消畅销榜，编辑推荐地位提升</p><p>iOS这边，Apple宣布将在2017年10月新版本的App Store中取消畅销榜，这意味着，一向以畅销榜为王，习惯利用自充值来打榜的厂商将无榜可刷。相应的，编辑推荐的重要性将被凸显出来。根据以往的经验，创新的玩法、艺术性的画面表达、和谐的游戏音乐将更容易被推荐到首页。</p><p>而国内Android市场上，以编辑推荐为核心的游戏平台Taptap在用户量和玩家口碑上稳步上升，也侧面证明了玩法本身对于玩家的巨大吸引力。</p><p>玩家对游戏质量的要求越来越高</p><p>随着市场竞争日趋白热化，玩家的游戏习惯和游戏品味逐渐成熟，低质量游戏通过换皮、买量、刷榜来赚快钱的模式越来越行不通。同时，2016年中出台的“版号新规”逐渐走上正轨，监管机构的介入压缩了抄袭、山寨低质量游戏的生存空间。</p><p>短平快的休闲竞技游戏能填补玩家碎片时间</p><p>从2010年到现在，中国移动游戏经历了从休闲游戏到MMORPG游戏，再到竞技游戏的变迁。玩家的游戏习惯、付费习惯都逐渐成熟。轻竞技概念是相对于传统竞技而言，指的是对局时间更短、更容易上手的有玩家双方进行的对抗性游戏。这类游戏既能很好的满足玩家相比休闲游戏更激烈的游戏需求，又能减轻玩家在传统竞技游戏中的疲惫感。从而受到玩家的欢迎。</p><p>社交渠道成游戏运营和分发新战场</p><p>用户规模接近天花板后，游戏市场逐渐从增量市场向存量市场过度，如何抢夺现有的游戏用户成了游戏厂商最为头疼的问题，而用户每天都必然会接触到的社交软件成了游戏运营和分发的新战场。</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><ul><li>前几天看张小龙的发布会，发现小程序几乎支持所有类别的游戏，包括MOBA、FPS等</li><li>而小程序游戏本事的属性是用极其简单的元素搭建而成，容易迅速上手，学习成本低，且有引力和复玩性，那我很期待一款极简的MOBA游戏是怎样的。</li><li>概念性的FPS当属SUPER HOT莫属，火过一段时间，所有人物全是一个香肠人，但不同人物之间区别非常明显。<br>其实越是简单，元素区分度越大。</li><li>至于我们要做游戏的话，做什么样的，以我们目前的情况，跑酷类游戏是最容易实现的，也是最适合在小程序发布的。</li><li>RPG类庞大的剧情线我们是不太可能做到，而且设定太多（除非是文字冒险类，类似UNDERTALE），FPS要求技术难度过高，多人在线游戏很难凑齐人。</li><li>当然我希望游戏有许多可以深入挖掘的内容，这和元素简单不冲突。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> PM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180105 Hello Mac</title>
      <link href="/2018/01/05/push/"/>
      <url>/2018/01/05/push/</url>
      <content type="html"><![CDATA[<h4 id="mac-环境下push东西的基本命令行操作"><a href="#mac-环境下push东西的基本命令行操作" class="headerlink" title="mac 环境下push东西的基本命令行操作"></a>mac 环境下push东西的基本命令行操作</h4><ul><li>其实跟Linux差不多了</li></ul><hr><ol><li>安装git</li></ol><p>brew install git</p><p>安装完git之后，就可以开始在mac上面进行git的配置</p><ol><li>设置SSH</li></ol><p>检查SSH KEYS<br>通过下面命令来查看mac是否存在SSH KEYS<br>cd ~/.ssh</p><p>由于我已经设置好了SSH，所以会定位到.ssh这个目录下面。 </p><p>创建SSH KEYS</p><p>ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a>“</p><p>注意上述输入的是你的github帐号的邮箱，输入的时候要有” “双引号。<br>接着回输出下面的语句：</p><p>Generating public/private rsa key pair. Enter file in which to save thekeys (/Users/your_user_directory/.ssh/id_rsa): </p><p>看到这里，直接点击Enter就好了<br>接着会提示你输入自定义的通行证号，如果你不想设置，那就直接Enter，这样的话就为空。注意在摄入的时候你会看不到任何字符，不要认为你没有输入进去，因为这和mac在terminal下输入密码一样，你也是看不到任何提示或者字符的</p><p>Enter passphrase(empty for no passphrase):</p><p>提示重新输入，要保持上下输入的号一样</p><p>Enter same passphraseagain:</p><p>之后就会提示我们创建 id_rsa 和 id_rsa.pub成功</p><ol><li><p>在github中添加SSH<br>登陆你的github，选择SSH and GPG keys添加ssh<br>Title：<a href="mailto:xxxxx@gmail.com" target="_blank" rel="noopener">xxxxx@gmail.com</a><br>Key：打开你生成的id_rsa.pub文件，将其中内容拷贝至此。创建成功会有相应的提示。如下所示：<br>这里写图片描述<br>如果大家不知道怎么打开id_rsa.pub文件，可以根据我下面的操作来打开。<br>这里写图片描述</p></li><li><p>验证你的github连接</p></li></ol><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>将会显示下面的信息：</p><p>The authenticity of host ‘github.com (192.30.252.121)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?<br>输入no，因为我们这只是测试。看到上述的提示表明我们这里github连接已经没有问题了。</p><ol><li>设置用户名和邮箱<br>在本地设置git：</li></ol><p>git config –global user.name “your name”<br>git config –global user.email “<a href="mailto:xxxxx@163.com" target="_blank" rel="noopener">xxxxx@163.com</a>“</p><p>输入上述之后没有任何提示说明设置成功了，如果不放心，可以利用下述命令来查看设置是否正确</p><p>git config –list</p><p>这样的话，git和github设置就完成了，下面要做的就是把本地git里面的代码push到github上，还有如何从github上pull代码</p><ol><li><p>创建github代码库<br>登陆你的github，选择New Repository输入你要创建project的名字，这样代码库就创建完毕了，要记住你刚刚新建Repository的网址 （其实无所谓了）</p></li><li><p>本地git创建<br>首先创建一个文件夹my_git<br>这个文件夹会被用来做本地的库</p></li></ol><p>mkdir ~/my_git</p><p>更改当前目录到my_git目录下；初始化该文件夹</p><p>cd ~/my_git<br>git init</p><p>创建一个需要push上的文件，咱们假设要push TEST。把TEST搁进刚刚的文件夹my_git</p><p>git add TEST<br>git commit -m “my first commit”        //这个是对文件的注释</p><ol><li>本地git版本库push到github<br>这样已经将要更改的文件提交到版本库中，但是呢还没有真正提交到网站上去，还需要执行下面两个命令：</li></ol><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx/xxxx.git<br>git remote add origin <a href="https://github.com/xxx/xx.git" target="_blank" rel="noopener">https://github.com/xxx/xx.git</a></p><p>注意上面的两个命令结果一样，只是协议不一样，第一个速度会比较快。（若是第一次提交该项目的文件或是修改项目文件名后则需要这行这个命令，以后就可不用执行该命令）<br>输入下面的命令之后，会提示你输入你的帐号和密码（也可能不用输入）</p><p> git push -u origin master</p><p>这样，我们就可以把本地的git版本库push到你的github里</p><p><strong>这里很容易出错，如果已经这个库里已经有了文件（比如README），会出错，需要先输入git pull –rebase origin master，合并两个库，输入完后，本地的库会收到GitHub库中的内容。</strong> </p><ol><li>从github中pull代码到本地<br>在github中搜到你想要pull的代码，如<a href="https://github.com/xx/xx" target="_blank" rel="noopener">https://github.com/xx/xx</a><br>选择fork，将此repository fock到你的repository下<br>在本地创建local repository并初始化<br>使用命令：</li></ol><p>git pull <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxxxx/xxxx.git<br>1<br>这样代码就被pull到本地git版本库里了</p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我喜欢的梗</title>
      <link href="/1998/03/10/%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E6%A2%97/"/>
      <url>/1998/03/10/%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E6%A2%97/</url>
      <content type="html"><![CDATA[<p>只收录经典的</p><h3 id="笑话"><a href="#笑话" class="headerlink" title="笑话"></a>笑话</h3><p>女朋友大姨妈来了怎么安慰</p><p><del> 在她面前锤自己的蛋蛋让她心里平衡 </del></p><hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>虽然不玩游戏了，但有时还会关注游戏的大事件和新闻</p><p>第一次看到雪妍的腿是种怎样的体验？</p><p><img src="/img/content/fensuizhitui.png" alt="fensuizhitui"></p><p><img src="/img/content/fensuizhitui2.png" alt="wocaonimalegebi"></p><p>栩栩如生</p><hr><p>不定时更新</p>]]></content>
      
      
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
